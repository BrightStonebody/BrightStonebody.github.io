<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BrightStone</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-15T01:20:40.718Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>BrightStone</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>MVP模式防止内存泄露</title>
    <link href="http://yoursite.com/2019/04/15/MVP%E6%A8%A1%E5%BC%8F%E9%98%B2%E6%AD%A2%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2/"/>
    <id>http://yoursite.com/2019/04/15/MVP模式防止内存泄露/</id>
    <published>2019-04-15T00:54:27.000Z</published>
    <updated>2019-04-15T01:20:40.718Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MVP模式防止内存泄露"><a href="#MVP模式防止内存泄露" class="headerlink" title="MVP模式防止内存泄露"></a>MVP模式防止内存泄露</h1><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://jocherch.github.io/mvp/mvp-memory-leak/" target="_blank" rel="noopener">https://jocherch.github.io/mvp/mvp-memory-leak/</a><br><a href="https://blog.csdn.net/Xiong_IT/article/details/52610729" target="_blank" rel="noopener">https://blog.csdn.net/Xiong_IT/article/details/52610729</a></p><h3 id="发生内存泄露的原因"><a href="#发生内存泄露的原因" class="headerlink" title="发生内存泄露的原因"></a>发生内存泄露的原因</h3><p>由于Presenter经常性地需要执行一些耗时的操作，例如，我们经常使用的网络请求数据。当 Presenter 持有了 Activity 的强引用，如果在请求结束之前，Activity 被销毁了，那么由于网络请求还没有返回，导致 Presenter 一直持有 Activity 对象的引用，使得该对象无法被系统回收，此时就发生了内存泄露。</p><p><strong>解决方案：通过弱引用和 Activity / Fragment 的生命周期来解决这个问题。</strong></p><p><strong>Model</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">BaseMvpModel</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mvpCancleTasks</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="comment">// TODO 终止线程池ThreadPool.shutDown()，AsyncTask.cancle()，或者调用框架的取消任务api</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>View</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">BaseMvpView</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mvpDetachView</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        例如</span></span><br><span class="line"><span class="comment">        @Override</span></span><br><span class="line"><span class="comment">        public void onDestroy() &#123;</span></span><br><span class="line"><span class="comment">            super.onDestroy();</span></span><br><span class="line"><span class="comment">            mPresenter.mvpDestroy();</span></span><br><span class="line"><span class="comment">            mPresenter = null;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>Presenter</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">BaseMvpPresenter</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mvpDestory</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/*例如:</span></span><br><span class="line"><span class="comment">        public void mvpDestory() &#123;</span></span><br><span class="line"><span class="comment">            view = null;</span></span><br><span class="line"><span class="comment">            if(modle != null) &#123;</span></span><br><span class="line"><span class="comment">                modle.mvpaCncleTasks();</span></span><br><span class="line"><span class="comment">                modle = null;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里只是创建了一个BaseInterface用于让mvp的接口去继承，没有做更加详细的封装，仅仅由于提示。主要是不同的模块处理可能会有不同的操作<br><strong>注意要使用WeakReference</strong><br>并不是在任何情况下Activity的onDestroy都会被调用（其它原因导致Activity对象还在被引用，就不会回调onDestroy方法），一旦这种情况发生，弱引用也能够保证不会造成内存泄露。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MVP模式防止内存泄露&quot;&gt;&lt;a href=&quot;#MVP模式防止内存泄露&quot; class=&quot;headerlink&quot; title=&quot;MVP模式防止内存泄露&quot;&gt;&lt;/a&gt;MVP模式防止内存泄露&lt;/h1&gt;&lt;h3 id=&quot;参考链接&quot;&gt;&lt;a href=&quot;#参考链接&quot; class=&quot;
      
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="MVP" scheme="http://yoursite.com/tags/MVP/"/>
    
      <category term="内存泄露" scheme="http://yoursite.com/tags/%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2/"/>
    
  </entry>
  
  <entry>
    <title>Activity管理类的封装</title>
    <link href="http://yoursite.com/2019/04/14/Android/Activity%E7%AE%A1%E7%90%86%E7%B1%BB%E7%9A%84%E5%B0%81%E8%A3%85/"/>
    <id>http://yoursite.com/2019/04/14/Android/Activity管理类的封装/</id>
    <published>2019-04-14T11:41:50.000Z</published>
    <updated>2019-04-14T12:16:17.656Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>有的时候我们需要在一个activity1中销毁另一个制定的activity2。或者是在程序的某个位置销毁所有的activity，达到退出整个app的目的</p><p>我在网上找到一个做法，考虑的很严谨，在stack里存的不是activity，而是WeakReference。作者的愿意是担心出现有activity被finish之后ActivityMannager却忘了通知的情况，然后就是内存泄露 。。<br><strong>这里主要是说在系统内存不足杀死Activity时onDestory方法不会被调用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinishActivityManager</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">FinishActivityManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> FinishActivityManager sManager;</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;WeakReference&lt;Activity&gt;&gt; mActivityStack;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> FinishActivityManager <span class="title">getManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sManager == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (FinishActivityManager.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (sManager == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    sManager = <span class="keyword">new</span> FinishActivityManager();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sManager;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加Activity到栈</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> activity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addActivity</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mActivityStack == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mActivityStack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        mActivityStack.add(<span class="keyword">new</span> WeakReference&lt;&gt;(activity));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查弱引用是否释放，若释放，则从栈中清理掉该元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkWeakReference</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mActivityStack != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 使用迭代器进行安全删除</span></span><br><span class="line">            <span class="keyword">for</span> (Iterator&lt;WeakReference&lt;Activity&gt;&gt; it = mActivityStack.iterator(); it.hasNext(); ) &#123;</span><br><span class="line">                WeakReference&lt;Activity&gt; activityReference = it.next();</span><br><span class="line">                Activity temp = activityReference.get();</span><br><span class="line">                <span class="keyword">if</span> (temp == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    it.remove();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前Activity（栈中最后一个压入的）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Activity <span class="title">currentActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        checkWeakReference();</span><br><span class="line">        <span class="keyword">if</span> (mActivityStack != <span class="keyword">null</span> &amp;&amp; !mActivityStack.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> mActivityStack.lastElement().get();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭当前Activity（栈中最后一个压入的）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finishActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Activity activity = currentActivity();</span><br><span class="line">        <span class="keyword">if</span> (activity != <span class="keyword">null</span>) &#123;</span><br><span class="line">            finishActivity(activity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭指定的Activity</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> activity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finishActivity</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (activity != <span class="keyword">null</span> &amp;&amp; mActivityStack != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 使用迭代器进行安全删除</span></span><br><span class="line">            <span class="keyword">for</span> (Iterator&lt;WeakReference&lt;Activity&gt;&gt; it = mActivityStack.iterator(); it.hasNext(); ) &#123;</span><br><span class="line">                WeakReference&lt;Activity&gt; activityReference = it.next();</span><br><span class="line">                Activity temp = activityReference.get();</span><br><span class="line">                <span class="comment">// 清理掉已经释放的activity</span></span><br><span class="line">                <span class="keyword">if</span> (temp == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    it.remove();</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (temp == activity) &#123;</span><br><span class="line">                    it.remove();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            activity.finish();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭指定类名的所有Activity</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cls</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finishActivity</span><span class="params">(Class&lt;?&gt; cls)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mActivityStack != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 使用迭代器进行安全删除</span></span><br><span class="line">            <span class="keyword">for</span> (Iterator&lt;WeakReference&lt;Activity&gt;&gt; it = mActivityStack.iterator(); it.hasNext(); ) &#123;</span><br><span class="line">                WeakReference&lt;Activity&gt; activityReference = it.next();</span><br><span class="line">                Activity activity = activityReference.get();</span><br><span class="line">                <span class="comment">// 清理掉已经释放的activity</span></span><br><span class="line">                <span class="keyword">if</span> (activity == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    it.remove();</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (activity.getClass().equals(cls)) &#123;</span><br><span class="line">                    it.remove();</span><br><span class="line">                    activity.finish();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 结束所有Activity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finishAllActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mActivityStack != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (WeakReference&lt;Activity&gt; activityReference : mActivityStack) &#123;</span><br><span class="line">                Activity activity = activityReference.get();</span><br><span class="line">                <span class="keyword">if</span> (activity != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    activity.finish();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            mActivityStack.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 退出应用程序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exitApp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            finishAllActivity();</span><br><span class="line">            <span class="comment">// 退出JVM,释放所占内存资源,0表示正常退出</span></span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">            <span class="comment">// 从系统中kill掉应用程序</span></span><br><span class="line">            android.os.Process.killProcess(android.os.Process.myPid());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是一个BaseActivity类， 重写onCreate和onDestory方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chenlei.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        MyActivityManager.addActivity(<span class="keyword">this</span>);</span><br><span class="line">        Log.i(<span class="string">"有activity新添加"</span>, <span class="string">"onCreate: "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="string">"有activity被销毁"</span>, <span class="string">"onDestroy: "</span>+ MyActivityManager.getSize());</span><br><span class="line">        MyActivityManager.finishActivity(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来所有的activity类都继承自BaseActivity， 然后就可以在制定的activity类中对ActivityManager类进行操作</p><p>网上原文：<br><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2017/0629/8124.html" target="_blank" rel="noopener">http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2017/0629/8124.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;使用场景&quot;&gt;&lt;a href=&quot;#使用场景&quot; class=&quot;headerlink&quot; title=&quot;使用场景&quot;&gt;&lt;/a&gt;使用场景&lt;/h3&gt;&lt;p&gt;有的时候我们需要在一个activity1中销毁另一个制定的activity2。或者是在程序的某个位置销毁所有的activit
      
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Activity" scheme="http://yoursite.com/tags/Activity/"/>
    
  </entry>
  
  <entry>
    <title>Android-Studio解决依赖冲突</title>
    <link href="http://yoursite.com/2019/04/14/Android/Android-Studio%E8%A7%A3%E5%86%B3%E4%BE%9D%E8%B5%96%E5%86%B2%E7%AA%81/"/>
    <id>http://yoursite.com/2019/04/14/Android/Android-Studio解决依赖冲突/</id>
    <published>2019-04-14T11:40:23.000Z</published>
    <updated>2019-04-14T12:16:21.341Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-Studio解决依赖冲突"><a href="#Android-Studio解决依赖冲突" class="headerlink" title="Android-Studio解决依赖冲突"></a>Android-Studio解决依赖冲突</h1><p>我们做android项目通常会引入很多第三方库， 有时候不同的第三方库会出现依赖冲突，导致添加依赖后就android-studio就报错。<br>做项目是要添加glide库，直接添加最新版本 4.8，《第一行代码》中介绍使用的版本是3.7。 结果就是4.8的版本一添加依赖就报错，在build.gradle文件中报错buildtool版本冲突。我在网上找到了如下的文章，解决方法是一样的，做一个笔记。<strong>需要说明的 glide4.+ 的版本和 3.+ 的版本，提供的api接口的操作形式发生了变化，而且google上搜到说版本升级之后其实性能没有多大提升</strong></p><p>原文：<br><a href="https://blog.csdn.net/victor888886/article/details/73714141" target="_blank" rel="noopener">https://blog.csdn.net/victor888886/article/details/73714141</a></p><p><strong>以下是网上的文章内容：</strong><br>最近刚接手一个项目，里面模块有三四个，引入的第三方包更多了。但是问题来了，新配置的studio一运行就报了错。</p><pre><code>Error:Execution failed for task &apos;:app:processDebugManifest&apos;.</code></pre><blockquote><p>Manifest merger failed : Attribute meta-data#android.support.VERSION@value value=(25.3.1) from [com.android.support:design:25.3.1] AndroidManifest.xml:27:9-31<br>is also present at [com.android.support:support-v4:26.0.0-alpha1] AndroidManifest.xml:27:9-38 value=(26.0.0-alpha1).<br>Suggestion: add ‘tools:replace=”android:value”’ to element at AndroidManifest.xml:25:5-27:34 to override.  </p></blockquote><p>可以看到，studio已经明确的指出了错误，在清单文件中Android support 库版本冲突了，而且，studio还很“人性”地给出了suggestion：清单文件25行——27行添加：</p><pre><code>tools:replace=&quot;android:value&quot;</code></pre><p>坑就坑在这里，给出的建议完全误导人了。咳咳，下面看我详（如）细（何）解（装）释（逼）：</p><h4 id="问题分析："><a href="#问题分析：" class="headerlink" title="问题分析："></a>问题分析：</h4><pre><code>看到com.android.support:design:25.3.1 和com.android.support:support-v4:26.0.0-alpha1，说明这个Android support库版本冲突了，解决的思想很简单，就是统一使用同一个版本的support库，比如修改掉26.0.0-alpha1的依赖，统一换成25.3.1的版本。</code></pre><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><pre><code>既然有了思路，那就动手试一试，全局搜索26.0.0-alpha1，统一替换为 25.3.1正常情况下，这个是能解决问题的，但只能解决gradle里面自己引入的依赖版本问题。然而，今天碰到的坑还没完呢，同步代码以后，还是原来的错误信息！</code></pre><h3 id="再次分析："><a href="#再次分析：" class="headerlink" title="再次分析："></a>再次分析：</h3><pre><code>问题就出在第三方库的依赖了，好多第三方库默认引用当前最新的support库，现在最新的就是26.0.0-alpha1这个版本。所以，要解决问题，就要从引入的三方库里面入手了！那么问题来了，挖掘机哪家......哦不，怎么知道哪个依赖包有冲突？下面出杀手锏了：打开Android studio下面的terminal，输入命令：`gradle -q app:dependencies`,惊喜出现了：没有配置gradle环境变量的同学赶快去配一个吧！..**（这里不需要配置gradle环境变量也可以，在terminal中输入命令：./gradlew -q app:dependencies效果是一样的）**配过之后可以看到类似一下的输出：</code></pre><p>+— project :base-util<br>| +— com.android.support:recyclerview-v7:25.3.1 (<em>)<br>| +— cn.qqtheme.framework:WheelPicker:1.5.1<br>| | +— cn.qqtheme.framework:Common:1.5.1<br>| | | +— com.android.support:support-v4:latest.release -&gt; 26.0.0-alpha1 (</em>)<br>| | | — com.android.support:support-annotations:latest.release -&gt; 26.0.0-alpha1<br>| | +— com.android.support:support-v4:latest.release -&gt; 26.0.0-alpha1 (<em>)<br>| | — com.android.support:support-annotations:latest.release -&gt; 26.0.0-alpha1<br>| +— com.github.CymChad:BaseRecyclerViewAdapterHelper:v1.9.8<br>| +— io.reactivex:rxjava:1.1.8<br>| +— io.reactivex:rxandroid:1.1.0<br>| | — io.reactivex:rxjava:1.1.0 -&gt; 1.1.8<br>| +— com.squareup.okhttp3:okhttp:3.2.0 -&gt; 3.4.1<br>| | — com.squareup.okio:okio:1.9.0<br>| +— com.squareup.retrofit2:retrofit:2.0.2<br>| | — com.squareup.okhttp3:okhttp:3.2.0 -&gt; 3.4.1 (</em>)<br>| +— com.squareup.retrofit2:adapter-rxjava:2.0.2<br>| | +— com.squareup.retrofit2:retrofit:2.0.2 (<em>)<br>| | — io.reactivex:rxjava:1.1.1 -&gt; 1.1.8<br>| +— com.squareup.retrofit2:converter-gson:2.0.2<br>| | +— com.squareup.retrofit2:retrofit:2.0.2 (</em>)<br>| | — com.google.code.gson:gson:2.6.1<br>| +— com.squareup.okhttp3:logging-interceptor:3.4.1<br>| | — com.squareup.okhttp3:okhttp:3.4.1 (<em>)<br>| +— com.github.zhaokaiqiang.klog:library:1.5.0<br>| | — com.android.support:support-annotations:23.4.0 -&gt; 26.0.0-alpha1<br>| +— com.squareup.retrofit2:converter-simplexml:2.0.2<br>| | +— com.squareup.retrofit2:retrofit:2.0.2 (</em>)<br>| | — org.simpleframework:simple-xml:2.7.1<br>| +— com.github.bumptech.glide:glide:3.7.0<br>| +— project :base-res (*)<br>| — com.jakewharton:butterknife:7.0.1</p><p>很明显cn.qqtheme.framework:WheelPicker这个包默认引用了最新的support库！</p><h3 id="最终解决："><a href="#最终解决：" class="headerlink" title="最终解决："></a>最终解决：</h3><p>找到依赖的库，修改为下面的方式引入：</p><pre><code>compile (&apos;cn.qqtheme.framework:WheelPicker:1.5.1&apos;){        exclude group:&apos;com.android.support&apos;    }</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Android-Studio解决依赖冲突&quot;&gt;&lt;a href=&quot;#Android-Studio解决依赖冲突&quot; class=&quot;headerlink&quot; title=&quot;Android-Studio解决依赖冲突&quot;&gt;&lt;/a&gt;Android-Studio解决依赖冲突&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
      <category term="AndroidStudio" scheme="http://yoursite.com/categories/Android/AndroidStudio/"/>
    
    
      <category term="AndroidStudio" scheme="http://yoursite.com/tags/AndroidStudio/"/>
    
  </entry>
  
  <entry>
    <title>Handler防止内存泄露</title>
    <link href="http://yoursite.com/2019/04/14/Android/Handler%E9%98%B2%E6%AD%A2%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2/"/>
    <id>http://yoursite.com/2019/04/14/Android/Handler防止内存泄露/</id>
    <published>2019-04-14T10:59:55.000Z</published>
    <updated>2019-04-14T12:16:34.349Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Handler防止内存泄露"><a href="#Handler防止内存泄露" class="headerlink" title="Handler防止内存泄露"></a>Handler防止内存泄露</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> MyHandler mHandler = <span class="keyword">new</span> MyHandler(<span class="keyword">this</span>);</span><br><span class="line">    <span class="keyword">private</span> TextView mTextView ;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandler</span> <span class="keyword">extends</span> <span class="title">Handler</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> WeakReference&lt;Context&gt; reference;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyHandler</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">            reference = <span class="keyword">new</span> WeakReference&lt;&gt;(context);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(Message msg)</span> </span>&#123;</span><br><span class="line">            MainActivity activity = (MainActivity) reference.get();</span><br><span class="line">            <span class="keyword">if</span>(activity != <span class="keyword">null</span>)&#123;</span><br><span class="line">                activity.mTextView.setText(<span class="string">""</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        mTextView = (TextView)findViewById(R.id.textview);</span><br><span class="line">        loadData();</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">//loadData()方法是在子线程中，执行</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//...request</span></span><br><span class="line">        Message message = Message.obtain();</span><br><span class="line">        mHandler.sendMessage(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        <span class="comment">//如果你的Handler被delay（延时了）,可以做如下的处理</span></span><br><span class="line">        mHandler.removeCallbacksAndMessages(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><p>创建一个静态Handler内部类，然后对Handler持有的对象使用弱引用，这样在回收时也可以回收Handler持有的对象，这样虽然避免了Activity泄漏，如果你的Handler被delay（延时了），在Activity的Destroy时或者Stop时应该移除消息队列中的消息</p><p>使用mHandler.removeCallbacksAndMessages(null);是移除消息队列中所有消息和所有的Runnable。当然也可以使用mHandler.removeCallbacks();或mHandler.removeMessages()；来移除指定的Runnable和Message。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Handler防止内存泄露&quot;&gt;&lt;a href=&quot;#Handler防止内存泄露&quot; class=&quot;headerlink&quot; title=&quot;Handler防止内存泄露&quot;&gt;&lt;/a&gt;Handler防止内存泄露&lt;/h1&gt;&lt;figure class=&quot;highlight java
      
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="内存泄露" scheme="http://yoursite.com/tags/%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2/"/>
    
      <category term="Handler" scheme="http://yoursite.com/tags/Handler/"/>
    
  </entry>
  
  <entry>
    <title>Jni入门</title>
    <link href="http://yoursite.com/2019/04/13/Jni%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2019/04/13/Jni入门/</id>
    <published>2019-04-13T05:12:47.000Z</published>
    <updated>2019-04-14T12:13:24.411Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Jni入门"><a href="#Jni入门" class="headerlink" title="Jni入门"></a>Jni入门</h1><p>参考:<br><a href="http://wiki.jikexueyuan.com/project/jni-ndk-developer-guide/workflow.html" target="_blank" rel="noopener">JNI 开发流程 - JNI/NDK 开发指南 - 极客学院Wiki</a></p><h3 id="1、编写native方法，使用javah创建头文件"><a href="#1、编写native方法，使用javah创建头文件" class="headerlink" title="1、编写native方法，使用javah创建头文件"></a>1、编写native方法，使用javah创建头文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">native</span> String <span class="title">sayHello</span><span class="params">(String name)</span></span>; <span class="comment">// 1.声明这是一个native函数，由本地代码实现</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javah -jni -classpath JniCalcINterface</span><br></pre></td></tr></table></figure><p>参数说明：<br>classpath：类搜索路径，这里表示从当前的 bin 目录下查找<br>d：将生成的头文件放到当前的 jni 目录下<br>o： 指定生成的头文件名称，默认以类全路径名生成（包名+类名.h）</p><p><strong>注意：-d和-o只能使用其中一个参数。</strong></p><p>创建的.h文件如下<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* DO NOT EDIT THIS FILE - it is machine generated */</span>  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;jni.h&gt;  </span></span></span><br><span class="line"><span class="comment">/* Header for class com_study_jnilearn_HelloWorld */</span>  </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _Included_com_study_jnilearn_HelloWorld  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _Included_com_study_jnilearn_HelloWorld  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus  </span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">"C"</span> &#123;  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * Class:     com_study_jnilearn_HelloWorld </span></span><br><span class="line"><span class="comment"> * Method:    sayHello </span></span><br><span class="line"><span class="comment"> * Signature: (Ljava/lang/String;)Ljava/lang/String; </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line">JNIEXPORT jstring JNICALL Java_com_study_jnilearn_HelloWorld_sayHello  </span><br><span class="line">  (JNIEnv *, jclass, jstring);  </span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> __cplusplus  </span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span>  </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></p><p>**注意 extern “C”表示兼容C语言，当调用C编写的.h头文件或者函数的时候，一定要写在extern “C”后面</p><h3 id="3、编译出so文件"><a href="#3、编译出so文件" class="headerlink" title="3、编译出so文件"></a>3、编译出so文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -I$JAVA_HOME/include -I$JAVA_HOME/include/linux -fPIC -shared HelloWorld.c -o libHelloWorld.so</span><br></pre></td></tr></table></figure><p>参数含义:</p><p>-L </p><ul><li>表示要链接的库所在的目录。-L.  表示要链接的库在当前目录， -L/usr/lib 表示要连接的库在/usr/lib下。目录在/usr/lib时，系统会自动搜索这个目录，可以不用指明。</li></ul><p>-l (L的小写)</p><ul><li>表示需要链接库的名称，注意不是库文件名称，比如库文件为 libtest.so，那么库名称为test</li></ul><p>-include</p><ul><li>包含头文件，这个很少用，因为一般情况下在源码中，都有指定头文件。</li></ul><p>-I (i 的大写)</p><ul><li>指定头文件的所在的目录，可以使用相对路径。</li></ul><p>-shared </p><ul><li>指定生成动态链接库</li></ul><p>-fPIC</p><ul><li>表示编译为位置独立的代码，不用此选项的话编译后的代码是位置相关的所以动态载入时事通过代码拷贝的方式来满足不同进程的需要，而不能达到真正代码共享的目的。</li></ul><p>-o </p><ul><li>指定编译后动态库生成的路径和文件名</li></ul><h3 id="4、加载动态库"><a href="#4、加载动态库" class="headerlink" title="4、加载动态库"></a>4、加载动态库</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">    System.loadLibrary(<span class="string">"HelloWorld"</span>);  <span class="comment">//方式一</span></span><br><span class="line">    System.load(<span class="string">"/Users/yangxin/Desktop/libHelloWorld.jnilib"</span> <span class="comment">//方式二);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>方式1：只需要指定动态库的名字即可，不需要加lib前缀，也不要加.so、.dll和.jnilib后缀<br>方式2：指定动态库的绝对路径名，需要加上前缀和后缀 <strong>推荐使用这种方法</strong></p><p>如果使用方式1，java 会去 java.library.path 系统属性指定的目录下查找动态库文件，如果没有找到会抛出java.lang.UnsatisfiedLinkError异常。<br>有两种方式可以让 Java 从 java.library.path 找到动态链接库文件，聪明的你应该已经想到了。</p><ul><li><p>将动态链接库拷贝到java.library.path目录下, linux可以拷贝到/usr/local/lib目录下</p></li><li><p>给 jvm 添加“-Djava.library.path=动态链接库搜索目录”参数，指定系统属性 java.library.path 的值 java -Djava.library.path=/Users/yangxin/Desktop Linux/Unix 环境下可以通过设置 LD_LIBRARY_PATH 环境变量，指定库的搜索目录。</p></li></ul><h3 id="5、运行java程序"><a href="#5、运行java程序" class="headerlink" title="5、运行java程序"></a>5、运行java程序</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Jni入门&quot;&gt;&lt;a href=&quot;#Jni入门&quot; class=&quot;headerlink&quot; title=&quot;Jni入门&quot;&gt;&lt;/a&gt;Jni入门&lt;/h1&gt;&lt;p&gt;参考:&lt;br&gt;&lt;a href=&quot;http://wiki.jikexueyuan.com/project/jni-nd
      
    
    </summary>
    
    
      <category term="jni" scheme="http://yoursite.com/tags/jni/"/>
    
  </entry>
  
  <entry>
    <title>自定义ViewGroup</title>
    <link href="http://yoursite.com/2019/04/13/Android/%E8%87%AA%E5%AE%9A%E4%B9%89ViewGroup/"/>
    <id>http://yoursite.com/2019/04/13/Android/自定义ViewGroup/</id>
    <published>2019-04-13T05:12:35.000Z</published>
    <updated>2019-04-14T12:19:01.711Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自定义ViewGroup"><a href="#自定义ViewGroup" class="headerlink" title="自定义ViewGroup"></a>自定义ViewGroup</h1><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://blog.csdn.net/xmxkf/article/details/51500304#3-%E6%94%AF%E6%8C%81layoutmargin%E5%B1%9E%E6%80%A7" target="_blank" rel="noopener">自定义LayoutParams</a><br><a href="https://blog.csdn.net/xmxkf/article/details/51490283" target="_blank" rel="noopener">关于onMeasure过程的理解</a><br><a href="https://juejin.im/post/5ad37c476fb9a028bc2e32af" target="_blank" rel="noopener">Measure测量流程全解析（简洁）</a></p><h3 id="下面是继承自ViewGroup的FlowLayout标签流式布局"><a href="#下面是继承自ViewGroup的FlowLayout标签流式布局" class="headerlink" title="下面是继承自ViewGroup的FlowLayout标签流式布局"></a>下面是继承自ViewGroup的FlowLayout标签流式布局</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.util.AttributeSet;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FlowLayout</span> <span class="keyword">extends</span> <span class="title">ViewGroup</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FlowLayout</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FlowLayout</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FlowLayout</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class="line">        <span class="keyword">int</span> specWidth = MeasureSpec.getSize(widthMeasureSpec);</span><br><span class="line">        <span class="keyword">int</span> specHeight = MeasureSpec.getSize(heightMeasureSpec);</span><br><span class="line">        <span class="keyword">int</span> specWidthMode = MeasureSpec.getMode(widthMeasureSpec);</span><br><span class="line">        <span class="keyword">int</span> specHeightMode = MeasureSpec.getMode(heightMeasureSpec);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> count = getChildCount();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//计算child的大小</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            View child = getChildAt(i);</span><br><span class="line">            <span class="comment">//measureChildWithMargins方法在计算时似乎考虑到了padding, 所以这里widthUsed参数设置为0</span></span><br><span class="line">            <span class="comment">//这里为了支持margin，所以用measureChildWithMargins方法</span></span><br><span class="line">            measureChildWithMargins(child,</span><br><span class="line">                    widthMeasureSpec, <span class="number">0</span>,</span><br><span class="line">                    heightMeasureSpec, <span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//计算ViewGroup自身的大小</span></span><br><span class="line">        <span class="comment">//这里只要处理height的wrap_content情况就可以了</span></span><br><span class="line">        <span class="keyword">int</span> height = specHeight;</span><br><span class="line">        <span class="keyword">int</span> width = specWidth;</span><br><span class="line">        <span class="keyword">if</span> (specHeightMode == MeasureSpec.AT_MOST) &#123;</span><br><span class="line">            height = getPaddingBottom() + getPaddingTop();</span><br><span class="line">            <span class="keyword">int</span> used_width = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> line_max_height = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">                View child = getChildAt(i);</span><br><span class="line">                MarginLayoutParams mlp = (MarginLayoutParams) child.getLayoutParams();</span><br><span class="line">                <span class="keyword">int</span> child_width = child.getMeasuredWidth() + mlp.leftMargin + mlp.rightMargin;</span><br><span class="line">                <span class="keyword">int</span> child_height = child.getMeasuredHeight() + mlp.topMargin + mlp.bottomMargin;</span><br><span class="line">                <span class="comment">//在这一行可以容纳</span></span><br><span class="line">                <span class="keyword">if</span> (used_width + child_width &lt;= width - getPaddingStart() - getPaddingEnd()) &#123;</span><br><span class="line">                    line_max_height = Math.max(line_max_height, child_height);</span><br><span class="line">                    used_width += child_width;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="comment">//切换到下一行</span></span><br><span class="line">                    height += line_max_height;</span><br><span class="line">                    used_width = child_width;</span><br><span class="line">                    line_max_height = child_height;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//加上最后一行的最大height</span></span><br><span class="line">            height += line_max_height;</span><br><span class="line">        &#125;</span><br><span class="line">        setMeasuredDimension(width, height);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String TAG = <span class="string">"test_log"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> width = getMeasuredWidth() - getPaddingStart() - getPaddingEnd();</span><br><span class="line">        <span class="comment">//cur_l, cur_t 计算时不包含padding</span></span><br><span class="line">        <span class="keyword">int</span> used_width = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> used_height = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> count = getChildCount();</span><br><span class="line">        <span class="keyword">int</span> last_line_max_height = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; count; i++) &#123;</span><br><span class="line">            View child_view = getChildAt(i);</span><br><span class="line">            MarginLayoutParams mlp = (MarginLayoutParams) child_view.getLayoutParams();</span><br><span class="line">            <span class="comment">//用于计算是否越界时需要包含margin</span></span><br><span class="line">            <span class="keyword">int</span> child_width = child_view.getMeasuredWidth() + mlp.leftMargin + mlp.rightMargin;</span><br><span class="line">            <span class="keyword">int</span> child_height = child_view.getMeasuredHeight() + mlp.topMargin + mlp.bottomMargin;</span><br><span class="line">            <span class="comment">//layout时的位置，必须考虑padding</span></span><br><span class="line">            <span class="keyword">int</span> layout_l, layout_t, layout_r, layout_b;</span><br><span class="line">            <span class="keyword">if</span> (used_width + child_width &lt;= width) &#123;</span><br><span class="line">                <span class="comment">// base_l, base_t 代表该view的左上角坐标</span></span><br><span class="line">                layout_l = getPaddingStart() + used_width + mlp.leftMargin;</span><br><span class="line">                layout_t = getPaddingTop() + used_height + mlp.topMargin;</span><br><span class="line">                layout_r = layout_l + child_view.getMeasuredWidth();</span><br><span class="line">                layout_b = layout_t + child_view.getMeasuredHeight();</span><br><span class="line"></span><br><span class="line">                used_width += child_width;</span><br><span class="line">                <span class="comment">//记录该行height的最大值</span></span><br><span class="line">                last_line_max_height = Math.max(last_line_max_height, child_height);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                layout_l = getPaddingStart() + mlp.leftMargin;</span><br><span class="line">                layout_t = getPaddingTop() + used_height + last_line_max_height + mlp.topMargin;</span><br><span class="line">                layout_r = layout_l + child_view.getMeasuredWidth();</span><br><span class="line">                layout_b = layout_t + child_view.getMeasuredHeight();</span><br><span class="line"></span><br><span class="line">                used_height += last_line_max_height;</span><br><span class="line">                used_width = child_width;</span><br><span class="line"></span><br><span class="line">                last_line_max_height = child_height;</span><br><span class="line">            &#125;</span><br><span class="line">            child_view.layout(layout_l, layout_t, layout_r, layout_b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> LayoutParams <span class="title">generateLayoutParams</span><span class="params">(AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MarginLayoutParams(getContext(), attrs);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> LayoutParams <span class="title">generateLayoutParams</span><span class="params">(LayoutParams p)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MarginLayoutParams(p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> LayoutParams <span class="title">generateDefaultLayoutParams</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MarginLayoutParams(<span class="keyword">super</span>.generateDefaultLayoutParams());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="关于MeasureSpec"><a href="#关于MeasureSpec" class="headerlink" title="关于MeasureSpec"></a>关于MeasureSpec</h3><p>父控件告诉子控件可获得的空间以及关于这个空间的约束条件</p><h4 id="SpecMode"><a href="#SpecMode" class="headerlink" title="SpecMode"></a>SpecMode</h4><ul><li>EXACTLY<ul><li>设置了精确的宽高。如width、height设置了具体值或者设置为 match_parent，都属于这种模式</li></ul></li><li>AT_MOST<ul><li>width、height设置为wrap_content则属于这种模式。表示父容器只是限制了子view的最大值</li></ul></li><li>UNSPECIFIED<ul><li>这种模式一般用于系统， 父容器不对View有任何限制。 一般很少用</li></ul></li></ul><h3 id="关于view的Measure过程"><a href="#关于view的Measure过程" class="headerlink" title="关于view的Measure过程"></a>关于view的Measure过程</h3><p>我们知道，整个绘制流程是从ViewRootImpl类中performTraversals()开始的，这里面分别执行performMeasure、performLayout、performDraw来完成整个绘制的三大流程。而三大流程都是至顶向下，今天这里只说measure的过程。<br>    这里以DecorView(根View)面放着一个ViewGroup(ViewGroupA)ViewGroup里面放着一个View(ViewB)为例来说明整个测量的流程：</p><ul><li><strong>ViewRootImpl.performTraversals()-&gt;performMeasure():</strong><blockquote><p>这里面会调getRootMeasureSpec（）根据手机屏幕的宽高和DecorView的LayoutParams生成DecorView的MeasureSpec,然后调用DecorView的measure()开始DecorView的测量</p></blockquote></li><li><strong>DecorView.measure()-&gt;onMeasure():</strong><blockquote><p>DecorView继承自FrameLayout，所以会走到FrameLayout的onMeasure(),onMeasure()里调measureChild()来根据上面说的规则为ViewGroupA生成MeasureSpec，并通过ViewGroupA.measure（）开始ViewGroupA的测量</p></blockquote></li><li><strong>ViewGroupA.measure()-&gt;onMeasure():</strong><blockquote><p>这是我们自定义的一个ViewGroup(继承自ViewGroup)<br>假如我们没有重写onMeasure()的话，则默认调的是View.onMeasure()，则不会发起对子View的measure,它里面的子View也就不会被测量(0),而这个ViewGroup如果没有设置具体宽高的话，（wrap_content）则ViewGroup展示的就是父容器的宽高（根据上面说的MeasureSpec生成规则)。<br>  所以如果我们继承自ViewGroup来自定义一个ViewGroup的话，是肯定要重写onMeasure()的，<strong>里面要调用measureChild()来为子View生成MeasureSpec并调child.measure()开始对child的测量(getChildMeasureSpec()方法)，这样子View才能被测量显示。而如果我们要使设置的wrap_content生效，还要根据子View测量结果进行计算从而得到自己的宽高，最后通过调setMeasuredDimension(int measuredWidth, int measuredHeight)来设置自己的宽高，从而达到wrap_content的效果。</strong></p></blockquote></li><li><strong>ViewB.measure()-&gt;onMeasure():</strong><blockquote><p>View的测量相对于ViewGroup要简单点，因为不用去Measure child,但是一样的，如果要使wrap_conten生效需自己重写onMeasure()计算。</p></blockquote></li></ul><h3 id="测量子view时MeasureSpec的生成规则"><a href="#测量子view时MeasureSpec的生成规则" class="headerlink" title="测量子view时MeasureSpec的生成规则"></a>测量子view时MeasureSpec的生成规则</h3><ol><li><strong>当子View的宽高设置的是具体数值时</strong><blockquote><p>显然我们可以直接拿到子View的宽高，则子View宽高就确定了，不用再去考虑父容器的SpecMode了,<strong>此时子View的SpecMode为EXACTLY，SpecSize就是设置的宽高。</strong></p></blockquote></li><li><strong>当子View的宽高设置的是match_parent</strong><blockquote><p>则<strong>不管父容器的SpecMode是什么模式，子View的SpecSize就等于父容器的宽高，而子View的SpecMode随父容器的SpecMode。</strong>（这里没有考虑UNSPECIFIED模式，如果父容器是UNSPECIFIED模式，则子View SpecSize为0，SpecMode为UNSPECIFIED）</p></blockquote></li><li><strong>当子View的宽高设置的是wrap_content,</strong><blockquote><p>因为这种情况父容器实在不知道子View应该多宽多高，<strong>所以子View的SpecSize给的是父容器的宽高，也就是说只是给子View限制了一个最大宽高，而子View的SpecMode是AT_MOST模式。</strong>（这里没有考虑UNSPECIFIED模式，如果父容器是UNSPECIFIED模式，则子View SpecSize为0，SpecMode为UNSPECIFIED）。</p></blockquote></li></ol><ul><li>通过上面的解析我们可以知道，当你给一个View/ViewGroup设置宽高为具体数值或者match_parent，它都能正确的显示，但是如果你设置的是wrap_content，则默认显示出来是其父容器的大小，如果你想要它正常的显示为wrap_content，则你就要自己重写onMeasure()来自己计算它的宽高度并设置。<strong>所以我们平常自定义View/ViewGroup的时候之所以要重写onMeasure()，就是为了能让wrap_content达到效果。</strong></li></ul><h3 id="关于LayoutParams"><a href="#关于LayoutParams" class="headerlink" title="关于LayoutParams"></a>关于LayoutParams</h3><p>在上面的FlowLayout代码中，为了支持margin属性，使用了MarginLayoutParams。这个MarginLayoutParams继承自LayoutParams。<strong>在使用中必须重写所有的generateLayoutParams()方法</strong><br>尝试了一下，RelativeLayoutParams等都是继承自MarginLayoutParams</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;自定义ViewGroup&quot;&gt;&lt;a href=&quot;#自定义ViewGroup&quot; class=&quot;headerlink&quot; title=&quot;自定义ViewGroup&quot;&gt;&lt;/a&gt;自定义ViewGroup&lt;/h1&gt;&lt;h3 id=&quot;参考文章&quot;&gt;&lt;a href=&quot;#参考文章&quot; cla
      
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
      <category term="view" scheme="http://yoursite.com/categories/Android/view/"/>
    
    
      <category term="view" scheme="http://yoursite.com/tags/view/"/>
    
  </entry>
  
  <entry>
    <title>多个cpp文件编译共享同一个.h文件的全局变量</title>
    <link href="http://yoursite.com/2019/04/13/%E5%A4%9A%E4%B8%AAcpp%E6%96%87%E4%BB%B6%E7%BC%96%E8%AF%91%E5%85%B1%E4%BA%AB%E5%90%8C%E4%B8%80%E4%B8%AA-h%E6%96%87%E4%BB%B6%E7%9A%84%E5%85%A8%E5%B1%80%E5%8F%98%E9%87%8F/"/>
    <id>http://yoursite.com/2019/04/13/多个cpp文件编译共享同一个-h文件的全局变量/</id>
    <published>2019-04-13T05:12:22.000Z</published>
    <updated>2019-04-14T12:13:14.668Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多个cpp文件编译共享同一个-h文件的全局变量"><a href="#多个cpp文件编译共享同一个-h文件的全局变量" class="headerlink" title="多个cpp文件编译共享同一个.h文件的全局变量"></a>多个cpp文件编译共享同一个.h文件的全局变量</h1><p>在多个cpp文件一起编译时，有事会出现.h文件中全局变量的重复定义，导致编译失败。下面是解决的方案:</p><h2 id="一个cpp文件多次-include一个-h文件"><a href="#一个cpp文件多次-include一个-h文件" class="headerlink" title="一个cpp文件多次#include一个.h文件"></a>一个cpp文件多次#include一个.h文件</h2><blockquote><p>使用#ifndef</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在.h头文件中</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> <span class="meta-string">&lt;标示&gt; //自定义的一个标示, 习惯性用.h文件名大写</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> <span class="meta-string">&lt;标示&gt;</span></span></span><br><span class="line"><span class="comment">//...头文件内容</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><p>原理大概是在一个在头文件include的时候define一个标示，当再次include时检测标示是否已经定义过。是，则不再执行该头文件的内容</p><p><strong>这种方法只能解决一个cpp源文件中的重复include问题</strong></p><h2 id="多个cpp文件多次-include一个-h文件"><a href="#多个cpp文件多次-include一个-h文件" class="headerlink" title="多个cpp文件多次#include一个.h文件"></a>多个cpp文件多次#include一个.h文件</h2><h3 id="使用static关键字"><a href="#使用static关键字" class="headerlink" title="使用static关键字"></a>使用static关键字</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//.h头文件</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> i;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><ul><li><h4 id="static修饰变量"><a href="#static修饰变量" class="headerlink" title="static修饰变量"></a>static修饰变量</h4><p>变量static标记之后，多个cpp文件include不会出现问题。<br><strong>但是使用static之后，会在每个cpp作用域中创建拷贝，这实际上并没有达到 共享的目的</strong><br>下面是网上的一些解释:</p><blockquote><p>定义全局变量时使用static，意味着该变量的作用域只限于定义它的源文件中，其它源文件不能访问。既然这种定义方式出现在头文件中，那么可以很自然地推测：包含了该头文件的所有源文件中都定义了这些变量，即该头文件被包含了多少次，这些变量就定义了多少次。</p><p>假如将上面两行代码的static去掉，编译的时候就会出现变量重定义的错误，这进一步证实了上面的推测，因为没有static的话变量的作用域是全局的，定义了两个以上的同名变量就会出现该错误。</p></blockquote></li><li><h4 id="static修饰函数"><a href="#static修饰函数" class="headerlink" title="static修饰函数"></a>static修饰函数</h4><p>函数标记为static表示只能在.h文件和定义该函数的cpp文件中被调用。其他文件中不可见。<br><em>似乎是这样的。。。我的理解。网上说static和inline经常配合使用</em></p></li></ul><h3 id="使用extern关键字"><a href="#使用extern关键字" class="headerlink" title="使用extern关键字"></a>使用extern关键字</h3><p>extern表明该变量在别的地方已经定义过了，在这里要使用那个变量</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//cpp文件</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> i;</span><br></pre></td></tr></table></figure><p>经过实验，extern的不仅仅.h文件里定义，定义在其他cpp文件中的全局变量也是可以访问到的。</p><p>定义在.h文件的情况下，<strong>在使用extern时，不能include定义它的.h文件。</strong>否则还是会出现重定义的问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;多个cpp文件编译共享同一个-h文件的全局变量&quot;&gt;&lt;a href=&quot;#多个cpp文件编译共享同一个-h文件的全局变量&quot; class=&quot;headerlink&quot; title=&quot;多个cpp文件编译共享同一个.h文件的全局变量&quot;&gt;&lt;/a&gt;多个cpp文件编译共享同一个.h文
      
    
    </summary>
    
      <category term="C/C++" scheme="http://yoursite.com/categories/C-C/"/>
    
    
  </entry>
  
  <entry>
    <title>C语言结构体的内存对齐</title>
    <link href="http://yoursite.com/2019/04/13/C%E8%AF%AD%E8%A8%80%E7%BB%93%E6%9E%84%E4%BD%93%E7%9A%84%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/"/>
    <id>http://yoursite.com/2019/04/13/C语言结构体的内存对齐/</id>
    <published>2019-04-13T05:11:14.000Z</published>
    <updated>2019-04-14T11:15:59.672Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C语言结构体的内存对齐"><a href="#C语言结构体的内存对齐" class="headerlink" title="C语言结构体的内存对齐"></a>C语言结构体的内存对齐</h1><h2 id="内存对齐原则"><a href="#内存对齐原则" class="headerlink" title="内存对齐原则"></a>内存对齐原则</h2><ul><li><p>数据成员对齐规则：结构（struct或联合union）的数据成员，第一个数据成员放在offset为0的地方，以后每个数据成员存储的起始位置: min(#pragma pack()指定的数,这个数据%成员的自身长度)的倍数</p></li><li><p>结构体作为成员：如果一个结构里有某些结构体成员，则结构体成员要从min(#pragram pack() , 内部长度最长的数据成员)的整数倍地址开始存储。（struct a里存有struct b，b里有char，int，double等元素，那b应该从min(#pragram pack(), 8)的整数倍开始存储。）</p></li><li><p>结构体的总大小，也就是sizeof的结果，必须是 min(#pragram pack() , 长度最长的数据成员) 的整数倍</p></li></ul><h2 id="pragram-pack-4"><a href="#pragram-pack-4" class="headerlink" title="pragram pack(4)"></a>pragram pack(4)</h2><p>设置内存对齐的字节数， 默认为系统字长，64位系统为8字节，32位系统为4字节</p><h2 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta"># pragram pack(8)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S3</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">double</span> d;</span><br><span class="line">    <span class="keyword">char</span> c;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">S4</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">char</span> c1;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">S3</span> <span class="title">s3</span>;</span></span><br><span class="line">    <span class="keyword">double</span> d;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="keyword">sizeof</span>(struct S4));</span><br></pre></td></tr></table></figure><p>最后的输出为 32</p><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="https://www.cnblogs.com/zwh0214/p/8833314.html" target="_blank" rel="noopener">[C/C++] 结构体内存对齐用法 - 我自逍遥笑 - 博客园</a></p><h2 id="C语言联合体union的sizeof"><a href="#C语言联合体union的sizeof" class="headerlink" title="C语言联合体union的sizeof"></a>C语言联合体union的sizeof</h2><p><strong>分配给union的实际大小不仅要满足是对齐大小的整数倍，同时要满足实际大小不能小于最大成员的大小。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;C语言结构体的内存对齐&quot;&gt;&lt;a href=&quot;#C语言结构体的内存对齐&quot; class=&quot;headerlink&quot; title=&quot;C语言结构体的内存对齐&quot;&gt;&lt;/a&gt;C语言结构体的内存对齐&lt;/h1&gt;&lt;h2 id=&quot;内存对齐原则&quot;&gt;&lt;a href=&quot;#内存对齐原则&quot; cla
      
    
    </summary>
    
      <category term="C/C++" scheme="http://yoursite.com/categories/C-C/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/04/13/hello-world/"/>
    <id>http://yoursite.com/2019/04/13/hello-world/</id>
    <published>2019-04-12T16:24:47.223Z</published>
    <updated>2019-04-12T18:13:28.565Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="hello-world" scheme="http://yoursite.com/categories/hello-world/"/>
    
    
  </entry>
  
</feed>
