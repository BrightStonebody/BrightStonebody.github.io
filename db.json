{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/push.sh","path":"push.sh","modified":0,"renderable":0},{"_id":"source/images/Text相关计算.webp","path":"images/Text相关计算.webp","modified":0,"renderable":0},{"_id":"source/images/mysql_iptables.png","path":"images/mysql_iptables.png","modified":0,"renderable":0},{"_id":"source/images/startService and bindService.jpg","path":"images/startService and bindService.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/js/exturl.js","path":"js/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/affix.js","path":"js/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/js.cookie.js","path":"js/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/scrollspy.js","path":"js/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/post-details.js","path":"js/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/scroll-cookie.js","path":"js/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"575ad0fd006262e77914b3298c07cb13b0ef91d0","modified":1559469003814},{"_id":"themes/next/.all-contributorsrc","hash":"d139a3b623b2e40bbff5c96ad44adf7dbdbc5be1","modified":1555094260000},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1555094260000},{"_id":"source/push.sh","hash":"9b904e17d4a6e015e04df31078afa655e2af10b0","modified":1555241178000},{"_id":"themes/next/.DS_Store","hash":"bbd785bcdf535f2b421f24e5b8de8bad0e091659","modified":1559468682297},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1555094260000},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1555094260000},{"_id":"themes/next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1555094260000},{"_id":"themes/next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1555094260000},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1555094260000},{"_id":"themes/next/README.md","hash":"7958c3f70b2133b479ddaf525cc4b6d87a37e04a","modified":1555094260000},{"_id":"themes/next/LICENSE.md","hash":"18144d8ed58c75af66cb419d54f3f63374cd5c5b","modified":1555094260000},{"_id":"themes/next/bower.json","hash":"8fa4f26f5205cbc64d33318d1be5d35b2667398c","modified":1555094260000},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1555094260000},{"_id":"themes/next/_config.yml","hash":"3feacb56bceae348dd853ca93a9751bf03f6c92d","modified":1555243271000},{"_id":"themes/next/gulpfile.coffee","hash":"23bd9587807edc4dbecb5c5a29ab96ade24458b5","modified":1555094260000},{"_id":"themes/next/package.json","hash":"888bcacea284ec536a1428ad957a78dfb3ec255d","modified":1555094260000},{"_id":"source/categories/index.md","hash":"79a24c099c0611ec4db9c83dee34941ea6eb0ea6","modified":1555131405000},{"_id":"source/images/Text相关计算.webp","hash":"2bc79f17b9a2be8663fe5bbc8487ccfceccc3627","modified":1563505860631},{"_id":"source/_posts/hello-world.md","hash":"b28d73cc4495b1ba88019d7a4089b1806c5453a8","modified":1555092808000},{"_id":"source/images/mysql_iptables.png","hash":"9b8dc491c73623b28c41b1581c728c696ecd365e","modified":1556940011000},{"_id":"source/notes/boostnote.json","hash":"1d8c7454808e612994ea23361819e2f544c21b99","modified":1555244055000},{"_id":"source/images/startService and bindService.jpg","hash":"e22213c4dec3f59761079a0a219ffcbbfe640ec8","modified":1562244786631},{"_id":"source/tags/index.md","hash":"ad018fd214859a5a59b26ad4e49645698e82e3dc","modified":1555243632000},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1555094260000},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"c149f003d03501565e7688915cd8f2e99fbf8f42","modified":1555094260000},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"492b2c159d871e5b5d4c70d259f36e603afe192d","modified":1555094260000},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"285a95aca36e0ac770bcde2b35e3b572d45d1518","modified":1555094260000},{"_id":"themes/next/.github/auto_assign.yml","hash":"cb68a1dca1c4623448c2ca899614a9f21df1b036","modified":1555094260000},{"_id":"themes/next/.github/config.yml","hash":"8a5cbf5aa9529390fe0a782758aca9c3a02f9dcf","modified":1555094260000},{"_id":"themes/next/.github/eslint-disable-bot.yml","hash":"16541fb7b80f5ab90135db96285badb63c4d7d3e","modified":1555094260000},{"_id":"themes/next/.github/release-drafter.yml","hash":"b4476ada5c62ee7d63ba2e59ead2ec4897086e3c","modified":1555094260000},{"_id":"themes/next/.github/lock.yml","hash":"585d2c471047be320aa62f2b74dad797bf09c530","modified":1555094260000},{"_id":"themes/next/.github/stale.yml","hash":"41bf97ee86b8940a0b2e754499ec77fd2b44b717","modified":1555094260000},{"_id":"themes/next/.github/mergeable.yml","hash":"8e3a6abc74b5cba57f9586fe6d98762fd4fc9b04","modified":1555094260000},{"_id":"themes/next/.github/support.yml","hash":"d75db6ffa7b4ca3b865a925f9de9aef3fc51925c","modified":1555094260000},{"_id":"themes/next/.github/weekly-digest.yml","hash":"404e4ccb7fcd6587bc9b0247a7a7ff256d21f2cb","modified":1555094260000},{"_id":"themes/next/.github/topissuebot.yml","hash":"10665bf2b5aba351725715c71e94ad183a0e8f18","modified":1555094260000},{"_id":"themes/next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1555094260000},{"_id":"themes/next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1555094260000},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1555094260000},{"_id":"themes/next/docs/ALGOLIA-SEARCH.md","hash":"0d2f22ea09dd1ef63c66164e048d8239d2ccb2b8","modified":1555094260000},{"_id":"themes/next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1555094260000},{"_id":"themes/next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"212a36d57495990b5f56e46ca8dce1d76c199660","modified":1555094260000},{"_id":"themes/next/docs/LICENSE.txt","hash":"368bf2c29d70f27d8726dd914f1b3211cae4bbab","modified":1555094260000},{"_id":"themes/next/docs/MATH.md","hash":"e6023505dcccaef0b856102543585a13fc6af0b1","modified":1555094260000},{"_id":"themes/next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1555094260000},{"_id":"themes/next/languages/de.yml","hash":"9e524b2bdfb848504b93a51c5650e76bba5fa9e0","modified":1555094260000},{"_id":"themes/next/languages/default.yml","hash":"ad9f619fd45824ceb3dc811afb3cc828b3e65c96","modified":1557896302383},{"_id":"themes/next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1555094260000},{"_id":"themes/next/languages/es.yml","hash":"1752429687861b5cedd063c6ebe5dacefbe7e5a7","modified":1555094260000},{"_id":"themes/next/languages/it.yml","hash":"b30ff77ad8044e3b021a3b09187cd377dc789fd2","modified":1555094260000},{"_id":"themes/next/languages/fr.yml","hash":"7005c2b42c2c6e82bd7a1be5cc2f443b5fc79105","modified":1555094260000},{"_id":"themes/next/languages/id.yml","hash":"1c4868837f5109f1df863b04fe627352c31d404b","modified":1555094260000},{"_id":"themes/next/languages/ja.yml","hash":"1dc35e436da6214cdb3c2ff44bc4a06d0be5b9a0","modified":1555094260000},{"_id":"themes/next/languages/ko.yml","hash":"20bfaa7600d35235996c18e5c13dcef89c119626","modified":1555094260000},{"_id":"themes/next/languages/nl.yml","hash":"1c44b3cb2f817808607f3bf6ef47f58ce7599995","modified":1555094260000},{"_id":"themes/next/languages/pt-BR.yml","hash":"08b913a5cf4cc160083069cb4dfb2d66eecd1218","modified":1555094260000},{"_id":"themes/next/languages/pt.yml","hash":"8ddac820e2c17b484b56c0da8881e142b10e221b","modified":1555094260000},{"_id":"themes/next/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1555094260000},{"_id":"themes/next/languages/uk.yml","hash":"1eb59e581568da9a81d6e20541b4ada5fc1c55c0","modified":1555094260000},{"_id":"themes/next/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1555094260000},{"_id":"themes/next/languages/vi.yml","hash":"ba7aff8f88e03f69a0acf7f1b90ee03e077ee88e","modified":1555094260000},{"_id":"themes/next/languages/zh-CN.yml","hash":"fbbf3a0b664ae8e927c700b0a813692b94345156","modified":1555094260000},{"_id":"themes/next/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1555094260000},{"_id":"themes/next/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1555094260000},{"_id":"themes/next/layout/_layout.swig","hash":"74701fcf2303d59400587436ab4c244e04df7ad9","modified":1555094260000},{"_id":"themes/next/layout/archive.swig","hash":"7e8f3a41a68e912f2b2aaba905d314306ccaf794","modified":1555094260000},{"_id":"themes/next/layout/category.swig","hash":"dda0e6b2139decaf5e865d22ec9d45fdb615a703","modified":1555094260000},{"_id":"themes/next/layout/index.swig","hash":"c2a3896c64e96790edc10426ef586b6186a87f46","modified":1555094260000},{"_id":"themes/next/layout/page.swig","hash":"d8a6cbf6f611c5d68d5da430cb6dc7010ff2c7e0","modified":1555094260000},{"_id":"themes/next/layout/post.swig","hash":"f74929fd792541916eb25c2addfb35431be071ba","modified":1555094260000},{"_id":"themes/next/layout/schedule.swig","hash":"3268dd3d90d8b0e142cfa1a2ebb23355baeda148","modified":1555094260000},{"_id":"themes/next/layout/tag.swig","hash":"a6be69a90924c9d2f4d90fb4867234859bd2c2e9","modified":1555094260000},{"_id":"themes/next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1555094260000},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1555094260000},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1555094260000},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1555094260000},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1555094260000},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555094260000},{"_id":"source/_posts/Android/Activity-class-does-not-exist.md","hash":"d5287902384cce9e534833df0b3adc7f9745649c","modified":1555420251000},{"_id":"source/_posts/Android/Android-Studio解决依赖冲突.md","hash":"4d1be0175876fb917c3631f87e69aa5f5d714e06","modified":1555244181000},{"_id":"source/_posts/Android/Handler防止内存泄露.md","hash":"6e7a8190d2eb330a86352f170790bfe23b394935","modified":1555244194000},{"_id":"source/_posts/Android/Activity管理类的封装.md","hash":"de1f2119fff62f1d1d6ecd463c45b7b6c228d98c","modified":1555244177000},{"_id":"source/_posts/Android/MVP模式防止内存泄露.md","hash":"8f8436280ded329c572be59688b21fa4ee746b6f","modified":1555645283000},{"_id":"source/_posts/Android/Text相关计算.md","hash":"867bce8339a29b0e59779acb7a6043b51e72a09b","modified":1563506427433},{"_id":"source/_posts/Android/华为手机的内存泄露.md","hash":"a3e8c2894ba3cd61273f36ab1574c5d5fa80ce5d","modified":1555646124000},{"_id":"source/_posts/Android/RecyclerView设置item的间距.md","hash":"cc8ecaa5225d60a5052f328662f4e9611c106131","modified":1562742036563},{"_id":"source/_posts/Android/startService-和bindService.md","hash":"2a737c7e79ea0d84e2cfb97b970b932f4b18a3aa","modified":1562245882661},{"_id":"source/_posts/Android/scrollBy-scrollTo-和Scroller.md","hash":"1e698ef72e13593249e66b3019ff689ad76a8547","modified":1560690380081},{"_id":"source/_posts/C/C语言结构体的内存对齐.md","hash":"ae476f35a0e2f6f66078468ca4bc164e8cbd6175","modified":1557666682000},{"_id":"source/_posts/Android/自定义ViewGroup.md","hash":"66452827eccb1f9baff3f935ab49a17720a82e48","modified":1559470629307},{"_id":"source/_posts/C/多个cpp文件编译共享同一个-h文件的全局变量.md","hash":"25980caac2bba406b579b8e4a1ba67514bafede3","modified":1557666688000},{"_id":"source/_posts/Java/Jni入门.md","hash":"0d7b2495f71b802b54b2da3e3888e367006bb4f3","modified":1557666655000},{"_id":"source/_posts/Linux/apt常用命令.md","hash":"8cacf9e93680ced7ffc2697597210fc110abff9b","modified":1556798512000},{"_id":"source/_posts/Linux/mysql配置远程登录.md","hash":"738ff34552f3d36bc1649c940734fae987bb00d5","modified":1556940518000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"c37a60580c901c79ccb22564b228a46e06207445","modified":1555094260000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/non-english.md","hash":"0b0727ff4d5180ae67f930fb4f8e9488e33eda9f","modified":1555094260000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/custom-issue-template.md","hash":"57e1e06e845193e80c7df4a4454af28352526f7a","modified":1555094260000},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"07c423cce4157b8e2dbf60907ccbf3f18c4cf98a","modified":1555094260000},{"_id":"themes/next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1555094260000},{"_id":"themes/next/docs/ru/README.md","hash":"4d7ef717d0b57288e606996ee56c20ffd59d5a99","modified":1555094260000},{"_id":"themes/next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1555094260000},{"_id":"themes/next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1555094260000},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"b218e30df4126b6adc87684775ac4c86ea7f7958","modified":1555094260000},{"_id":"themes/next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"caa624092175d44e3d3a8c6ca23922718da2354c","modified":1555094260000},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"bc43beb3af74d64fbd3920539d08861e4cadb9a0","modified":1555094260000},{"_id":"themes/next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1555094260000},{"_id":"themes/next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1555094260000},{"_id":"themes/next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"115ffbde2b3ce01ef1f8c2b3833e6f6794650132","modified":1555094260000},{"_id":"themes/next/docs/zh-CN/MATH.md","hash":"b76ccbc658024e86639cfa5f8a3817647fc8d651","modified":1555094260000},{"_id":"themes/next/docs/zh-CN/README.md","hash":"1b5bd6ae5781137d81dc8667e912d3df6eeab260","modified":1555094260000},{"_id":"themes/next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"5da70d7fa0c988a66a469b9795d33d471a4a4433","modified":1555094260000},{"_id":"themes/next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1555094260000},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1555094260000},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1555094260000},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"89b0a0e64637bf5b0cfea0a23642df3d95eedfa4","modified":1555094260000},{"_id":"themes/next/layout/_macro/post.swig","hash":"10187fafe566b3e5bfa4e7e10c77ea9026d9081d","modified":1555094260000},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"480d93619479dcfcbec6906803bb38b2dfbeae53","modified":1555094260000},{"_id":"themes/next/layout/_partials/github-banner.swig","hash":"6357537ac0bb114aed4d61bafb39e6690a413697","modified":1555094260000},{"_id":"themes/next/layout/_partials/comments.swig","hash":"5352f96f4544c1520babf1cec7b44ddf2f8057b3","modified":1555094260000},{"_id":"themes/next/layout/_partials/footer.swig","hash":"589f545333e21a8c7823bce89ab45cf1eb7db6e2","modified":1555094260000},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1555094260000},{"_id":"themes/next/layout/_partials/post-edit.swig","hash":"06dac109504812b63766a80ede9ddacbd42d227d","modified":1555094260000},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"50be1762f60222379a8bef5e42ab1a0f3872b7ff","modified":1555094260000},{"_id":"themes/next/layout/_scripts/exturl.swig","hash":"61ae10d41f67ece004a025077fdb28724af05090","modified":1555094260000},{"_id":"themes/next/layout/_scripts/noscript.swig","hash":"edaff4766e0c05fd5c889d9dd32884d376bef9d9","modified":1555094260000},{"_id":"themes/next/layout/_scripts/next-boot.swig","hash":"012e3ece672cc3b13d5e032139f328d3426d7d65","modified":1555094260000},{"_id":"themes/next/layout/_scripts/scroll-cookie.swig","hash":"ccd13d73429ef91ef5e8b7d9fa43c8188facdf41","modified":1555094260000},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"83470eb401f78f4683907c48ad6760b90730daa3","modified":1555094260000},{"_id":"themes/next/layout/_third-party/chatra.swig","hash":"eefb68b69b4b0ed558ee0324ccd711990059b20d","modified":1555094260000},{"_id":"themes/next/layout/_third-party/bookmark.swig","hash":"10b61a8bac671e375916a4d234c120117098a78f","modified":1555094260000},{"_id":"themes/next/layout/_third-party/baidu-push.swig","hash":"4ccf2abbfd070874265b0436a3eff21f7c998dfb","modified":1555094260000},{"_id":"themes/next/layout/_third-party/copy-code.swig","hash":"01ded5e1bad89a6f8d64cd063e3e4e42c20d33bc","modified":1555094260000},{"_id":"themes/next/layout/_third-party/mermaid.swig","hash":"d6e6ddda836bd9e2e8d9767a910c7d3280080e81","modified":1555094260000},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"2c4a66be4677d3e4dec3f169ac8a769098dad1fe","modified":1555094260000},{"_id":"themes/next/layout/_third-party/pangu.swig","hash":"c28f9dc96ab735daeb7f599f86470aa5a83c03cf","modified":1555094260000},{"_id":"themes/next/layout/_third-party/pdf.swig","hash":"810a9b2a6059f46c4a2ddb178f1eaa4c5e23750b","modified":1555094260000},{"_id":"themes/next/layout/_third-party/quicklink.swig","hash":"5db80e8d7ea3f29e998320f79508f7e14342a33c","modified":1555094260000},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"cbe40cb67dad15ade967b0f396c1a95b6871f76a","modified":1555094260000},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"2398e5cd0cb466953b6e7a42c2b2caddebf3c348","modified":1555094260000},{"_id":"themes/next/layout/_third-party/tidio.swig","hash":"912368c41de675f458b267a49a99ae3e7e420ebb","modified":1555094260000},{"_id":"themes/next/scripts/helpers/engine.js","hash":"60eb1554456d9d0e5afc4a2d16f1580a0aa02da8","modified":1555094260000},{"_id":"themes/next/scripts/filters/exturl.js","hash":"79ad823ca803cb00e0bfc648aa6c9d59711e0519","modified":1555094260000},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"799a042bbf497a4c7a2981aa2014ff28fa1bb382","modified":1555094260000},{"_id":"themes/next/scripts/tags/button.js","hash":"f3b4f7ae7e58072bbf410d950a99a0b53cbc866d","modified":1555094260000},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"f13430d9d1c9773b390787c2f046bb1f12a79878","modified":1555094260000},{"_id":"themes/next/scripts/tags/exturl.js","hash":"d605918cf819887e9555212dbe12da97fd887a0b","modified":1555094260000},{"_id":"themes/next/scripts/tags/full-image.js","hash":"fcb41c1c81560ed49dc4024654388a28ee7d32b0","modified":1555094260000},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"598220fa92ff3540dcab74f633ba41523daa8364","modified":1555094260000},{"_id":"themes/next/scripts/tags/include-raw.js","hash":"5db59d56f4f4082382bf1c16722e6c383892b0c5","modified":1555094260000},{"_id":"themes/next/scripts/tags/label.js","hash":"fc5b267d903facb7a35001792db28b801cccb1f8","modified":1555094260000},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"983c6c4adea86160ecc0ba2204bc312aa338121d","modified":1555094260000},{"_id":"themes/next/scripts/tags/note.js","hash":"0a02bb4c15aec41f6d5f1271cdb5c65889e265d9","modified":1555094260000},{"_id":"themes/next/scripts/tags/pdf.js","hash":"f780cc72bff91d2720626e7af69eed25e9c12a29","modified":1555094260000},{"_id":"themes/next/scripts/tags/tabs.js","hash":"00ca6340d4fe0ccdae7525373e4729117775bbfa","modified":1555094260000},{"_id":"themes/next/scripts/tags/video.js","hash":"e5ff4c44faee604dd3ea9db6b222828c4750c227","modified":1555094260000},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1555094260000},{"_id":"themes/next/source/css/main.styl","hash":"e010ec8ac73268a0f137204c89e0080ab8d59b3d","modified":1555094260000},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1555094260000},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1555094260000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1555094260000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1555094260000},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1555094260000},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1555094260000},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1555094260000},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1555094260000},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1555094260000},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1555094260000},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1555094260000},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1555094260000},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1555094260000},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1555094260000},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1555094260000},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1555094260000},{"_id":"themes/next/source/js/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1555094260000},{"_id":"themes/next/source/js/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1555094260000},{"_id":"themes/next/source/images/searchicon.png","hash":"025d64ba0160a3a2257dd2b3032b5f7c9dd9b82b","modified":1555094260000},{"_id":"themes/next/source/js/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1555094260000},{"_id":"themes/next/source/js/motion.js","hash":"a16bc0b701646bf6653484675f4d5dc0f892d184","modified":1555094260000},{"_id":"themes/next/source/js/js.cookie.js","hash":"e0afce539f1fb81d59e3c6f0a68d736e2fb45d93","modified":1555094260000},{"_id":"themes/next/source/js/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1555094260000},{"_id":"themes/next/source/js/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1555094260000},{"_id":"themes/next/source/js/next-boot.js","hash":"e0615efab5f81ba0fd39c0527eac31144deac7ce","modified":1555094260000},{"_id":"themes/next/source/js/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1555094260000},{"_id":"themes/next/source/js/utils.js","hash":"3c987de7cfb944c33e9e527f1214724c7aafc796","modified":1555094260000},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555094260000},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555094260000},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555094260000},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555094260000},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1555094260000},{"_id":"themes/next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1555094260000},{"_id":"themes/next/layout/_macro/menu/menu-item.swig","hash":"fb33f499022cd02722f834fcef1a0e193362cfde","modified":1555094260000},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"fc6bafc8c633afadc538c5afa5620ea2a1cdcb84","modified":1555094260000},{"_id":"themes/next/layout/_partials/head/head-unique.swig","hash":"02bb5748e8540b024e7f4008a9e640890b45280f","modified":1555094260000},{"_id":"themes/next/layout/_partials/head/head.swig","hash":"36eae78a4d7160a1c5e59ca3f7333f00b43d359b","modified":1555094260000},{"_id":"themes/next/layout/_partials/header/brand.swig","hash":"648bf7eda66629592cb915c4004534b3913cbc22","modified":1555094260000},{"_id":"themes/next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1555094260000},{"_id":"themes/next/layout/_partials/header/sub-menu.swig","hash":"5adc60100e129c1d0307bdcaa0c7b8e8375a6ea4","modified":1555094260000},{"_id":"themes/next/layout/_partials/header/menu.swig","hash":"71af31fea5913fd30c233e555ef13cf2c9768f72","modified":1555094260000},{"_id":"themes/next/layout/_partials/page/breadcrumb.swig","hash":"0fa4fadb39467b01cede49f21b22e86b1a2da805","modified":1555094260000},{"_id":"themes/next/layout/_partials/page/page-header.swig","hash":"2940df694fff28e8bf71b6546b4162f1e38227db","modified":1555094260000},{"_id":"themes/next/layout/_partials/post/post-copyright.swig","hash":"3615db591dd910fb9fa96542734c7ec0ef05019c","modified":1555094260000},{"_id":"themes/next/layout/_partials/post/reward.swig","hash":"d44f025eb93c99ddf90202d8293ccf80689a00c7","modified":1555094260000},{"_id":"themes/next/layout/_partials/post/post-related.swig","hash":"eea95b785c9c36d28e1839619793f66e89773bee","modified":1555094260000},{"_id":"themes/next/layout/_partials/post/wechat-subscriber.swig","hash":"ef11b5be5bfb2f0affe82cf521c002b37fef9819","modified":1555094260000},{"_id":"themes/next/layout/_partials/search/algolia-search.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1555094260000},{"_id":"themes/next/layout/_partials/search/index.swig","hash":"7d1693416a5dc098f4723a53da2e2d1fc2d6e075","modified":1555094260000},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a5587bd1f60d35e58618576cec45e662aa44ea1f","modified":1555094260000},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1555094260000},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"15b542f5b06b7532234af367340b9ed9fcebb0ac","modified":1555094260000},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"6f181cc188ecbe5e607fd989756e470d4cb9765d","modified":1555094260000},{"_id":"themes/next/layout/_partials/share/likely.swig","hash":"b45e934d24d76ec6b6a790e92bdb3d56186b0e2a","modified":1555094260000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"5b05f165547391bf231e52f56f3d925efc09bc44","modified":1555094260000},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"ffc8e8836714ea79abeb77b75859634615652877","modified":1555094260000},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"108b157fbd1ac3baaf19ae87234fa8728ab79556","modified":1555094260000},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"0097e45e7b671f8006b8b2d3c4f95cacc76a983c","modified":1555094260000},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"e42604fbb17648484e5f12afe230d826de089388","modified":1555094260000},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"a5723950c343d220270bfd27bd30050eda6c3fb3","modified":1555094260000},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"798d67e4a736613ab899eabe6529091bbcda7850","modified":1555094260000},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"591b2ccd9713ccb922b9fcf5e278b6de9c5ec30b","modified":1555094260000},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"8eadb929c9e50e58502ccad2dc2657746f8c592a","modified":1555094260000},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"050ea01f25cfe492be9bb77b409644d623fdf2dc","modified":1555094260000},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"08cd47ef8572121b7811342d3c9a84a338a18191","modified":1555094260000},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"fae69a0e1a1d42f7bb44e594a29857d94594698b","modified":1555094260000},{"_id":"themes/next/layout/_third-party/analytics/growingio.swig","hash":"4a966b7ffe2d80ff1b3dd0fd14b355766dc5c70f","modified":1555094260000},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"d422beaf35a5d2646feaa098bc3e5adf691c7565","modified":1555094260000},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"438c6f5e6665d72f4ea7ee206011d669246f6102","modified":1555094260000},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"f240a50cd9b627620d9a374a29cf95f0c5e99d7c","modified":1555094260000},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"92e04a2b9e0c3df594bc22235d1894e5ad458dfc","modified":1555094260000},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"c754f699c90f6278b9159eff1855c17bc713ee96","modified":1555094260000},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"0dd5b315d1da55dbfc10f51a1f8952f72eba2720","modified":1555094260000},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"3533167c4295637b91d90f3bae7c651cd128bb6e","modified":1555094260000},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"3cfeafefc672d9a7704650ebfb2f9d8668b38d9a","modified":1555094260000},{"_id":"themes/next/layout/_third-party/comments/disqusjs.swig","hash":"c77a2e7ef5f449a445fb4d36b055721fba4a81af","modified":1555094260000},{"_id":"themes/next/layout/_third-party/comments/gitalk.swig","hash":"e8f91c571ceb4b80aafebc4d36b89fb41b1ae040","modified":1555094260000},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"388efc86af7f19c05ad0e26720cd24ee012d20b9","modified":1555094260000},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"2cbaae65a020bbb0e9265364488aff8bf84fa48d","modified":1555094260000},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"4a908b613518878b9b69576c5dba4a5185f552ab","modified":1555094260000},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"5856d5f701e51dfae1fd6fb486cefde67effd555","modified":1555094260000},{"_id":"themes/next/layout/_third-party/math/katex.swig","hash":"c2cb2f384bc30d31cdccf9794a729c03e687b45c","modified":1555094260000},{"_id":"themes/next/layout/_third-party/math/index.swig","hash":"a7e304b05a44279d3e4f611908d7faef9dc14d7c","modified":1555094260000},{"_id":"themes/next/layout/_third-party/math/mathjax.swig","hash":"601774d8672577aefbcefac82c94b01f0338da31","modified":1555094260000},{"_id":"themes/next/layout/_third-party/search/algolia-search.swig","hash":"0a13dfd2de52a96901039098c6fc7b515edfc50b","modified":1555094260000},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"ea94aa85034c6d1b6bb865aecea55c73f8a14501","modified":1555094260000},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"b3eaab6a269aa3fcbafe24fd06f0c9206dc12716","modified":1555094260000},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1555094260000},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1555094260000},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"2e8fb29aa92325df39054b5450757858c6cebc41","modified":1555094260000},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"2036bbb73afd43251982ce824f06c6e88d35a2ef","modified":1555094260000},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"a8aa41625b94cf17a7f473ed10dcbe683b1db705","modified":1555094260000},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1555094260000},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"fc15e277d1504532a09b7b1bd31f900ad95ec4b8","modified":1555094260000},{"_id":"themes/next/source/css/_variables/base.styl","hash":"640f25a63770af5566ccc9cec79c40a4f1c0b29e","modified":1555094260000},{"_id":"themes/next/source/js/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1555094260000},{"_id":"themes/next/source/js/schemes/muse.js","hash":"e9bfa6b343b67625f58757efce46ccdaac8f308c","modified":1555094260000},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1555094260000},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1555094260000},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1555094260000},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1555094260000},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1555094260000},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1555094260000},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1555094260000},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"b98c65006e2546fbf3870c16fbbcbc009dbaab15","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"fe5ff961b86004a306778c7d33a85b32e5e00e48","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"c8b3225396cb444d8baeb94bac78e5216b992a81","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"9d71f34fa13a41b8c8cd2fbdf3fdea608385277c","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"ce826aedf42b9eca424a044452f5d193866726a6","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/scrollbar.styl","hash":"d7b8bcf2a6031296c84bb4f4ecfb037af01d2d82","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/rainbow.styl","hash":"ce2aae8f3ed8ceac3a2417e0481044cf69c788aa","modified":1555094260000},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"8e0740a9ad349ce5555122325da872923135a698","modified":1555094260000},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"7e51ea64611ab5d678c112b4688d4db4fd2737e2","modified":1555094260000},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"a5305a2fa0b03b1dc1dfd156bb1a590b4819f1f3","modified":1555094260000},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"6d900b4159eeb869196a619602578bf4d83a117b","modified":1555094260000},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1555094260000},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"33456264a74d1bba38264d14713544d67d003733","modified":1555094260000},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"7ffde343bdf10add1f052f3c4308a15180eb4404","modified":1555094260000},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"9a2d298dbdcbfd758518fd74b63897bc80ce15a5","modified":1555094260000},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"24230e46fc9fb7b8551f97bb36e9bc1f7423098e","modified":1555094260000},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1555094260000},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fa33213aceed7bf4bf25437ca9c1a00f7734ae65","modified":1555094260000},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1555094260000},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"7359880e8d85312861fe0871f58b662e627dae0c","modified":1555094260000},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"75d2d92af070eb10273558b2436972d3f12b361c","modified":1555094260000},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"a96e46a6ae86c423f932bc2bc78b9f7453e4e4e5","modified":1555094260000},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"6565b4a309325596768d0d32e022c80ef23066cb","modified":1555094260000},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"fc160583f742c94316a0fee05c18468033173534","modified":1555094260000},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1555094260000},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"1edf4e69d0ec0dc9cefed6c35d3e803e0da4093d","modified":1555094260000},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"7359880e8d85312861fe0871f58b662e627dae0c","modified":1555094260000},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"57044a6d19eb418c1c3d28787e82c69efa9e0ca6","modified":1555094260000},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"b6dac5bbf20f090cf4b67d156f030d7170dfb39c","modified":1555094260000},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"75737591682a2bafa71db4c03fb79e970ac0e7aa","modified":1555094260000},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"b5b936dddb7b4de4720cd1e8428b30a2f06d63fb","modified":1555094260000},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"6400c98a9fd2b9a8502269f33355bd7ab3ff793b","modified":1555094260000},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"232aedbd44243b3b80c4503c947060d3269c1afc","modified":1555094260000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1555094260000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1555094260000},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1555094260000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4cfeec9434a72d5efc6ca225d3445d084d4590f7","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/header/github-banner.styl","hash":"ca97f0b6990eef947039faede80c56d9c4381ee1","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"6c4990d375b640ee4551e62c48c1cbe4c3d62212","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"a410ed529afd46ddf4a96ecf0de6599488716887","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"71d8d1cc22a2a7627a6db7240f0c4902a14f9bea","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"cc6ee18f47f2e1e06df6fa0eadb37079e580fd11","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"c0d9e18a9210fdcaf33e488518b3b288eb58c0a1","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"e9dd8de7d98f1478ac7d351624fffd3d8738c905","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"6904fd7ea6455e008d9884558b68254608af9a3c","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f1d52954b9a5d1ca8e224382349f525e598dd923","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"2d142c6f39853916256ad8fc79eb6b85f4001ae8","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"80addb9b725e329915c05c27b9fadaf56457a9b3","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"61ca40856e5cacd48e0fa9728fde4605c7dd4c94","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"6a75bb1f2435f4e895cbbb5abbddf6e8f7257804","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"1385862a5c0bd845015d165aadbd1a6add7b72d7","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"2356226157e8068b0e9bbe2f7d0f74e1ab49199b","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"c961d37190d9bec58a36306c7e716c4e72c4582f","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"0bf899fab331add63f0c8ead31ca3a3db2ad74d9","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"b082d07b13a3d55b4c032fd351dfa9a4fd74edec","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"496f931e3a7e313ba8088fb91bb20789cace72c9","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"5440013a081201ca791582db98159dce93ea9e75","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/post/post-reading_progress.styl","hash":"3f33bb862c2aa993f54987fbb345da067b79b112","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"d5c8ffed7f2c701052b7a53abaf5ef437374ea72","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"8e058c99dd7d41f0bd34c7c28b6ac9fbb17dcb5e","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"a6c24393dffbdd94dd5c01cdbec5e180b0bfbbbd","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"a3170630d8e085889a4bdc20eb7f09c5a0479c47","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"9224b566cd2632f64c1a964e2c786cee93b93286","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"707527c9950a7459355c8abcf4751c0964de0bc1","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"cc83816614f21c7e1d8d3f867d547ff7c658cec4","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-button.styl","hash":"517d541a80d59ad99a3f648be74891e0c7bc72a8","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"9a3bfc878ca797946815bed23cd6f92b24a16358","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"c2d9c3b6fbfa65544e6b5a55d3cb2149df04a8a9","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"c01609176929590f8f347075a9a12b661acd661e","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"967fb3a3c6c851b34ec5df2d945dc266ed63d146","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"8a24b56524a388fbabd408ffc8ba9b56eb9e01ce","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"8e5c884fb950937afa350c608545455c87aa6129","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"6ec8ea7b11a146777b6b8da0f71f0cc1dbd129df","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"d7501ae01fc45fa15b00d1bc5233b9fffa20a3c9","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"58ec00eebe68d0eebd2eea435c710063877447df","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/tags/pdf.styl","hash":"da8d34729fb6eb0fcb8ee81e67d2be3c02bc1bc4","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"21b32840d8b3a14b10770153114778304ba6d1b0","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fc58498d4f5081fcf6218e9e18c5bf2328275bef","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"cbc0be5a3285b469858ec9ead48e2ea90bd47ae1","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/third-party/copy-code.styl","hash":"688ca3eccc26727d050ad098b32b40934719588a","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"fcda60fecff1479adaf6521cf629cda2506337a8","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"ac7753d536341aa824d7bce0332735e838916995","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"f1d9ee1f86a179741f2478f8c70ca11ab578810e","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"7059e24235b7c57a07f3f8abaa06b0bd6a7eda2f","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"3ae3f3c276d444862033fd3434c632ad0d2f84e6","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"ef66c0a08e4243a25e41408d70ca66682b8dcea1","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"9fac89c8146eb2675721a26f528d7d0f8be7debe","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"61466e3e5459960b5802a267751a0c8018918b0b","modified":1555094260000},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"03c4fa9573fddd930552784cf484fd2ee7825323","modified":1555094260000},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1555094260000},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1555094260000},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1555094260000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1555094260000},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1555094260000},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1555094260000},{"_id":"public/notes/boostnote.json","hash":"b5b79bd5f31a89933a540aa726550b7587fa6c7c","modified":1563506567768},{"_id":"public/atom.xml","hash":"b4e7682fb876409e8c140d52bbb5e5675f71a776","modified":1563506567768},{"_id":"public/content.json","hash":"678021d952fb8c9829ce4a05a62b3220411790b1","modified":1563506567782},{"_id":"public/search.xml","hash":"2d7f234eaf9768c47e693a8abea57474f5a33fbc","modified":1563506567782},{"_id":"public/sitemap.xml","hash":"5a930c9e9516676acbe9395853227b13ffca70f7","modified":1563506567782},{"_id":"public/categories/index.html","hash":"4d5be66380ac9b741cc0a09e9aac95f9830af719","modified":1563506567786},{"_id":"public/tags/index.html","hash":"9ff6ad4265a7788f118dea011b8981b190f11b77","modified":1563506567786},{"_id":"public/2019/07/19/Android/Text相关计算/index.html","hash":"c9e64cfb53acfd806c9900b9e53ccdbc8521a9dd","modified":1563506567786},{"_id":"public/2019/07/09/Android/RecyclerView设置item的间距/index.html","hash":"6ef5d06ea730369759afd9102b039103d26bf97f","modified":1563506567786},{"_id":"public/2019/07/04/Android/startService-和bindService/index.html","hash":"808977da69f3dd57bd60f7d323008aac444e64ff","modified":1563506567786},{"_id":"public/2019/06/16/Android/scrollBy-scrollTo-和Scroller/index.html","hash":"309dcd11d6d48cd9ee418135ba9ad4d118ae6d44","modified":1563506567786},{"_id":"public/2019/05/04/Linux/mysql配置远程登录/index.html","hash":"03011aee1168b327554511d6d849ccab8a5895c4","modified":1563506567787},{"_id":"public/2019/05/02/Linux/apt常用命令/index.html","hash":"f7130797eae0c614c04a118d9be723ce4e12dd6e","modified":1563506567787},{"_id":"public/2019/04/19/Android/华为手机的内存泄露/index.html","hash":"9f1c3ba9d075b2441c0753ec1871b766ca5969a4","modified":1563506567787},{"_id":"public/2019/04/16/Android/Activity-class-does-not-exist/index.html","hash":"c93bbbef277db177129fa3c7c5b18601453d9b4d","modified":1563506567787},{"_id":"public/2019/04/15/Android/MVP模式防止内存泄露/index.html","hash":"447eabd99b7730d0bd0b36d6d5b7d3ef9c15be92","modified":1563506567787},{"_id":"public/2019/04/14/Android/Activity管理类的封装/index.html","hash":"d8263c6b9698edc571acd1c5d54e451cadb0eff3","modified":1563506567787},{"_id":"public/2019/04/14/Android/Android-Studio解决依赖冲突/index.html","hash":"e702ddc54a9b77884a59e2ce7230b1680fb05b15","modified":1563506567787},{"_id":"public/2019/04/14/Android/Handler防止内存泄露/index.html","hash":"5b5619fdd0015eab1403e4ba0b195a01e787e552","modified":1563506567787},{"_id":"public/2019/04/13/Java/Jni入门/index.html","hash":"2e444d7d2c66f49da7cc899e09bf47ddcea3a1f5","modified":1563506567787},{"_id":"public/2019/04/13/Android/自定义ViewGroup/index.html","hash":"8650c993f19710f6c25800cf11b73e6385cfe793","modified":1563506567787},{"_id":"public/2019/04/13/C/多个cpp文件编译共享同一个-h文件的全局变量/index.html","hash":"18e5efa7da0725115b1620c78a0e974bffdef4c5","modified":1563506567787},{"_id":"public/2019/04/13/C/C语言结构体的内存对齐/index.html","hash":"18c767bb2e5adad135a56ce6c5ffb5aedbbea374","modified":1563506567787},{"_id":"public/2019/04/13/hello-world/index.html","hash":"e64392248c152f973b7a13d4f1eaea787f47a530","modified":1563506567787},{"_id":"public/index.html","hash":"cac4912b79e77e22fda584f0b357ab7ef17a3eba","modified":1563506567787},{"_id":"public/page/2/index.html","hash":"4f1f372f1634e090806cb9e0ccb25803f21d18b2","modified":1563506567787},{"_id":"public/archives/index.html","hash":"e30c25e1abb6287534ddd65022c6450ae2cb9383","modified":1563506567787},{"_id":"public/archives/page/2/index.html","hash":"1ce70aa202951cfeb626f0b0f1cd0c8b8137eb6e","modified":1563506567788},{"_id":"public/archives/2019/index.html","hash":"48e16f65578e2d8aa783286db163bccfe0d40c95","modified":1563506567788},{"_id":"public/archives/2019/page/2/index.html","hash":"47218078263b635e1ca7a80ef55c5df1ccf28b81","modified":1563506567788},{"_id":"public/archives/2019/04/index.html","hash":"40201e8b8b6680722559d41a5408e07d0a756723","modified":1563506567788},{"_id":"public/archives/2019/04/page/2/index.html","hash":"9df54341b2874669295dd50af39da8a9f7506b23","modified":1563506567788},{"_id":"public/archives/2019/05/index.html","hash":"3150f107cd73df8e118711121476da5f5b032e93","modified":1563506567788},{"_id":"public/archives/2019/06/index.html","hash":"ec2e6ae54d1c3d9aadd2821930b56b9d156e1c3c","modified":1563506567788},{"_id":"public/archives/2019/07/index.html","hash":"83f60d077c4b8abac66961d9339713e50d007898","modified":1563506567788},{"_id":"public/categories/hello-world/index.html","hash":"14e91376ba9edc7088ef7281642df66726486c81","modified":1563506567788},{"_id":"public/categories/Android/index.html","hash":"770b793ebd5bf6dc72481e4f269fbc92a9866224","modified":1563506567788},{"_id":"public/categories/Android/page/2/index.html","hash":"19dd05afcde196d3f2e9b4c5df49f88c1f0c771a","modified":1563506567788},{"_id":"public/categories/Android/AndroidStudio/index.html","hash":"c851a2c158b7d67863047919b4a4c73a1b268c7d","modified":1563506567788},{"_id":"public/categories/C-C/index.html","hash":"6aeed985a8efad039cf48090c592bfb5ddd3de24","modified":1563506567788},{"_id":"public/categories/Android/service/index.html","hash":"b8905cc158cd4883219eaf4b48bcd884cdbfd942","modified":1563506567788},{"_id":"public/categories/Android/view/index.html","hash":"52ea92bd55c96a83164c2a0785e81a138d49b9c3","modified":1563506567788},{"_id":"public/categories/Linux/index.html","hash":"d4c0a70213d71bc5a59b7dca7d0497a484407f27","modified":1563506567788},{"_id":"public/tags/AndroidStudio/index.html","hash":"6e9f4b15dd87805c8f6ceeace1c4464b37492819","modified":1563506567788},{"_id":"public/tags/Activity/index.html","hash":"2c6726c2d39d67bddf4b67116a31ce504bf0068f","modified":1563506567789},{"_id":"public/tags/MVP/index.html","hash":"267c56e5ea4354c121f3ff5b8f1fbcf713952a83","modified":1563506567789},{"_id":"public/tags/Handler/index.html","hash":"2d473416d6355ee64b9be7c3d7806186a63b49ae","modified":1563506567789},{"_id":"public/tags/内存泄露/index.html","hash":"d4d88c4c1a03cce28ae8cacef381b9f566e3afbc","modified":1563506567789},{"_id":"public/tags/View/index.html","hash":"07cfca23b523b60744e244b59c37ed2850712e9e","modified":1563506567789},{"_id":"public/tags/RecyclerView/index.html","hash":"a409891f7ffdc7dc616f5d74eeb07ea53bcb3825","modified":1563506567789},{"_id":"public/tags/service/index.html","hash":"dbd2d109b4b82de4888b3fa7894967541eba9f17","modified":1563506567789},{"_id":"public/tags/view/index.html","hash":"09e0cf609353310e475b6c171065eafb3151a59e","modified":1563506567789},{"_id":"public/tags/jni/index.html","hash":"74d2a07411b00ecb6ba403e651e1b4e192495ce8","modified":1563506567789},{"_id":"public/tags/mysql/index.html","hash":"9a04f0dd7a95263cc184ae057623d6e6c609de8b","modified":1563506567789},{"_id":"public/tags/Linux/index.html","hash":"8426ffbe845631a19a4596b5616649012eda91e5","modified":1563506567789},{"_id":"public/push.sh","hash":"9b904e17d4a6e015e04df31078afa655e2af10b0","modified":1563506567798},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1563506567798},{"_id":"public/images/startService and bindService.jpg","hash":"e22213c4dec3f59761079a0a219ffcbbfe640ec8","modified":1563506567798},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1563506567798},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1563506567798},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1563506567798},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1563506567799},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1563506567799},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1563506567799},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1563506567799},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1563506567799},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1563506567800},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1563506567800},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1563506567800},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1563506567800},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1563506567800},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1563506567800},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1563506567800},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1563506567800},{"_id":"public/images/searchicon.png","hash":"025d64ba0160a3a2257dd2b3032b5f7c9dd9b82b","modified":1563506567800},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1563506567800},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1563506567800},{"_id":"public/images/Text相关计算.webp","hash":"2bc79f17b9a2be8663fe5bbc8487ccfceccc3627","modified":1563506568164},{"_id":"public/images/mysql_iptables.png","hash":"9b8dc491c73623b28c41b1581c728c696ecd365e","modified":1563506568164},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1563506568166},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1563506568166},{"_id":"public/js/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1563506568170},{"_id":"public/js/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1563506568170},{"_id":"public/js/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1563506568170},{"_id":"public/js/motion.js","hash":"a16bc0b701646bf6653484675f4d5dc0f892d184","modified":1563506568170},{"_id":"public/js/js.cookie.js","hash":"e0afce539f1fb81d59e3c6f0a68d736e2fb45d93","modified":1563506568170},{"_id":"public/js/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1563506568170},{"_id":"public/js/next-boot.js","hash":"e0615efab5f81ba0fd39c0527eac31144deac7ce","modified":1563506568170},{"_id":"public/js/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1563506568170},{"_id":"public/js/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1563506568170},{"_id":"public/js/utils.js","hash":"3c987de7cfb944c33e9e527f1214724c7aafc796","modified":1563506568170},{"_id":"public/js/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1563506568170},{"_id":"public/js/schemes/muse.js","hash":"e9bfa6b343b67625f58757efce46ccdaac8f308c","modified":1563506568170},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1563506568170},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1563506568170},{"_id":"public/css/main.css","hash":"016cffd199e35ab17d611181a75cbf12dcc3837c","modified":1563506568170},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1563506568170},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1563506568170},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1563506568171},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1563506568171},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1563506568171},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1563506568171},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1563506568173}],"Category":[{"name":"hello-world","_id":"cjy9jfuxe000348zmrc3k5rrn"},{"name":"Android","_id":"cjy9jfv1q000848zmq3rv1e2g"},{"name":"AndroidStudio","parent":"cjy9jfv1q000848zmq3rv1e2g","_id":"cjy9jfv20000q48zm7e27j3hn"},{"name":"service","parent":"cjy9jfv1q000848zmq3rv1e2g","_id":"cjy9jfv27001448zmfq3qa840"},{"name":"C/C++","_id":"cjy9jfv29001c48zmfcmr5s5f"},{"name":"view","parent":"cjy9jfv1q000848zmq3rv1e2g","_id":"cjy9jfv2b001h48zma3kpo4h5"},{"name":"Linux","_id":"cjy9jfv2d001r48zm5fk7vliv"}],"Data":[],"Page":[{"_content":"{\n  \"folders\": [],\n  \"version\": \"1.0\"\n}\n","source":"notes/boostnote.json","raw":"{\n  \"folders\": [],\n  \"version\": \"1.0\"\n}\n","date":"2019-06-02T09:43:42.004Z","updated":"2019-04-14T12:14:15.000Z","path":"notes/boostnote.json","layout":"false","title":"","comments":1,"_id":"cjy9jfuxc000148zmtim5uie5","content":"{\"folders\":[],\"version\":\"1.0\"}","site":{"data":{}},"excerpt":"","more":"{\"folders\":[],\"version\":\"1.0\"}"},{"title":"categories","date":"2019-04-13T04:54:42.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2019-04-13 12:54:42\ntype: \"categories\"\n---\n","updated":"2019-04-13T04:56:45.000Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjy9jfuxd000248zmcenevi2x","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2019-04-14T12:06:37.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2019-04-14 20:06:37\ntype: \"tags\"\n---\n","updated":"2019-04-14T12:07:12.000Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjy9jfv0y000548zm9ccw6bsg","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\ncategories: \n- hello-world\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2019-04-12T18:13:28.000Z","updated":"2019-04-12T18:13:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy9jfux9000048zm2bi427nm","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"Activity class {} does not exist","date":"2019-04-16T11:23:35.000Z","_content":"\n# Activity class {} does not exist\n\n有时候真机调试，在手机上卸载调试的APP就会出现上述的问题。\n\n**解决办法：**\n使用adb命令\n```shell\nadb uninstall [包名]\n```\n\n估计可能是调试的APP没有彻底卸载造成的。","source":"_posts/Android/Activity-class-does-not-exist.md","raw":"---\ntitle: 'Activity class {} does not exist'\ndate: 2019-04-16 19:23:35\ntags:\n- AndroidStudio\ncategories:\n- Android\n- AndroidStudio\n---\n\n# Activity class {} does not exist\n\n有时候真机调试，在手机上卸载调试的APP就会出现上述的问题。\n\n**解决办法：**\n使用adb命令\n```shell\nadb uninstall [包名]\n```\n\n估计可能是调试的APP没有彻底卸载造成的。","slug":"Android/Activity-class-does-not-exist","published":1,"updated":"2019-04-16T13:10:51.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy9jfv1o000648zmszgsg7vr","content":"<h1 id=\"Activity-class-does-not-exist\"><a href=\"#Activity-class-does-not-exist\" class=\"headerlink\" title=\"Activity class {} does not exist\"></a>Activity class {} does not exist</h1><p>有时候真机调试，在手机上卸载调试的APP就会出现上述的问题。</p>\n<p><strong>解决办法：</strong><br>使用adb命令<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb uninstall [包名]</span><br></pre></td></tr></table></figure></p>\n<p>估计可能是调试的APP没有彻底卸载造成的。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Activity-class-does-not-exist\"><a href=\"#Activity-class-does-not-exist\" class=\"headerlink\" title=\"Activity class {} does not exist\"></a>Activity class {} does not exist</h1><p>有时候真机调试，在手机上卸载调试的APP就会出现上述的问题。</p>\n<p><strong>解决办法：</strong><br>使用adb命令<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">adb uninstall [包名]</span><br></pre></td></tr></table></figure></p>\n<p>估计可能是调试的APP没有彻底卸载造成的。</p>\n"},{"title":"Activity管理类的封装","date":"2019-04-14T11:41:50.000Z","_content":"\n### 使用场景\n有的时候我们需要在一个activity1中销毁另一个制定的activity2。或者是在程序的某个位置销毁所有的activity，达到退出整个app的目的\n\n我在网上找到一个做法，考虑的很严谨，在stack里存的不是activity，而是WeakReference。作者的愿意是担心出现有activity被finish之后ActivityMannager却忘了通知的情况，然后就是内存泄露 。。\n**这里主要是说在系统内存不足杀死Activity时onDestory方法不会被调用**\n\n```java\npublic class FinishActivityManager extends BaseActivity {\n    private FinishActivityManager() {\n    }\n    private static FinishActivityManager sManager;\n    private Stack<WeakReference<Activity>> mActivityStack;\n    public static FinishActivityManager getManager() {\n        if (sManager == null) {\n            synchronized (FinishActivityManager.class) {\n                if (sManager == null) {\n                    sManager = new FinishActivityManager();\n                }\n            }\n        }\n        return sManager;\n    }\n    /**\n     * 添加Activity到栈\n     * @param activity\n     */\n    public void addActivity(Activity activity) {\n        if (mActivityStack == null) {\n            mActivityStack = new Stack<>();\n        }\n        mActivityStack.add(new WeakReference<>(activity));\n    }\n    /**\n     * 检查弱引用是否释放，若释放，则从栈中清理掉该元素\n     */\n    public void checkWeakReference() {\n        if (mActivityStack != null) {\n            // 使用迭代器进行安全删除\n            for (Iterator<WeakReference<Activity>> it = mActivityStack.iterator(); it.hasNext(); ) {\n                WeakReference<Activity> activityReference = it.next();\n                Activity temp = activityReference.get();\n                if (temp == null) {\n                    it.remove();\n                }\n            }\n        }\n    }\n    /**\n     * 获取当前Activity（栈中最后一个压入的）\n     * @return\n     */\n    public Activity currentActivity() {\n        checkWeakReference();\n        if (mActivityStack != null && !mActivityStack.isEmpty()) {\n            return mActivityStack.lastElement().get();\n        }\n        return null;\n    }\n    /**\n     * 关闭当前Activity（栈中最后一个压入的）\n     */\n    public void finishActivity() {\n        Activity activity = currentActivity();\n        if (activity != null) {\n            finishActivity(activity);\n        }\n    }\n    /**\n     * 关闭指定的Activity\n     * @param activity\n     */\n    public void finishActivity(Activity activity) {\n        if (activity != null && mActivityStack != null) {\n            // 使用迭代器进行安全删除\n            for (Iterator<WeakReference<Activity>> it = mActivityStack.iterator(); it.hasNext(); ) {\n                WeakReference<Activity> activityReference = it.next();\n                Activity temp = activityReference.get();\n                // 清理掉已经释放的activity\n                if (temp == null) {\n                    it.remove();\n                    continue;\n                }\n                if (temp == activity) {\n                    it.remove();\n                }\n            }\n            activity.finish();\n        }\n    }\n    /**\n     * 关闭指定类名的所有Activity\n     * @param cls\n     */\n    public void finishActivity(Class<?> cls) {\n        if (mActivityStack != null) {\n            // 使用迭代器进行安全删除\n            for (Iterator<WeakReference<Activity>> it = mActivityStack.iterator(); it.hasNext(); ) {\n                WeakReference<Activity> activityReference = it.next();\n                Activity activity = activityReference.get();\n                // 清理掉已经释放的activity\n                if (activity == null) {\n                    it.remove();\n                    continue;\n                }\n                if (activity.getClass().equals(cls)) {\n                    it.remove();\n                    activity.finish();\n                }\n            }\n        }\n    }\n    /**\n     * 结束所有Activity\n     */\n    public void finishAllActivity() {\n        if (mActivityStack != null) {\n            for (WeakReference<Activity> activityReference : mActivityStack) {\n                Activity activity = activityReference.get();\n                if (activity != null) {\n                    activity.finish();\n                }\n            }\n            mActivityStack.clear();\n        }\n    }\n    /**\n     * 退出应用程序\n     */\n    public void exitApp() {\n        try {\n            finishAllActivity();\n            // 退出JVM,释放所占内存资源,0表示正常退出\n            System.exit(0);\n            // 从系统中kill掉应用程序\n            android.os.Process.killProcess(android.os.Process.myPid());\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n\n然后是一个BaseActivity类， 重写onCreate和onDestory方法\n\n```java\npackage com.example.chenlei.test;\n\nimport android.os.Bundle;\nimport android.support.annotation.Nullable;\nimport android.support.v7.app.AppCompatActivity;\nimport android.util.Log;\n\npublic class BaseActivity extends AppCompatActivity {\n\n\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        MyActivityManager.addActivity(this);\n        Log.i(\"有activity新添加\", \"onCreate: \");\n    }\n\n\n\n    @Override\n    protected void onDestroy() {\n        Log.i(\"有activity被销毁\", \"onDestroy: \"+ MyActivityManager.getSize());\n        MyActivityManager.finishActivity(this);\n        super.onDestroy();\n    }\n}\n\n```\n\n接下来所有的activity类都继承自BaseActivity， 然后就可以在制定的activity类中对ActivityManager类进行操作\n\n\n网上原文：\n<http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2017/0629/8124.html>\n","source":"_posts/Android/Activity管理类的封装.md","raw":"---\ntitle: Activity管理类的封装\ndate: 2019-04-14 19:41:50\ntags:\n- Activity\ncategories:\n- Android\n---\n\n### 使用场景\n有的时候我们需要在一个activity1中销毁另一个制定的activity2。或者是在程序的某个位置销毁所有的activity，达到退出整个app的目的\n\n我在网上找到一个做法，考虑的很严谨，在stack里存的不是activity，而是WeakReference。作者的愿意是担心出现有activity被finish之后ActivityMannager却忘了通知的情况，然后就是内存泄露 。。\n**这里主要是说在系统内存不足杀死Activity时onDestory方法不会被调用**\n\n```java\npublic class FinishActivityManager extends BaseActivity {\n    private FinishActivityManager() {\n    }\n    private static FinishActivityManager sManager;\n    private Stack<WeakReference<Activity>> mActivityStack;\n    public static FinishActivityManager getManager() {\n        if (sManager == null) {\n            synchronized (FinishActivityManager.class) {\n                if (sManager == null) {\n                    sManager = new FinishActivityManager();\n                }\n            }\n        }\n        return sManager;\n    }\n    /**\n     * 添加Activity到栈\n     * @param activity\n     */\n    public void addActivity(Activity activity) {\n        if (mActivityStack == null) {\n            mActivityStack = new Stack<>();\n        }\n        mActivityStack.add(new WeakReference<>(activity));\n    }\n    /**\n     * 检查弱引用是否释放，若释放，则从栈中清理掉该元素\n     */\n    public void checkWeakReference() {\n        if (mActivityStack != null) {\n            // 使用迭代器进行安全删除\n            for (Iterator<WeakReference<Activity>> it = mActivityStack.iterator(); it.hasNext(); ) {\n                WeakReference<Activity> activityReference = it.next();\n                Activity temp = activityReference.get();\n                if (temp == null) {\n                    it.remove();\n                }\n            }\n        }\n    }\n    /**\n     * 获取当前Activity（栈中最后一个压入的）\n     * @return\n     */\n    public Activity currentActivity() {\n        checkWeakReference();\n        if (mActivityStack != null && !mActivityStack.isEmpty()) {\n            return mActivityStack.lastElement().get();\n        }\n        return null;\n    }\n    /**\n     * 关闭当前Activity（栈中最后一个压入的）\n     */\n    public void finishActivity() {\n        Activity activity = currentActivity();\n        if (activity != null) {\n            finishActivity(activity);\n        }\n    }\n    /**\n     * 关闭指定的Activity\n     * @param activity\n     */\n    public void finishActivity(Activity activity) {\n        if (activity != null && mActivityStack != null) {\n            // 使用迭代器进行安全删除\n            for (Iterator<WeakReference<Activity>> it = mActivityStack.iterator(); it.hasNext(); ) {\n                WeakReference<Activity> activityReference = it.next();\n                Activity temp = activityReference.get();\n                // 清理掉已经释放的activity\n                if (temp == null) {\n                    it.remove();\n                    continue;\n                }\n                if (temp == activity) {\n                    it.remove();\n                }\n            }\n            activity.finish();\n        }\n    }\n    /**\n     * 关闭指定类名的所有Activity\n     * @param cls\n     */\n    public void finishActivity(Class<?> cls) {\n        if (mActivityStack != null) {\n            // 使用迭代器进行安全删除\n            for (Iterator<WeakReference<Activity>> it = mActivityStack.iterator(); it.hasNext(); ) {\n                WeakReference<Activity> activityReference = it.next();\n                Activity activity = activityReference.get();\n                // 清理掉已经释放的activity\n                if (activity == null) {\n                    it.remove();\n                    continue;\n                }\n                if (activity.getClass().equals(cls)) {\n                    it.remove();\n                    activity.finish();\n                }\n            }\n        }\n    }\n    /**\n     * 结束所有Activity\n     */\n    public void finishAllActivity() {\n        if (mActivityStack != null) {\n            for (WeakReference<Activity> activityReference : mActivityStack) {\n                Activity activity = activityReference.get();\n                if (activity != null) {\n                    activity.finish();\n                }\n            }\n            mActivityStack.clear();\n        }\n    }\n    /**\n     * 退出应用程序\n     */\n    public void exitApp() {\n        try {\n            finishAllActivity();\n            // 退出JVM,释放所占内存资源,0表示正常退出\n            System.exit(0);\n            // 从系统中kill掉应用程序\n            android.os.Process.killProcess(android.os.Process.myPid());\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n```\n\n\n然后是一个BaseActivity类， 重写onCreate和onDestory方法\n\n```java\npackage com.example.chenlei.test;\n\nimport android.os.Bundle;\nimport android.support.annotation.Nullable;\nimport android.support.v7.app.AppCompatActivity;\nimport android.util.Log;\n\npublic class BaseActivity extends AppCompatActivity {\n\n\n    @Override\n    protected void onCreate(@Nullable Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        MyActivityManager.addActivity(this);\n        Log.i(\"有activity新添加\", \"onCreate: \");\n    }\n\n\n\n    @Override\n    protected void onDestroy() {\n        Log.i(\"有activity被销毁\", \"onDestroy: \"+ MyActivityManager.getSize());\n        MyActivityManager.finishActivity(this);\n        super.onDestroy();\n    }\n}\n\n```\n\n接下来所有的activity类都继承自BaseActivity， 然后就可以在制定的activity类中对ActivityManager类进行操作\n\n\n网上原文：\n<http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2017/0629/8124.html>\n","slug":"Android/Activity管理类的封装","published":1,"updated":"2019-04-14T12:16:17.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy9jfv1p000748zmju8p3vbd","content":"<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>有的时候我们需要在一个activity1中销毁另一个制定的activity2。或者是在程序的某个位置销毁所有的activity，达到退出整个app的目的</p>\n<p>我在网上找到一个做法，考虑的很严谨，在stack里存的不是activity，而是WeakReference。作者的愿意是担心出现有activity被finish之后ActivityMannager却忘了通知的情况，然后就是内存泄露 。。<br><strong>这里主要是说在系统内存不足杀死Activity时onDestory方法不会被调用</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FinishActivityManager</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseActivity</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">FinishActivityManager</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> FinishActivityManager sManager;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Stack&lt;WeakReference&lt;Activity&gt;&gt; mActivityStack;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> FinishActivityManager <span class=\"title\">getManager</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sManager == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (FinishActivityManager.class) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (sManager == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    sManager = <span class=\"keyword\">new</span> FinishActivityManager();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sManager;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 添加Activity到栈</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> activity</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addActivity</span><span class=\"params\">(Activity activity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mActivityStack == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            mActivityStack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mActivityStack.add(<span class=\"keyword\">new</span> WeakReference&lt;&gt;(activity));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 检查弱引用是否释放，若释放，则从栈中清理掉该元素</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">checkWeakReference</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mActivityStack != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 使用迭代器进行安全删除</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Iterator&lt;WeakReference&lt;Activity&gt;&gt; it = mActivityStack.iterator(); it.hasNext(); ) &#123;</span><br><span class=\"line\">                WeakReference&lt;Activity&gt; activityReference = it.next();</span><br><span class=\"line\">                Activity temp = activityReference.get();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (temp == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    it.remove();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取当前Activity（栈中最后一个压入的）</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Activity <span class=\"title\">currentActivity</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        checkWeakReference();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mActivityStack != <span class=\"keyword\">null</span> &amp;&amp; !mActivityStack.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mActivityStack.lastElement().get();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 关闭当前Activity（栈中最后一个压入的）</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">finishActivity</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Activity activity = currentActivity();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (activity != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            finishActivity(activity);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 关闭指定的Activity</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> activity</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">finishActivity</span><span class=\"params\">(Activity activity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (activity != <span class=\"keyword\">null</span> &amp;&amp; mActivityStack != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 使用迭代器进行安全删除</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Iterator&lt;WeakReference&lt;Activity&gt;&gt; it = mActivityStack.iterator(); it.hasNext(); ) &#123;</span><br><span class=\"line\">                WeakReference&lt;Activity&gt; activityReference = it.next();</span><br><span class=\"line\">                Activity temp = activityReference.get();</span><br><span class=\"line\">                <span class=\"comment\">// 清理掉已经释放的activity</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (temp == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    it.remove();</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (temp == activity) &#123;</span><br><span class=\"line\">                    it.remove();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            activity.finish();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 关闭指定类名的所有Activity</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> cls</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">finishActivity</span><span class=\"params\">(Class&lt;?&gt; cls)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mActivityStack != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 使用迭代器进行安全删除</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Iterator&lt;WeakReference&lt;Activity&gt;&gt; it = mActivityStack.iterator(); it.hasNext(); ) &#123;</span><br><span class=\"line\">                WeakReference&lt;Activity&gt; activityReference = it.next();</span><br><span class=\"line\">                Activity activity = activityReference.get();</span><br><span class=\"line\">                <span class=\"comment\">// 清理掉已经释放的activity</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (activity == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    it.remove();</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (activity.getClass().equals(cls)) &#123;</span><br><span class=\"line\">                    it.remove();</span><br><span class=\"line\">                    activity.finish();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 结束所有Activity</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">finishAllActivity</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mActivityStack != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (WeakReference&lt;Activity&gt; activityReference : mActivityStack) &#123;</span><br><span class=\"line\">                Activity activity = activityReference.get();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (activity != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    activity.finish();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            mActivityStack.clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 退出应用程序</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exitApp</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            finishAllActivity();</span><br><span class=\"line\">            <span class=\"comment\">// 退出JVM,释放所占内存资源,0表示正常退出</span></span><br><span class=\"line\">            System.exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 从系统中kill掉应用程序</span></span><br><span class=\"line\">            android.os.Process.killProcess(android.os.Process.myPid());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后是一个BaseActivity类， 重写onCreate和onDestory方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.chenlei.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.annotation.Nullable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        MyActivityManager.addActivity(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        Log.i(<span class=\"string\">\"有activity新添加\"</span>, <span class=\"string\">\"onCreate: \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Log.i(<span class=\"string\">\"有activity被销毁\"</span>, <span class=\"string\">\"onDestroy: \"</span>+ MyActivityManager.getSize());</span><br><span class=\"line\">        MyActivityManager.finishActivity(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来所有的activity类都继承自BaseActivity， 然后就可以在制定的activity类中对ActivityManager类进行操作</p>\n<p>网上原文：<br><a href=\"http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2017/0629/8124.html\" target=\"_blank\" rel=\"noopener\">http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2017/0629/8124.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"使用场景\"><a href=\"#使用场景\" class=\"headerlink\" title=\"使用场景\"></a>使用场景</h3><p>有的时候我们需要在一个activity1中销毁另一个制定的activity2。或者是在程序的某个位置销毁所有的activity，达到退出整个app的目的</p>\n<p>我在网上找到一个做法，考虑的很严谨，在stack里存的不是activity，而是WeakReference。作者的愿意是担心出现有activity被finish之后ActivityMannager却忘了通知的情况，然后就是内存泄露 。。<br><strong>这里主要是说在系统内存不足杀死Activity时onDestory方法不会被调用</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FinishActivityManager</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseActivity</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">FinishActivityManager</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> FinishActivityManager sManager;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Stack&lt;WeakReference&lt;Activity&gt;&gt; mActivityStack;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> FinishActivityManager <span class=\"title\">getManager</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (sManager == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">synchronized</span> (FinishActivityManager.class) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (sManager == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    sManager = <span class=\"keyword\">new</span> FinishActivityManager();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sManager;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 添加Activity到栈</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> activity</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addActivity</span><span class=\"params\">(Activity activity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mActivityStack == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            mActivityStack = <span class=\"keyword\">new</span> Stack&lt;&gt;();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        mActivityStack.add(<span class=\"keyword\">new</span> WeakReference&lt;&gt;(activity));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 检查弱引用是否释放，若释放，则从栈中清理掉该元素</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">checkWeakReference</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mActivityStack != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 使用迭代器进行安全删除</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Iterator&lt;WeakReference&lt;Activity&gt;&gt; it = mActivityStack.iterator(); it.hasNext(); ) &#123;</span><br><span class=\"line\">                WeakReference&lt;Activity&gt; activityReference = it.next();</span><br><span class=\"line\">                Activity temp = activityReference.get();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (temp == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    it.remove();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 获取当前Activity（栈中最后一个压入的）</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Activity <span class=\"title\">currentActivity</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        checkWeakReference();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mActivityStack != <span class=\"keyword\">null</span> &amp;&amp; !mActivityStack.isEmpty()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mActivityStack.lastElement().get();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 关闭当前Activity（栈中最后一个压入的）</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">finishActivity</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Activity activity = currentActivity();</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (activity != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            finishActivity(activity);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 关闭指定的Activity</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> activity</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">finishActivity</span><span class=\"params\">(Activity activity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (activity != <span class=\"keyword\">null</span> &amp;&amp; mActivityStack != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 使用迭代器进行安全删除</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Iterator&lt;WeakReference&lt;Activity&gt;&gt; it = mActivityStack.iterator(); it.hasNext(); ) &#123;</span><br><span class=\"line\">                WeakReference&lt;Activity&gt; activityReference = it.next();</span><br><span class=\"line\">                Activity temp = activityReference.get();</span><br><span class=\"line\">                <span class=\"comment\">// 清理掉已经释放的activity</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (temp == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    it.remove();</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (temp == activity) &#123;</span><br><span class=\"line\">                    it.remove();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            activity.finish();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 关闭指定类名的所有Activity</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> cls</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">finishActivity</span><span class=\"params\">(Class&lt;?&gt; cls)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mActivityStack != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 使用迭代器进行安全删除</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (Iterator&lt;WeakReference&lt;Activity&gt;&gt; it = mActivityStack.iterator(); it.hasNext(); ) &#123;</span><br><span class=\"line\">                WeakReference&lt;Activity&gt; activityReference = it.next();</span><br><span class=\"line\">                Activity activity = activityReference.get();</span><br><span class=\"line\">                <span class=\"comment\">// 清理掉已经释放的activity</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (activity == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    it.remove();</span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (activity.getClass().equals(cls)) &#123;</span><br><span class=\"line\">                    it.remove();</span><br><span class=\"line\">                    activity.finish();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 结束所有Activity</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">finishAllActivity</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mActivityStack != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (WeakReference&lt;Activity&gt; activityReference : mActivityStack) &#123;</span><br><span class=\"line\">                Activity activity = activityReference.get();</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (activity != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    activity.finish();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            mActivityStack.clear();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 退出应用程序</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exitApp</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            finishAllActivity();</span><br><span class=\"line\">            <span class=\"comment\">// 退出JVM,释放所占内存资源,0表示正常退出</span></span><br><span class=\"line\">            System.exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">            <span class=\"comment\">// 从系统中kill掉应用程序</span></span><br><span class=\"line\">            android.os.Process.killProcess(android.os.Process.myPid());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>然后是一个BaseActivity类， 重写onCreate和onDestory方法</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.chenlei.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.os.Bundle;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.annotation.Nullable;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        MyActivityManager.addActivity(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        Log.i(<span class=\"string\">\"有activity新添加\"</span>, <span class=\"string\">\"onCreate: \"</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        Log.i(<span class=\"string\">\"有activity被销毁\"</span>, <span class=\"string\">\"onDestroy: \"</span>+ MyActivityManager.getSize());</span><br><span class=\"line\">        MyActivityManager.finishActivity(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接下来所有的activity类都继承自BaseActivity， 然后就可以在制定的activity类中对ActivityManager类进行操作</p>\n<p>网上原文：<br><a href=\"http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2017/0629/8124.html\" target=\"_blank\" rel=\"noopener\">http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2017/0629/8124.html</a></p>\n"},{"title":"MVP模式防止内存泄露","date":"2019-04-15T00:54:27.000Z","_content":"\n# MVP模式防止内存泄露\n### 参考链接\nhttps://jocherch.github.io/mvp/mvp-memory-leak/\nhttps://blog.csdn.net/Xiong_IT/article/details/52610729\n\n### 发生内存泄露的原因\n由于Presenter经常性地需要执行一些耗时的操作，例如，我们经常使用的网络请求数据。当 Presenter 持有了 Activity 的强引用，如果在请求结束之前，Activity 被销毁了，那么由于网络请求还没有返回，导致 Presenter 一直持有 Activity 对象的引用，使得该对象无法被系统回收，此时就发生了内存泄露。\n\n**解决方案：通过弱引用和 Activity / Fragment 的生命周期来解决这个问题。**\n\n**Model**\n```java\ninterface BaseMvpModel{\n    public void mvpCancleTasks();\n        // TODO 终止线程池ThreadPool.shutDown()，AsyncTask.cancle()，或者调用框架的取消任务api\n    \n}\n```\n**View**\n```java\ninterface BaseMvpView{\n    public void mvpDetachView();\n    /*\n        例如\n        @Override\n        public void onDestroy() {\n            super.onDestroy();\n            mPresenter.mvpDestroy();\n            mPresenter = null;\n        }\n    */\n}\n```\n\n**Presenter**\n```java\ninterface BaseMvpPresenter{\n    public void mvpDestory();\n    /*例如:\n        public void mvpDestory() {\n            view = null;\n            if(modle != null) {\n                modle.mvpaCncleTasks();\n                modle = null;\n            }\n        }\n    */\n}\n```\n\n这里只是创建了一个BaseInterface用于让mvp的接口去继承，没有做更加详细的封装，仅仅由于提示。主要是不同的模块处理可能会有不同的操作\n\n**注意要使用WeakReference**\n并不是在任何情况下Activity的onDestroy都会被调用（其它原因导致Activity对象还在被引用，就不会回调onDestroy方法），一旦这种情况发生，弱引用也能够保证不会造成内存泄露。\n\n","source":"_posts/Android/MVP模式防止内存泄露.md","raw":"---\ntitle: MVP模式防止内存泄露\ndate: 2019-04-15 08:54:27\ntags:\n- MVP\n- 内存泄露\ncategories:\n- Android\n---\n\n# MVP模式防止内存泄露\n### 参考链接\nhttps://jocherch.github.io/mvp/mvp-memory-leak/\nhttps://blog.csdn.net/Xiong_IT/article/details/52610729\n\n### 发生内存泄露的原因\n由于Presenter经常性地需要执行一些耗时的操作，例如，我们经常使用的网络请求数据。当 Presenter 持有了 Activity 的强引用，如果在请求结束之前，Activity 被销毁了，那么由于网络请求还没有返回，导致 Presenter 一直持有 Activity 对象的引用，使得该对象无法被系统回收，此时就发生了内存泄露。\n\n**解决方案：通过弱引用和 Activity / Fragment 的生命周期来解决这个问题。**\n\n**Model**\n```java\ninterface BaseMvpModel{\n    public void mvpCancleTasks();\n        // TODO 终止线程池ThreadPool.shutDown()，AsyncTask.cancle()，或者调用框架的取消任务api\n    \n}\n```\n**View**\n```java\ninterface BaseMvpView{\n    public void mvpDetachView();\n    /*\n        例如\n        @Override\n        public void onDestroy() {\n            super.onDestroy();\n            mPresenter.mvpDestroy();\n            mPresenter = null;\n        }\n    */\n}\n```\n\n**Presenter**\n```java\ninterface BaseMvpPresenter{\n    public void mvpDestory();\n    /*例如:\n        public void mvpDestory() {\n            view = null;\n            if(modle != null) {\n                modle.mvpaCncleTasks();\n                modle = null;\n            }\n        }\n    */\n}\n```\n\n这里只是创建了一个BaseInterface用于让mvp的接口去继承，没有做更加详细的封装，仅仅由于提示。主要是不同的模块处理可能会有不同的操作\n\n**注意要使用WeakReference**\n并不是在任何情况下Activity的onDestroy都会被调用（其它原因导致Activity对象还在被引用，就不会回调onDestroy方法），一旦这种情况发生，弱引用也能够保证不会造成内存泄露。\n\n","slug":"Android/MVP模式防止内存泄露","published":1,"updated":"2019-04-19T03:41:23.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy9jfv1q000a48zm5srpu1rl","content":"<h1 id=\"MVP模式防止内存泄露\"><a href=\"#MVP模式防止内存泄露\" class=\"headerlink\" title=\"MVP模式防止内存泄露\"></a>MVP模式防止内存泄露</h1><h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"https://jocherch.github.io/mvp/mvp-memory-leak/\" target=\"_blank\" rel=\"noopener\">https://jocherch.github.io/mvp/mvp-memory-leak/</a><br><a href=\"https://blog.csdn.net/Xiong_IT/article/details/52610729\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/Xiong_IT/article/details/52610729</a></p>\n<h3 id=\"发生内存泄露的原因\"><a href=\"#发生内存泄露的原因\" class=\"headerlink\" title=\"发生内存泄露的原因\"></a>发生内存泄露的原因</h3><p>由于Presenter经常性地需要执行一些耗时的操作，例如，我们经常使用的网络请求数据。当 Presenter 持有了 Activity 的强引用，如果在请求结束之前，Activity 被销毁了，那么由于网络请求还没有返回，导致 Presenter 一直持有 Activity 对象的引用，使得该对象无法被系统回收，此时就发生了内存泄露。</p>\n<p><strong>解决方案：通过弱引用和 Activity / Fragment 的生命周期来解决这个问题。</strong></p>\n<p><strong>Model</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BaseMvpModel</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">mvpCancleTasks</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">        <span class=\"comment\">// TODO 终止线程池ThreadPool.shutDown()，AsyncTask.cancle()，或者调用框架的取消任务api</span></span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>View</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BaseMvpView</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">mvpDetachView</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        例如</span></span><br><span class=\"line\"><span class=\"comment\">        @Override</span></span><br><span class=\"line\"><span class=\"comment\">        public void onDestroy() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            super.onDestroy();</span></span><br><span class=\"line\"><span class=\"comment\">            mPresenter.mvpDestroy();</span></span><br><span class=\"line\"><span class=\"comment\">            mPresenter = null;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>Presenter</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BaseMvpPresenter</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">mvpDestory</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/*例如:</span></span><br><span class=\"line\"><span class=\"comment\">        public void mvpDestory() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            view = null;</span></span><br><span class=\"line\"><span class=\"comment\">            if(modle != null) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                modle.mvpaCncleTasks();</span></span><br><span class=\"line\"><span class=\"comment\">                modle = null;</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里只是创建了一个BaseInterface用于让mvp的接口去继承，没有做更加详细的封装，仅仅由于提示。主要是不同的模块处理可能会有不同的操作</p>\n<p><strong>注意要使用WeakReference</strong><br>并不是在任何情况下Activity的onDestroy都会被调用（其它原因导致Activity对象还在被引用，就不会回调onDestroy方法），一旦这种情况发生，弱引用也能够保证不会造成内存泄露。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"MVP模式防止内存泄露\"><a href=\"#MVP模式防止内存泄露\" class=\"headerlink\" title=\"MVP模式防止内存泄露\"></a>MVP模式防止内存泄露</h1><h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"https://jocherch.github.io/mvp/mvp-memory-leak/\" target=\"_blank\" rel=\"noopener\">https://jocherch.github.io/mvp/mvp-memory-leak/</a><br><a href=\"https://blog.csdn.net/Xiong_IT/article/details/52610729\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/Xiong_IT/article/details/52610729</a></p>\n<h3 id=\"发生内存泄露的原因\"><a href=\"#发生内存泄露的原因\" class=\"headerlink\" title=\"发生内存泄露的原因\"></a>发生内存泄露的原因</h3><p>由于Presenter经常性地需要执行一些耗时的操作，例如，我们经常使用的网络请求数据。当 Presenter 持有了 Activity 的强引用，如果在请求结束之前，Activity 被销毁了，那么由于网络请求还没有返回，导致 Presenter 一直持有 Activity 对象的引用，使得该对象无法被系统回收，此时就发生了内存泄露。</p>\n<p><strong>解决方案：通过弱引用和 Activity / Fragment 的生命周期来解决这个问题。</strong></p>\n<p><strong>Model</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BaseMvpModel</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">mvpCancleTasks</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">        <span class=\"comment\">// TODO 终止线程池ThreadPool.shutDown()，AsyncTask.cancle()，或者调用框架的取消任务api</span></span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>View</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BaseMvpView</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">mvpDetachView</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">        例如</span></span><br><span class=\"line\"><span class=\"comment\">        @Override</span></span><br><span class=\"line\"><span class=\"comment\">        public void onDestroy() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            super.onDestroy();</span></span><br><span class=\"line\"><span class=\"comment\">            mPresenter.mvpDestroy();</span></span><br><span class=\"line\"><span class=\"comment\">            mPresenter = null;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p><strong>Presenter</strong><br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">BaseMvpPresenter</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">mvpDestory</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">    <span class=\"comment\">/*例如:</span></span><br><span class=\"line\"><span class=\"comment\">        public void mvpDestory() &#123;</span></span><br><span class=\"line\"><span class=\"comment\">            view = null;</span></span><br><span class=\"line\"><span class=\"comment\">            if(modle != null) &#123;</span></span><br><span class=\"line\"><span class=\"comment\">                modle.mvpaCncleTasks();</span></span><br><span class=\"line\"><span class=\"comment\">                modle = null;</span></span><br><span class=\"line\"><span class=\"comment\">            &#125;</span></span><br><span class=\"line\"><span class=\"comment\">        &#125;</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这里只是创建了一个BaseInterface用于让mvp的接口去继承，没有做更加详细的封装，仅仅由于提示。主要是不同的模块处理可能会有不同的操作</p>\n<p><strong>注意要使用WeakReference</strong><br>并不是在任何情况下Activity的onDestroy都会被调用（其它原因导致Activity对象还在被引用，就不会回调onDestroy方法），一旦这种情况发生，弱引用也能够保证不会造成内存泄露。</p>\n"},{"title":"华为手机的内存泄露","date":"2019-04-19T03:41:06.000Z","_content":"\n# 华为手机的内存泄露\n\n最近在开发的时候，使用我的华为手机做真机调试，发现LeakCanary一直有内存泄露报出。\n一开始我以为是我使用MVP模式开发导致的，使用WeakReference和一些其他的处理之后，发现这个内存泄露还是存在。\n然后我用模拟器调试，发现模拟器竟然没有内存泄漏报出。想到这可能是手机的问题。应该是国内手机厂商对系统的魔改造成的。\n\n我的手机系统是华为EMUI9.0  &&  Android9.0\n\n以下是我找到的网上的解决方案：\n### 参考链接\nhttps://www.jianshu.com/p/95242060320f\n\n### inputMethodManager.mLastSrvView泄露\n\n```java\npublic class FixMemLeak {\n\n    private static Field field;\n    private static boolean hasField = true;\n\n    public static void fixLeak(Context context) {\n        if (!hasField) {\n            return;\n        }\n        InputMethodManager imm = (InputMethodManager) context.getSystemService(Context.INPUT_METHOD_SERVICE);\n        if (imm == null) {\n            return;\n        }\n\n        String[] arr = new String[]{\"mLastSrvView\"};\n        for (String param : arr) {\n            try {\n                if (field == null) {\n                    field = imm.getClass().getDeclaredField(param);\n                }\n                if (field == null) {\n                    hasField = false;\n                }\n                if (field != null) {\n                    field.setAccessible(true);\n                    field.set(imm, null);\n                }\n            } catch (Throwable t) {\n                t.printStackTrace();\n            }\n        }\n    }\n}\n```\n\n在BaseActivity的onDestroy()方法里执行这个fexLeak()方法，然后所有的Activity继承BaseActivity。然后就没有报错了\n\n### Toast$TN.mWM 泄露\n泄露出现在显示一个Toast之后。这个就更迷了，网上我没有找到相关的解释。同样的在模拟器上没有出现这样的内存泄露。\n\n最终的解决方法是：\n在使用Toast时，传入的Context参数使用ApplicationContext而不是Activity。然后就没有内存泄露报出了。","source":"_posts/Android/华为手机的内存泄露.md","raw":"---\ntitle: 华为手机的内存泄露\ndate: 2019-04-19 11:41:06\ntags:\n- 内存泄露\ncategory:\n- Android\n---\n\n# 华为手机的内存泄露\n\n最近在开发的时候，使用我的华为手机做真机调试，发现LeakCanary一直有内存泄露报出。\n一开始我以为是我使用MVP模式开发导致的，使用WeakReference和一些其他的处理之后，发现这个内存泄露还是存在。\n然后我用模拟器调试，发现模拟器竟然没有内存泄漏报出。想到这可能是手机的问题。应该是国内手机厂商对系统的魔改造成的。\n\n我的手机系统是华为EMUI9.0  &&  Android9.0\n\n以下是我找到的网上的解决方案：\n### 参考链接\nhttps://www.jianshu.com/p/95242060320f\n\n### inputMethodManager.mLastSrvView泄露\n\n```java\npublic class FixMemLeak {\n\n    private static Field field;\n    private static boolean hasField = true;\n\n    public static void fixLeak(Context context) {\n        if (!hasField) {\n            return;\n        }\n        InputMethodManager imm = (InputMethodManager) context.getSystemService(Context.INPUT_METHOD_SERVICE);\n        if (imm == null) {\n            return;\n        }\n\n        String[] arr = new String[]{\"mLastSrvView\"};\n        for (String param : arr) {\n            try {\n                if (field == null) {\n                    field = imm.getClass().getDeclaredField(param);\n                }\n                if (field == null) {\n                    hasField = false;\n                }\n                if (field != null) {\n                    field.setAccessible(true);\n                    field.set(imm, null);\n                }\n            } catch (Throwable t) {\n                t.printStackTrace();\n            }\n        }\n    }\n}\n```\n\n在BaseActivity的onDestroy()方法里执行这个fexLeak()方法，然后所有的Activity继承BaseActivity。然后就没有报错了\n\n### Toast$TN.mWM 泄露\n泄露出现在显示一个Toast之后。这个就更迷了，网上我没有找到相关的解释。同样的在模拟器上没有出现这样的内存泄露。\n\n最终的解决方法是：\n在使用Toast时，传入的Context参数使用ApplicationContext而不是Activity。然后就没有内存泄露报出了。","slug":"Android/华为手机的内存泄露","published":1,"updated":"2019-04-19T03:55:24.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy9jfv1r000b48zm6v5f2zvz","content":"<h1 id=\"华为手机的内存泄露\"><a href=\"#华为手机的内存泄露\" class=\"headerlink\" title=\"华为手机的内存泄露\"></a>华为手机的内存泄露</h1><p>最近在开发的时候，使用我的华为手机做真机调试，发现LeakCanary一直有内存泄露报出。<br>一开始我以为是我使用MVP模式开发导致的，使用WeakReference和一些其他的处理之后，发现这个内存泄露还是存在。<br>然后我用模拟器调试，发现模拟器竟然没有内存泄漏报出。想到这可能是手机的问题。应该是国内手机厂商对系统的魔改造成的。</p>\n<p>我的手机系统是华为EMUI9.0  &amp;&amp;  Android9.0</p>\n<p>以下是我找到的网上的解决方案：</p>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"https://www.jianshu.com/p/95242060320f\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/95242060320f</a></p>\n<h3 id=\"inputMethodManager-mLastSrvView泄露\"><a href=\"#inputMethodManager-mLastSrvView泄露\" class=\"headerlink\" title=\"inputMethodManager.mLastSrvView泄露\"></a>inputMethodManager.mLastSrvView泄露</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FixMemLeak</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Field field;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> hasField = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">fixLeak</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!hasField) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        InputMethodManager imm = (InputMethodManager) context.getSystemService(Context.INPUT_METHOD_SERVICE);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (imm == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        String[] arr = <span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">\"mLastSrvView\"</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String param : arr) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (field == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    field = imm.getClass().getDeclaredField(param);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (field == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    hasField = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (field != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    field.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                    field.set(imm, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">                t.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在BaseActivity的onDestroy()方法里执行这个fexLeak()方法，然后所有的Activity继承BaseActivity。然后就没有报错了</p>\n<h3 id=\"Toast-TN-mWM-泄露\"><a href=\"#Toast-TN-mWM-泄露\" class=\"headerlink\" title=\"Toast$TN.mWM 泄露\"></a>Toast$TN.mWM 泄露</h3><p>泄露出现在显示一个Toast之后。这个就更迷了，网上我没有找到相关的解释。同样的在模拟器上没有出现这样的内存泄露。</p>\n<p>最终的解决方法是：<br>在使用Toast时，传入的Context参数使用ApplicationContext而不是Activity。然后就没有内存泄露报出了。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"华为手机的内存泄露\"><a href=\"#华为手机的内存泄露\" class=\"headerlink\" title=\"华为手机的内存泄露\"></a>华为手机的内存泄露</h1><p>最近在开发的时候，使用我的华为手机做真机调试，发现LeakCanary一直有内存泄露报出。<br>一开始我以为是我使用MVP模式开发导致的，使用WeakReference和一些其他的处理之后，发现这个内存泄露还是存在。<br>然后我用模拟器调试，发现模拟器竟然没有内存泄漏报出。想到这可能是手机的问题。应该是国内手机厂商对系统的魔改造成的。</p>\n<p>我的手机系统是华为EMUI9.0  &amp;&amp;  Android9.0</p>\n<p>以下是我找到的网上的解决方案：</p>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"https://www.jianshu.com/p/95242060320f\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/95242060320f</a></p>\n<h3 id=\"inputMethodManager-mLastSrvView泄露\"><a href=\"#inputMethodManager-mLastSrvView泄露\" class=\"headerlink\" title=\"inputMethodManager.mLastSrvView泄露\"></a>inputMethodManager.mLastSrvView泄露</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FixMemLeak</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Field field;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">boolean</span> hasField = <span class=\"keyword\">true</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">fixLeak</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!hasField) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        InputMethodManager imm = (InputMethodManager) context.getSystemService(Context.INPUT_METHOD_SERVICE);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (imm == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        String[] arr = <span class=\"keyword\">new</span> String[]&#123;<span class=\"string\">\"mLastSrvView\"</span>&#125;;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (String param : arr) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (field == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    field = imm.getClass().getDeclaredField(param);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (field == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    hasField = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (field != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">                    field.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">                    field.set(imm, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (Throwable t) &#123;</span><br><span class=\"line\">                t.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在BaseActivity的onDestroy()方法里执行这个fexLeak()方法，然后所有的Activity继承BaseActivity。然后就没有报错了</p>\n<h3 id=\"Toast-TN-mWM-泄露\"><a href=\"#Toast-TN-mWM-泄露\" class=\"headerlink\" title=\"Toast$TN.mWM 泄露\"></a>Toast$TN.mWM 泄露</h3><p>泄露出现在显示一个Toast之后。这个就更迷了，网上我没有找到相关的解释。同样的在模拟器上没有出现这样的内存泄露。</p>\n<p>最终的解决方法是：<br>在使用Toast时，传入的Context参数使用ApplicationContext而不是Activity。然后就没有内存泄露报出了。</p>\n"},{"title":"Handler防止内存泄露","date":"2019-04-14T10:59:55.000Z","_content":"\n# Handler防止内存泄露\n\n```java\npublic class MainActivity extends AppCompatActivity {\n    private MyHandler mHandler = new MyHandler(this);\n    private TextView mTextView ;\n    private static class MyHandler extends Handler {\n        private WeakReference<Context> reference;\n        public MyHandler(Context context) {\n            reference = new WeakReference<>(context);\n        }\n        @Override\n        public void handleMessage(Message msg) {\n            MainActivity activity = (MainActivity) reference.get();\n            if(activity != null){\n                activity.mTextView.setText(\"\");\n            }\n        }\n    }\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        mTextView = (TextView)findViewById(R.id.textview);\n        loadData();\n    }\n   //loadData()方法是在子线程中，执行\n    private void loadData() {\n        //...request\n        Message message = Message.obtain();\n        mHandler.sendMessage(message);\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        //如果你的Handler被delay（延时了）,可以做如下的处理\n        mHandler.removeCallbacksAndMessages(null);\n    }\n}\n```\n\n## 解释\n\n创建一个静态Handler内部类，然后对Handler持有的对象使用弱引用，这样在回收时也可以回收Handler持有的对象，这样虽然避免了Activity泄漏，如果你的Handler被delay（延时了），在Activity的Destroy时或者Stop时应该移除消息队列中的消息\n\n使用mHandler.removeCallbacksAndMessages(null);是移除消息队列中所有消息和所有的Runnable。当然也可以使用mHandler.removeCallbacks();或mHandler.removeMessages()；来移除指定的Runnable和Message。\n\n\n\n","source":"_posts/Android/Handler防止内存泄露.md","raw":"---\ntitle: Handler防止内存泄露\ndate: 2019-04-14 18:59:55\ntags:\n- Handler\n- 内存泄露\ncategories: \n- Android\n---\n\n# Handler防止内存泄露\n\n```java\npublic class MainActivity extends AppCompatActivity {\n    private MyHandler mHandler = new MyHandler(this);\n    private TextView mTextView ;\n    private static class MyHandler extends Handler {\n        private WeakReference<Context> reference;\n        public MyHandler(Context context) {\n            reference = new WeakReference<>(context);\n        }\n        @Override\n        public void handleMessage(Message msg) {\n            MainActivity activity = (MainActivity) reference.get();\n            if(activity != null){\n                activity.mTextView.setText(\"\");\n            }\n        }\n    }\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n        mTextView = (TextView)findViewById(R.id.textview);\n        loadData();\n    }\n   //loadData()方法是在子线程中，执行\n    private void loadData() {\n        //...request\n        Message message = Message.obtain();\n        mHandler.sendMessage(message);\n    }\n\n    @Override\n    protected void onDestroy() {\n        super.onDestroy();\n        //如果你的Handler被delay（延时了）,可以做如下的处理\n        mHandler.removeCallbacksAndMessages(null);\n    }\n}\n```\n\n## 解释\n\n创建一个静态Handler内部类，然后对Handler持有的对象使用弱引用，这样在回收时也可以回收Handler持有的对象，这样虽然避免了Activity泄漏，如果你的Handler被delay（延时了），在Activity的Destroy时或者Stop时应该移除消息队列中的消息\n\n使用mHandler.removeCallbacksAndMessages(null);是移除消息队列中所有消息和所有的Runnable。当然也可以使用mHandler.removeCallbacks();或mHandler.removeMessages()；来移除指定的Runnable和Message。\n\n\n\n","slug":"Android/Handler防止内存泄露","published":1,"updated":"2019-04-14T12:16:34.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy9jfv1s000c48zm873aodmu","content":"<h1 id=\"Handler防止内存泄露\"><a href=\"#Handler防止内存泄露\" class=\"headerlink\" title=\"Handler防止内存泄露\"></a>Handler防止内存泄露</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> MyHandler mHandler = <span class=\"keyword\">new</span> MyHandler(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView mTextView ;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> WeakReference&lt;Context&gt; reference;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyHandler</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">            reference = <span class=\"keyword\">new</span> WeakReference&lt;&gt;(context);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">            MainActivity activity = (MainActivity) reference.get();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(activity != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                activity.mTextView.setText(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        mTextView = (TextView)findViewById(R.id.textview);</span><br><span class=\"line\">        loadData();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   <span class=\"comment\">//loadData()方法是在子线程中，执行</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">loadData</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//...request</span></span><br><span class=\"line\">        Message message = Message.obtain();</span><br><span class=\"line\">        mHandler.sendMessage(message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</span><br><span class=\"line\">        <span class=\"comment\">//如果你的Handler被delay（延时了）,可以做如下的处理</span></span><br><span class=\"line\">        mHandler.removeCallbacksAndMessages(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"解释\"><a href=\"#解释\" class=\"headerlink\" title=\"解释\"></a>解释</h2><p>创建一个静态Handler内部类，然后对Handler持有的对象使用弱引用，这样在回收时也可以回收Handler持有的对象，这样虽然避免了Activity泄漏，如果你的Handler被delay（延时了），在Activity的Destroy时或者Stop时应该移除消息队列中的消息</p>\n<p>使用mHandler.removeCallbacksAndMessages(null);是移除消息队列中所有消息和所有的Runnable。当然也可以使用mHandler.removeCallbacks();或mHandler.removeMessages()；来移除指定的Runnable和Message。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Handler防止内存泄露\"><a href=\"#Handler防止内存泄露\" class=\"headerlink\" title=\"Handler防止内存泄露\"></a>Handler防止内存泄露</h1><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MainActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> MyHandler mHandler = <span class=\"keyword\">new</span> MyHandler(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    <span class=\"keyword\">private</span> TextView mTextView ;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyHandler</span> <span class=\"keyword\">extends</span> <span class=\"title\">Handler</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">private</span> WeakReference&lt;Context&gt; reference;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">MyHandler</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">            reference = <span class=\"keyword\">new</span> WeakReference&lt;&gt;(context);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"meta\">@Override</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">handleMessage</span><span class=\"params\">(Message msg)</span> </span>&#123;</span><br><span class=\"line\">            MainActivity activity = (MainActivity) reference.get();</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(activity != <span class=\"keyword\">null</span>)&#123;</span><br><span class=\"line\">                activity.mTextView.setText(<span class=\"string\">\"\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">        setContentView(R.layout.activity_main);</span><br><span class=\"line\">        mTextView = (TextView)findViewById(R.id.textview);</span><br><span class=\"line\">        loadData();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">   <span class=\"comment\">//loadData()方法是在子线程中，执行</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">loadData</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//...request</span></span><br><span class=\"line\">        Message message = Message.obtain();</span><br><span class=\"line\">        mHandler.sendMessage(message);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onDestroy</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onDestroy();</span><br><span class=\"line\">        <span class=\"comment\">//如果你的Handler被delay（延时了）,可以做如下的处理</span></span><br><span class=\"line\">        mHandler.removeCallbacksAndMessages(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"解释\"><a href=\"#解释\" class=\"headerlink\" title=\"解释\"></a>解释</h2><p>创建一个静态Handler内部类，然后对Handler持有的对象使用弱引用，这样在回收时也可以回收Handler持有的对象，这样虽然避免了Activity泄漏，如果你的Handler被delay（延时了），在Activity的Destroy时或者Stop时应该移除消息队列中的消息</p>\n<p>使用mHandler.removeCallbacksAndMessages(null);是移除消息队列中所有消息和所有的Runnable。当然也可以使用mHandler.removeCallbacks();或mHandler.removeMessages()；来移除指定的Runnable和Message。</p>\n"},{"title":"Text相关计算","date":"2019-07-19T03:09:42.000Z","_content":"\n# Text相关计算\n\n## Text的相关属性\n![图片](/images/Text相关计算)\n\nBaseline上方的值为正，下方的值为负\n\n## TextSize和TextView大小的转换\n\n相关参数包括：\n\n* 所使用字体(fallback的话不影响)的UPM(Units Per EM)\n\n* ascent/descent属性\n\n* top/bottom参数\n\n**禁止includePadding时, TextView实际占据高度是 (ascent - descent) / UPM * textSize**\n\n**开启includePadding时, TextView实际占据高度是 (top - bottom) / UPM * textSize**\n\n## 参考\n[Paint 绘制文字属性](https://www.jianshu.com/p/1728b725b4a6)\n[TextView文字实际高度分析](https://neutra.github.io/2016/TextView%E6%96%87%E5%AD%97%E5%AE%9E%E9%99%85%E9%AB%98%E5%BA%A6%E5%88%86%E6%9E%90/)\n","source":"_posts/Android/Text相关计算.md","raw":"---\ntitle: Text相关计算\ndate: 2019-07-19 11:09:42\ntags:\n- View\ncategories:\n- Android\n---\n\n# Text相关计算\n\n## Text的相关属性\n![图片](/images/Text相关计算)\n\nBaseline上方的值为正，下方的值为负\n\n## TextSize和TextView大小的转换\n\n相关参数包括：\n\n* 所使用字体(fallback的话不影响)的UPM(Units Per EM)\n\n* ascent/descent属性\n\n* top/bottom参数\n\n**禁止includePadding时, TextView实际占据高度是 (ascent - descent) / UPM * textSize**\n\n**开启includePadding时, TextView实际占据高度是 (top - bottom) / UPM * textSize**\n\n## 参考\n[Paint 绘制文字属性](https://www.jianshu.com/p/1728b725b4a6)\n[TextView文字实际高度分析](https://neutra.github.io/2016/TextView%E6%96%87%E5%AD%97%E5%AE%9E%E9%99%85%E9%AB%98%E5%BA%A6%E5%88%86%E6%9E%90/)\n","slug":"Android/Text相关计算","published":1,"updated":"2019-07-19T03:20:27.433Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy9jfv1v000g48zmk5t8orn9","content":"<h1 id=\"Text相关计算\"><a href=\"#Text相关计算\" class=\"headerlink\" title=\"Text相关计算\"></a>Text相关计算</h1><h2 id=\"Text的相关属性\"><a href=\"#Text的相关属性\" class=\"headerlink\" title=\"Text的相关属性\"></a>Text的相关属性</h2><p><img src=\"/images/Text相关计算\" alt=\"图片\"></p>\n<p>Baseline上方的值为正，下方的值为负</p>\n<h2 id=\"TextSize和TextView大小的转换\"><a href=\"#TextSize和TextView大小的转换\" class=\"headerlink\" title=\"TextSize和TextView大小的转换\"></a>TextSize和TextView大小的转换</h2><p>相关参数包括：</p>\n<ul>\n<li><p>所使用字体(fallback的话不影响)的UPM(Units Per EM)</p>\n</li>\n<li><p>ascent/descent属性</p>\n</li>\n<li><p>top/bottom参数</p>\n</li>\n</ul>\n<p><strong>禁止includePadding时, TextView实际占据高度是 (ascent - descent) / UPM * textSize</strong></p>\n<p><strong>开启includePadding时, TextView实际占据高度是 (top - bottom) / UPM * textSize</strong></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.jianshu.com/p/1728b725b4a6\" target=\"_blank\" rel=\"noopener\">Paint 绘制文字属性</a><br><a href=\"https://neutra.github.io/2016/TextView%E6%96%87%E5%AD%97%E5%AE%9E%E9%99%85%E9%AB%98%E5%BA%A6%E5%88%86%E6%9E%90/\" target=\"_blank\" rel=\"noopener\">TextView文字实际高度分析</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Text相关计算\"><a href=\"#Text相关计算\" class=\"headerlink\" title=\"Text相关计算\"></a>Text相关计算</h1><h2 id=\"Text的相关属性\"><a href=\"#Text的相关属性\" class=\"headerlink\" title=\"Text的相关属性\"></a>Text的相关属性</h2><p><img src=\"/images/Text相关计算\" alt=\"图片\"></p>\n<p>Baseline上方的值为正，下方的值为负</p>\n<h2 id=\"TextSize和TextView大小的转换\"><a href=\"#TextSize和TextView大小的转换\" class=\"headerlink\" title=\"TextSize和TextView大小的转换\"></a>TextSize和TextView大小的转换</h2><p>相关参数包括：</p>\n<ul>\n<li><p>所使用字体(fallback的话不影响)的UPM(Units Per EM)</p>\n</li>\n<li><p>ascent/descent属性</p>\n</li>\n<li><p>top/bottom参数</p>\n</li>\n</ul>\n<p><strong>禁止includePadding时, TextView实际占据高度是 (ascent - descent) / UPM * textSize</strong></p>\n<p><strong>开启includePadding时, TextView实际占据高度是 (top - bottom) / UPM * textSize</strong></p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://www.jianshu.com/p/1728b725b4a6\" target=\"_blank\" rel=\"noopener\">Paint 绘制文字属性</a><br><a href=\"https://neutra.github.io/2016/TextView%E6%96%87%E5%AD%97%E5%AE%9E%E9%99%85%E9%AB%98%E5%BA%A6%E5%88%86%E6%9E%90/\" target=\"_blank\" rel=\"noopener\">TextView文字实际高度分析</a></p>\n"},{"title":"RecyclerView设置item的间距","date":"2019-07-09T09:29:55.000Z","_content":"\n# RecyclerView设置item的间距\n\n## 关于GridLayoutManager\n\n当一个RecyclerView设置了一个GridLayoutManager(this,count)，并且count为4的时候，**实际上就是将屏幕均分为四份，每一份都是180px宽**（以720px为例，我们只考虑左右，暂不考虑上下，原理是相同的），如果不设置ItemDecoration，那么默认item由左开始布置。\n\n## 自定义ItemDecoration\n\n### getItemOffsets方法\n\n设置ItemView的内嵌偏移长度\n\nItemView 外面会包裹着一个矩形（outRect）\n内嵌偏移长度 是指：该矩形（outRect）与 ItemView的间隔\n相当于为item添加了padding\n\n**常用的getItemOffsets的计算**\n\n```java\n// 是item在GridLayoutManager中居中显示，并且item之间的间距，每列第一个item和每列最后一个item到recyclerview边界的距离都相等\npublic class EmojiItemDecoration extends RecyclerView.ItemDecoration {\n\n    private int mNumColumn;\n    private int mVerticalSpacing;\n    private int mItemWidth;\n    private int mItemHorizontalSpacing;\n    private boolean mInitSpacing = false;\n\n    public EmojiItemDecoration(int column, int itemWidth, int verticalSpacing) {\n        mNumColumn = column;\n        mItemWidth = itemWidth;\n        mVerticalSpacing = verticalSpacing;\n    }\n\n    @Override public void getItemOffsets(Rect outRect, View view, RecyclerView parent, RecyclerView.State state) {\n\n        if (!mInitSpacing) {\n            mInitSpacing = true;\n            int parentWidth = parent.getWidth();\n\n            mItemHorizontalSpacing = (parentWidth - parent.getPaddingLeft() - parent.getPaddingRight() - mItemWidth * mNumColumn) / (mNumColumn + 1);\n        }\n        int position = parent.getChildAdapterPosition(view);\n        int column = position % mNumColumn;\n\n        outRect.left = (mNumColumn - column) * mItemHorizontalSpacing / mNumColumn;\n        outRect.right = (column + 1) * mItemHorizontalSpacing / mNumColumn;\n        \n\n        if (position < mNumColumn) {\n            outRect.top = Dimensions.pxFromDp(12);\n        }\n\n        if (position >= mNumColumn) {\n            outRect.top = mVerticalSpacing;\n        }\n    }\n}\n```\n\n","source":"_posts/Android/RecyclerView设置item的间距.md","raw":"---\ntitle: RecyclerView设置item的间距\ndate: 2019-07-09 17:29:55\ntags:\n- View\n- RecyclerView\ncategories:\n- Android\n---\n\n# RecyclerView设置item的间距\n\n## 关于GridLayoutManager\n\n当一个RecyclerView设置了一个GridLayoutManager(this,count)，并且count为4的时候，**实际上就是将屏幕均分为四份，每一份都是180px宽**（以720px为例，我们只考虑左右，暂不考虑上下，原理是相同的），如果不设置ItemDecoration，那么默认item由左开始布置。\n\n## 自定义ItemDecoration\n\n### getItemOffsets方法\n\n设置ItemView的内嵌偏移长度\n\nItemView 外面会包裹着一个矩形（outRect）\n内嵌偏移长度 是指：该矩形（outRect）与 ItemView的间隔\n相当于为item添加了padding\n\n**常用的getItemOffsets的计算**\n\n```java\n// 是item在GridLayoutManager中居中显示，并且item之间的间距，每列第一个item和每列最后一个item到recyclerview边界的距离都相等\npublic class EmojiItemDecoration extends RecyclerView.ItemDecoration {\n\n    private int mNumColumn;\n    private int mVerticalSpacing;\n    private int mItemWidth;\n    private int mItemHorizontalSpacing;\n    private boolean mInitSpacing = false;\n\n    public EmojiItemDecoration(int column, int itemWidth, int verticalSpacing) {\n        mNumColumn = column;\n        mItemWidth = itemWidth;\n        mVerticalSpacing = verticalSpacing;\n    }\n\n    @Override public void getItemOffsets(Rect outRect, View view, RecyclerView parent, RecyclerView.State state) {\n\n        if (!mInitSpacing) {\n            mInitSpacing = true;\n            int parentWidth = parent.getWidth();\n\n            mItemHorizontalSpacing = (parentWidth - parent.getPaddingLeft() - parent.getPaddingRight() - mItemWidth * mNumColumn) / (mNumColumn + 1);\n        }\n        int position = parent.getChildAdapterPosition(view);\n        int column = position % mNumColumn;\n\n        outRect.left = (mNumColumn - column) * mItemHorizontalSpacing / mNumColumn;\n        outRect.right = (column + 1) * mItemHorizontalSpacing / mNumColumn;\n        \n\n        if (position < mNumColumn) {\n            outRect.top = Dimensions.pxFromDp(12);\n        }\n\n        if (position >= mNumColumn) {\n            outRect.top = mVerticalSpacing;\n        }\n    }\n}\n```\n\n","slug":"Android/RecyclerView设置item的间距","published":1,"updated":"2019-07-10T07:00:36.563Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy9jfv1w000h48zm6nw5uael","content":"<h1 id=\"RecyclerView设置item的间距\"><a href=\"#RecyclerView设置item的间距\" class=\"headerlink\" title=\"RecyclerView设置item的间距\"></a>RecyclerView设置item的间距</h1><h2 id=\"关于GridLayoutManager\"><a href=\"#关于GridLayoutManager\" class=\"headerlink\" title=\"关于GridLayoutManager\"></a>关于GridLayoutManager</h2><p>当一个RecyclerView设置了一个GridLayoutManager(this,count)，并且count为4的时候，<strong>实际上就是将屏幕均分为四份，每一份都是180px宽</strong>（以720px为例，我们只考虑左右，暂不考虑上下，原理是相同的），如果不设置ItemDecoration，那么默认item由左开始布置。</p>\n<h2 id=\"自定义ItemDecoration\"><a href=\"#自定义ItemDecoration\" class=\"headerlink\" title=\"自定义ItemDecoration\"></a>自定义ItemDecoration</h2><h3 id=\"getItemOffsets方法\"><a href=\"#getItemOffsets方法\" class=\"headerlink\" title=\"getItemOffsets方法\"></a>getItemOffsets方法</h3><p>设置ItemView的内嵌偏移长度</p>\n<p>ItemView 外面会包裹着一个矩形（outRect）<br>内嵌偏移长度 是指：该矩形（outRect）与 ItemView的间隔<br>相当于为item添加了padding</p>\n<p><strong>常用的getItemOffsets的计算</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 是item在GridLayoutManager中居中显示，并且item之间的间距，每列第一个item和每列最后一个item到recyclerview边界的距离都相等</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmojiItemDecoration</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">ItemDecoration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mNumColumn;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mVerticalSpacing;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mItemWidth;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mItemHorizontalSpacing;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> mInitSpacing = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">EmojiItemDecoration</span><span class=\"params\">(<span class=\"keyword\">int</span> column, <span class=\"keyword\">int</span> itemWidth, <span class=\"keyword\">int</span> verticalSpacing)</span> </span>&#123;</span><br><span class=\"line\">        mNumColumn = column;</span><br><span class=\"line\">        mItemWidth = itemWidth;</span><br><span class=\"line\">        mVerticalSpacing = verticalSpacing;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getItemOffsets</span><span class=\"params\">(Rect outRect, View view, RecyclerView parent, RecyclerView.State state)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!mInitSpacing) &#123;</span><br><span class=\"line\">            mInitSpacing = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> parentWidth = parent.getWidth();</span><br><span class=\"line\"></span><br><span class=\"line\">            mItemHorizontalSpacing = (parentWidth - parent.getPaddingLeft() - parent.getPaddingRight() - mItemWidth * mNumColumn) / (mNumColumn + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> position = parent.getChildAdapterPosition(view);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> column = position % mNumColumn;</span><br><span class=\"line\"></span><br><span class=\"line\">        outRect.left = (mNumColumn - column) * mItemHorizontalSpacing / mNumColumn;</span><br><span class=\"line\">        outRect.right = (column + <span class=\"number\">1</span>) * mItemHorizontalSpacing / mNumColumn;</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (position &lt; mNumColumn) &#123;</span><br><span class=\"line\">            outRect.top = Dimensions.pxFromDp(<span class=\"number\">12</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (position &gt;= mNumColumn) &#123;</span><br><span class=\"line\">            outRect.top = mVerticalSpacing;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"RecyclerView设置item的间距\"><a href=\"#RecyclerView设置item的间距\" class=\"headerlink\" title=\"RecyclerView设置item的间距\"></a>RecyclerView设置item的间距</h1><h2 id=\"关于GridLayoutManager\"><a href=\"#关于GridLayoutManager\" class=\"headerlink\" title=\"关于GridLayoutManager\"></a>关于GridLayoutManager</h2><p>当一个RecyclerView设置了一个GridLayoutManager(this,count)，并且count为4的时候，<strong>实际上就是将屏幕均分为四份，每一份都是180px宽</strong>（以720px为例，我们只考虑左右，暂不考虑上下，原理是相同的），如果不设置ItemDecoration，那么默认item由左开始布置。</p>\n<h2 id=\"自定义ItemDecoration\"><a href=\"#自定义ItemDecoration\" class=\"headerlink\" title=\"自定义ItemDecoration\"></a>自定义ItemDecoration</h2><h3 id=\"getItemOffsets方法\"><a href=\"#getItemOffsets方法\" class=\"headerlink\" title=\"getItemOffsets方法\"></a>getItemOffsets方法</h3><p>设置ItemView的内嵌偏移长度</p>\n<p>ItemView 外面会包裹着一个矩形（outRect）<br>内嵌偏移长度 是指：该矩形（outRect）与 ItemView的间隔<br>相当于为item添加了padding</p>\n<p><strong>常用的getItemOffsets的计算</strong></p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 是item在GridLayoutManager中居中显示，并且item之间的间距，每列第一个item和每列最后一个item到recyclerview边界的距离都相等</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">EmojiItemDecoration</span> <span class=\"keyword\">extends</span> <span class=\"title\">RecyclerView</span>.<span class=\"title\">ItemDecoration</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mNumColumn;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mVerticalSpacing;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mItemWidth;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mItemHorizontalSpacing;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> mInitSpacing = <span class=\"keyword\">false</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">EmojiItemDecoration</span><span class=\"params\">(<span class=\"keyword\">int</span> column, <span class=\"keyword\">int</span> itemWidth, <span class=\"keyword\">int</span> verticalSpacing)</span> </span>&#123;</span><br><span class=\"line\">        mNumColumn = column;</span><br><span class=\"line\">        mItemWidth = itemWidth;</span><br><span class=\"line\">        mVerticalSpacing = verticalSpacing;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">getItemOffsets</span><span class=\"params\">(Rect outRect, View view, RecyclerView parent, RecyclerView.State state)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!mInitSpacing) &#123;</span><br><span class=\"line\">            mInitSpacing = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> parentWidth = parent.getWidth();</span><br><span class=\"line\"></span><br><span class=\"line\">            mItemHorizontalSpacing = (parentWidth - parent.getPaddingLeft() - parent.getPaddingRight() - mItemWidth * mNumColumn) / (mNumColumn + <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> position = parent.getChildAdapterPosition(view);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> column = position % mNumColumn;</span><br><span class=\"line\"></span><br><span class=\"line\">        outRect.left = (mNumColumn - column) * mItemHorizontalSpacing / mNumColumn;</span><br><span class=\"line\">        outRect.right = (column + <span class=\"number\">1</span>) * mItemHorizontalSpacing / mNumColumn;</span><br><span class=\"line\">        </span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (position &lt; mNumColumn) &#123;</span><br><span class=\"line\">            outRect.top = Dimensions.pxFromDp(<span class=\"number\">12</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (position &gt;= mNumColumn) &#123;</span><br><span class=\"line\">            outRect.top = mVerticalSpacing;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"Android-Studio解决依赖冲突","date":"2019-04-14T11:40:23.000Z","_content":"\n# Android-Studio解决依赖冲突\n\n我们做android项目通常会引入很多第三方库， 有时候不同的第三方库会出现依赖冲突，导致添加依赖后就android-studio就报错。\n做项目是要添加glide库，直接添加最新版本 4.8，《第一行代码》中介绍使用的版本是3.7。 结果就是4.8的版本一添加依赖就报错，在build.gradle文件中报错buildtool版本冲突。我在网上找到了如下的文章，解决方法是一样的，做一个笔记。**需要说明的 glide4.+ 的版本和 3.+ 的版本，提供的api接口的操作形式发生了变化，而且google上搜到说版本升级之后其实性能没有多大提升**\n\n原文：\n<https://blog.csdn.net/victor888886/article/details/73714141>\n\n**以下是网上的文章内容：**\n最近刚接手一个项目，里面模块有三四个，引入的第三方包更多了。但是问题来了，新配置的studio一运行就报了错。\n\n    Error:Execution failed for task ':app:processDebugManifest'.\n    \n\n> Manifest merger failed : Attribute meta-data#android.support.VERSION@value value=(25.3.1) from \\[com.android.support:design:25.3.1\\] AndroidManifest.xml:27:9-31  \n> is also present at \\[com.android.support:support-v4:26.0.0-alpha1\\] AndroidManifest.xml:27:9-38 value=(26.0.0-alpha1).  \n> Suggestion: add ‘tools:replace=”android:value”’ to element at AndroidManifest.xml:25:5-27:34 to override.  \n\n可以看到，studio已经明确的指出了错误，在清单文件中Android support 库版本冲突了，而且，studio还很“人性”地给出了suggestion：清单文件25行——27行添加：\n\n    tools:replace=\"android:value\"\n\n坑就坑在这里，给出的建议完全误导人了。咳咳，下面看我详（如）细（何）解（装）释（逼）：\n\n#### 问题分析：\n\n    看到com.android.support:design:25.3.1 和\n    com.android.support:support-v4:26.0.0-alpha1，\n    说明这个Android support库版本冲突了，解决的思想很简单，就是统一使用同一个版本的support库，比如修改掉26.0.0-alpha1的依赖，统一换成25.3.1的版本。\n    \n\n### 解决\n\n    既然有了思路，那就动手试一试，全局搜索26.0.0-alpha1，统一替换为 25.3.1\n    正常情况下，这个是能解决问题的，但只能解决gradle里面自己引入的依赖版本问题。然而，今天碰到的坑还没完呢，同步代码以后，还是原来的错误信息！\n    \n\n### 再次分析：\n\n    问题就出在第三方库的依赖了，好多第三方库默认引用当前最新的support库，现在最新的就是26.0.0-alpha1这个版本。所以，要解决问题，就要从引入的三方库里面入手了！那么问题来了，挖掘机哪家......哦不，怎么知道哪个依赖包有冲突？下面出杀手锏了：\n    打开Android studio下面的terminal，输入命令：`gradle -q app:dependencies`,惊喜出现了：没有配置gradle环境变量的同学赶快去配一个吧！..\n    **（这里不需要配置gradle环境变量也可以，在terminal中输入命令：./gradlew -q app:dependencies效果是一样的）**\n    配过之后可以看到类似一下的输出：\n    \n\n+— project :base-util  \n| +— com.android.support:recyclerview-v7:25.3.1 (*)  \n| +— cn.qqtheme.framework:WheelPicker:1.5.1  \n| | +— cn.qqtheme.framework:Common:1.5.1  \n| | | +— com.android.support:support-v4:latest.release -> 26.0.0-alpha1 (*)  \n| | | — com.android.support:support-annotations:latest.release -> 26.0.0-alpha1  \n| | +— com.android.support:support-v4:latest.release -> 26.0.0-alpha1 (*)  \n| | — com.android.support:support-annotations:latest.release -> 26.0.0-alpha1  \n| +— com.github.CymChad:BaseRecyclerViewAdapterHelper:v1.9.8  \n| +— io.reactivex:rxjava:1.1.8  \n| +— io.reactivex:rxandroid:1.1.0  \n| | — io.reactivex:rxjava:1.1.0 -> 1.1.8  \n| +— com.squareup.okhttp3:okhttp:3.2.0 -> 3.4.1  \n| | — com.squareup.okio:okio:1.9.0  \n| +— com.squareup.retrofit2:retrofit:2.0.2  \n| | — com.squareup.okhttp3:okhttp:3.2.0 -> 3.4.1 (*)  \n| +— com.squareup.retrofit2:adapter-rxjava:2.0.2  \n| | +— com.squareup.retrofit2:retrofit:2.0.2 (*)  \n| | — io.reactivex:rxjava:1.1.1 -> 1.1.8  \n| +— com.squareup.retrofit2:converter-gson:2.0.2  \n| | +— com.squareup.retrofit2:retrofit:2.0.2 (*)  \n| | — com.google.code.gson:gson:2.6.1  \n| +— com.squareup.okhttp3:logging-interceptor:3.4.1  \n| | — com.squareup.okhttp3:okhttp:3.4.1 (*)  \n| +— com.github.zhaokaiqiang.klog:library:1.5.0  \n| | — com.android.support:support-annotations:23.4.0 -> 26.0.0-alpha1  \n| +— com.squareup.retrofit2:converter-simplexml:2.0.2  \n| | +— com.squareup.retrofit2:retrofit:2.0.2 (*)  \n| | — org.simpleframework:simple-xml:2.7.1  \n| +— com.github.bumptech.glide:glide:3.7.0  \n| +— project :base-res (*)  \n| — com.jakewharton:butterknife:7.0.1\n\n很明显cn.qqtheme.framework:WheelPicker这个包默认引用了最新的support库！\n\n### 最终解决：\n\n找到依赖的库，修改为下面的方式引入：\n\n    compile ('cn.qqtheme.framework:WheelPicker:1.5.1'){\n            exclude group:'com.android.support'\n        }\n\n","source":"_posts/Android/Android-Studio解决依赖冲突.md","raw":"---\ntitle: Android-Studio解决依赖冲突\ndate: 2019-04-14 19:40:23\ntags:\n- AndroidStudio\ncategories:\n- Android\n- AndroidStudio\n---\n\n# Android-Studio解决依赖冲突\n\n我们做android项目通常会引入很多第三方库， 有时候不同的第三方库会出现依赖冲突，导致添加依赖后就android-studio就报错。\n做项目是要添加glide库，直接添加最新版本 4.8，《第一行代码》中介绍使用的版本是3.7。 结果就是4.8的版本一添加依赖就报错，在build.gradle文件中报错buildtool版本冲突。我在网上找到了如下的文章，解决方法是一样的，做一个笔记。**需要说明的 glide4.+ 的版本和 3.+ 的版本，提供的api接口的操作形式发生了变化，而且google上搜到说版本升级之后其实性能没有多大提升**\n\n原文：\n<https://blog.csdn.net/victor888886/article/details/73714141>\n\n**以下是网上的文章内容：**\n最近刚接手一个项目，里面模块有三四个，引入的第三方包更多了。但是问题来了，新配置的studio一运行就报了错。\n\n    Error:Execution failed for task ':app:processDebugManifest'.\n    \n\n> Manifest merger failed : Attribute meta-data#android.support.VERSION@value value=(25.3.1) from \\[com.android.support:design:25.3.1\\] AndroidManifest.xml:27:9-31  \n> is also present at \\[com.android.support:support-v4:26.0.0-alpha1\\] AndroidManifest.xml:27:9-38 value=(26.0.0-alpha1).  \n> Suggestion: add ‘tools:replace=”android:value”’ to element at AndroidManifest.xml:25:5-27:34 to override.  \n\n可以看到，studio已经明确的指出了错误，在清单文件中Android support 库版本冲突了，而且，studio还很“人性”地给出了suggestion：清单文件25行——27行添加：\n\n    tools:replace=\"android:value\"\n\n坑就坑在这里，给出的建议完全误导人了。咳咳，下面看我详（如）细（何）解（装）释（逼）：\n\n#### 问题分析：\n\n    看到com.android.support:design:25.3.1 和\n    com.android.support:support-v4:26.0.0-alpha1，\n    说明这个Android support库版本冲突了，解决的思想很简单，就是统一使用同一个版本的support库，比如修改掉26.0.0-alpha1的依赖，统一换成25.3.1的版本。\n    \n\n### 解决\n\n    既然有了思路，那就动手试一试，全局搜索26.0.0-alpha1，统一替换为 25.3.1\n    正常情况下，这个是能解决问题的，但只能解决gradle里面自己引入的依赖版本问题。然而，今天碰到的坑还没完呢，同步代码以后，还是原来的错误信息！\n    \n\n### 再次分析：\n\n    问题就出在第三方库的依赖了，好多第三方库默认引用当前最新的support库，现在最新的就是26.0.0-alpha1这个版本。所以，要解决问题，就要从引入的三方库里面入手了！那么问题来了，挖掘机哪家......哦不，怎么知道哪个依赖包有冲突？下面出杀手锏了：\n    打开Android studio下面的terminal，输入命令：`gradle -q app:dependencies`,惊喜出现了：没有配置gradle环境变量的同学赶快去配一个吧！..\n    **（这里不需要配置gradle环境变量也可以，在terminal中输入命令：./gradlew -q app:dependencies效果是一样的）**\n    配过之后可以看到类似一下的输出：\n    \n\n+— project :base-util  \n| +— com.android.support:recyclerview-v7:25.3.1 (*)  \n| +— cn.qqtheme.framework:WheelPicker:1.5.1  \n| | +— cn.qqtheme.framework:Common:1.5.1  \n| | | +— com.android.support:support-v4:latest.release -> 26.0.0-alpha1 (*)  \n| | | — com.android.support:support-annotations:latest.release -> 26.0.0-alpha1  \n| | +— com.android.support:support-v4:latest.release -> 26.0.0-alpha1 (*)  \n| | — com.android.support:support-annotations:latest.release -> 26.0.0-alpha1  \n| +— com.github.CymChad:BaseRecyclerViewAdapterHelper:v1.9.8  \n| +— io.reactivex:rxjava:1.1.8  \n| +— io.reactivex:rxandroid:1.1.0  \n| | — io.reactivex:rxjava:1.1.0 -> 1.1.8  \n| +— com.squareup.okhttp3:okhttp:3.2.0 -> 3.4.1  \n| | — com.squareup.okio:okio:1.9.0  \n| +— com.squareup.retrofit2:retrofit:2.0.2  \n| | — com.squareup.okhttp3:okhttp:3.2.0 -> 3.4.1 (*)  \n| +— com.squareup.retrofit2:adapter-rxjava:2.0.2  \n| | +— com.squareup.retrofit2:retrofit:2.0.2 (*)  \n| | — io.reactivex:rxjava:1.1.1 -> 1.1.8  \n| +— com.squareup.retrofit2:converter-gson:2.0.2  \n| | +— com.squareup.retrofit2:retrofit:2.0.2 (*)  \n| | — com.google.code.gson:gson:2.6.1  \n| +— com.squareup.okhttp3:logging-interceptor:3.4.1  \n| | — com.squareup.okhttp3:okhttp:3.4.1 (*)  \n| +— com.github.zhaokaiqiang.klog:library:1.5.0  \n| | — com.android.support:support-annotations:23.4.0 -> 26.0.0-alpha1  \n| +— com.squareup.retrofit2:converter-simplexml:2.0.2  \n| | +— com.squareup.retrofit2:retrofit:2.0.2 (*)  \n| | — org.simpleframework:simple-xml:2.7.1  \n| +— com.github.bumptech.glide:glide:3.7.0  \n| +— project :base-res (*)  \n| — com.jakewharton:butterknife:7.0.1\n\n很明显cn.qqtheme.framework:WheelPicker这个包默认引用了最新的support库！\n\n### 最终解决：\n\n找到依赖的库，修改为下面的方式引入：\n\n    compile ('cn.qqtheme.framework:WheelPicker:1.5.1'){\n            exclude group:'com.android.support'\n        }\n\n","slug":"Android/Android-Studio解决依赖冲突","published":1,"updated":"2019-04-14T12:16:21.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy9jfv1y000l48zm4odzdkmw","content":"<h1 id=\"Android-Studio解决依赖冲突\"><a href=\"#Android-Studio解决依赖冲突\" class=\"headerlink\" title=\"Android-Studio解决依赖冲突\"></a>Android-Studio解决依赖冲突</h1><p>我们做android项目通常会引入很多第三方库， 有时候不同的第三方库会出现依赖冲突，导致添加依赖后就android-studio就报错。<br>做项目是要添加glide库，直接添加最新版本 4.8，《第一行代码》中介绍使用的版本是3.7。 结果就是4.8的版本一添加依赖就报错，在build.gradle文件中报错buildtool版本冲突。我在网上找到了如下的文章，解决方法是一样的，做一个笔记。<strong>需要说明的 glide4.+ 的版本和 3.+ 的版本，提供的api接口的操作形式发生了变化，而且google上搜到说版本升级之后其实性能没有多大提升</strong></p>\n<p>原文：<br><a href=\"https://blog.csdn.net/victor888886/article/details/73714141\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/victor888886/article/details/73714141</a></p>\n<p><strong>以下是网上的文章内容：</strong><br>最近刚接手一个项目，里面模块有三四个，引入的第三方包更多了。但是问题来了，新配置的studio一运行就报了错。</p>\n<pre><code>Error:Execution failed for task &apos;:app:processDebugManifest&apos;.\n</code></pre><blockquote>\n<p>Manifest merger failed : Attribute meta-data#android.support.VERSION@value value=(25.3.1) from [com.android.support:design:25.3.1] AndroidManifest.xml:27:9-31<br>is also present at [com.android.support:support-v4:26.0.0-alpha1] AndroidManifest.xml:27:9-38 value=(26.0.0-alpha1).<br>Suggestion: add ‘tools:replace=”android:value”’ to element at AndroidManifest.xml:25:5-27:34 to override.  </p>\n</blockquote>\n<p>可以看到，studio已经明确的指出了错误，在清单文件中Android support 库版本冲突了，而且，studio还很“人性”地给出了suggestion：清单文件25行——27行添加：</p>\n<pre><code>tools:replace=&quot;android:value&quot;\n</code></pre><p>坑就坑在这里，给出的建议完全误导人了。咳咳，下面看我详（如）细（何）解（装）释（逼）：</p>\n<h4 id=\"问题分析：\"><a href=\"#问题分析：\" class=\"headerlink\" title=\"问题分析：\"></a>问题分析：</h4><pre><code>看到com.android.support:design:25.3.1 和\ncom.android.support:support-v4:26.0.0-alpha1，\n说明这个Android support库版本冲突了，解决的思想很简单，就是统一使用同一个版本的support库，比如修改掉26.0.0-alpha1的依赖，统一换成25.3.1的版本。\n</code></pre><h3 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h3><pre><code>既然有了思路，那就动手试一试，全局搜索26.0.0-alpha1，统一替换为 25.3.1\n正常情况下，这个是能解决问题的，但只能解决gradle里面自己引入的依赖版本问题。然而，今天碰到的坑还没完呢，同步代码以后，还是原来的错误信息！\n</code></pre><h3 id=\"再次分析：\"><a href=\"#再次分析：\" class=\"headerlink\" title=\"再次分析：\"></a>再次分析：</h3><pre><code>问题就出在第三方库的依赖了，好多第三方库默认引用当前最新的support库，现在最新的就是26.0.0-alpha1这个版本。所以，要解决问题，就要从引入的三方库里面入手了！那么问题来了，挖掘机哪家......哦不，怎么知道哪个依赖包有冲突？下面出杀手锏了：\n打开Android studio下面的terminal，输入命令：`gradle -q app:dependencies`,惊喜出现了：没有配置gradle环境变量的同学赶快去配一个吧！..\n**（这里不需要配置gradle环境变量也可以，在terminal中输入命令：./gradlew -q app:dependencies效果是一样的）**\n配过之后可以看到类似一下的输出：\n</code></pre><p>+— project :base-util<br>| +— com.android.support:recyclerview-v7:25.3.1 (<em>)<br>| +— cn.qqtheme.framework:WheelPicker:1.5.1<br>| | +— cn.qqtheme.framework:Common:1.5.1<br>| | | +— com.android.support:support-v4:latest.release -&gt; 26.0.0-alpha1 (</em>)<br>| | | — com.android.support:support-annotations:latest.release -&gt; 26.0.0-alpha1<br>| | +— com.android.support:support-v4:latest.release -&gt; 26.0.0-alpha1 (<em>)<br>| | — com.android.support:support-annotations:latest.release -&gt; 26.0.0-alpha1<br>| +— com.github.CymChad:BaseRecyclerViewAdapterHelper:v1.9.8<br>| +— io.reactivex:rxjava:1.1.8<br>| +— io.reactivex:rxandroid:1.1.0<br>| | — io.reactivex:rxjava:1.1.0 -&gt; 1.1.8<br>| +— com.squareup.okhttp3:okhttp:3.2.0 -&gt; 3.4.1<br>| | — com.squareup.okio:okio:1.9.0<br>| +— com.squareup.retrofit2:retrofit:2.0.2<br>| | — com.squareup.okhttp3:okhttp:3.2.0 -&gt; 3.4.1 (</em>)<br>| +— com.squareup.retrofit2:adapter-rxjava:2.0.2<br>| | +— com.squareup.retrofit2:retrofit:2.0.2 (<em>)<br>| | — io.reactivex:rxjava:1.1.1 -&gt; 1.1.8<br>| +— com.squareup.retrofit2:converter-gson:2.0.2<br>| | +— com.squareup.retrofit2:retrofit:2.0.2 (</em>)<br>| | — com.google.code.gson:gson:2.6.1<br>| +— com.squareup.okhttp3:logging-interceptor:3.4.1<br>| | — com.squareup.okhttp3:okhttp:3.4.1 (<em>)<br>| +— com.github.zhaokaiqiang.klog:library:1.5.0<br>| | — com.android.support:support-annotations:23.4.0 -&gt; 26.0.0-alpha1<br>| +— com.squareup.retrofit2:converter-simplexml:2.0.2<br>| | +— com.squareup.retrofit2:retrofit:2.0.2 (</em>)<br>| | — org.simpleframework:simple-xml:2.7.1<br>| +— com.github.bumptech.glide:glide:3.7.0<br>| +— project :base-res (*)<br>| — com.jakewharton:butterknife:7.0.1</p>\n<p>很明显cn.qqtheme.framework:WheelPicker这个包默认引用了最新的support库！</p>\n<h3 id=\"最终解决：\"><a href=\"#最终解决：\" class=\"headerlink\" title=\"最终解决：\"></a>最终解决：</h3><p>找到依赖的库，修改为下面的方式引入：</p>\n<pre><code>compile (&apos;cn.qqtheme.framework:WheelPicker:1.5.1&apos;){\n        exclude group:&apos;com.android.support&apos;\n    }\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Android-Studio解决依赖冲突\"><a href=\"#Android-Studio解决依赖冲突\" class=\"headerlink\" title=\"Android-Studio解决依赖冲突\"></a>Android-Studio解决依赖冲突</h1><p>我们做android项目通常会引入很多第三方库， 有时候不同的第三方库会出现依赖冲突，导致添加依赖后就android-studio就报错。<br>做项目是要添加glide库，直接添加最新版本 4.8，《第一行代码》中介绍使用的版本是3.7。 结果就是4.8的版本一添加依赖就报错，在build.gradle文件中报错buildtool版本冲突。我在网上找到了如下的文章，解决方法是一样的，做一个笔记。<strong>需要说明的 glide4.+ 的版本和 3.+ 的版本，提供的api接口的操作形式发生了变化，而且google上搜到说版本升级之后其实性能没有多大提升</strong></p>\n<p>原文：<br><a href=\"https://blog.csdn.net/victor888886/article/details/73714141\" target=\"_blank\" rel=\"noopener\">https://blog.csdn.net/victor888886/article/details/73714141</a></p>\n<p><strong>以下是网上的文章内容：</strong><br>最近刚接手一个项目，里面模块有三四个，引入的第三方包更多了。但是问题来了，新配置的studio一运行就报了错。</p>\n<pre><code>Error:Execution failed for task &apos;:app:processDebugManifest&apos;.\n</code></pre><blockquote>\n<p>Manifest merger failed : Attribute meta-data#android.support.VERSION@value value=(25.3.1) from [com.android.support:design:25.3.1] AndroidManifest.xml:27:9-31<br>is also present at [com.android.support:support-v4:26.0.0-alpha1] AndroidManifest.xml:27:9-38 value=(26.0.0-alpha1).<br>Suggestion: add ‘tools:replace=”android:value”’ to element at AndroidManifest.xml:25:5-27:34 to override.  </p>\n</blockquote>\n<p>可以看到，studio已经明确的指出了错误，在清单文件中Android support 库版本冲突了，而且，studio还很“人性”地给出了suggestion：清单文件25行——27行添加：</p>\n<pre><code>tools:replace=&quot;android:value&quot;\n</code></pre><p>坑就坑在这里，给出的建议完全误导人了。咳咳，下面看我详（如）细（何）解（装）释（逼）：</p>\n<h4 id=\"问题分析：\"><a href=\"#问题分析：\" class=\"headerlink\" title=\"问题分析：\"></a>问题分析：</h4><pre><code>看到com.android.support:design:25.3.1 和\ncom.android.support:support-v4:26.0.0-alpha1，\n说明这个Android support库版本冲突了，解决的思想很简单，就是统一使用同一个版本的support库，比如修改掉26.0.0-alpha1的依赖，统一换成25.3.1的版本。\n</code></pre><h3 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h3><pre><code>既然有了思路，那就动手试一试，全局搜索26.0.0-alpha1，统一替换为 25.3.1\n正常情况下，这个是能解决问题的，但只能解决gradle里面自己引入的依赖版本问题。然而，今天碰到的坑还没完呢，同步代码以后，还是原来的错误信息！\n</code></pre><h3 id=\"再次分析：\"><a href=\"#再次分析：\" class=\"headerlink\" title=\"再次分析：\"></a>再次分析：</h3><pre><code>问题就出在第三方库的依赖了，好多第三方库默认引用当前最新的support库，现在最新的就是26.0.0-alpha1这个版本。所以，要解决问题，就要从引入的三方库里面入手了！那么问题来了，挖掘机哪家......哦不，怎么知道哪个依赖包有冲突？下面出杀手锏了：\n打开Android studio下面的terminal，输入命令：`gradle -q app:dependencies`,惊喜出现了：没有配置gradle环境变量的同学赶快去配一个吧！..\n**（这里不需要配置gradle环境变量也可以，在terminal中输入命令：./gradlew -q app:dependencies效果是一样的）**\n配过之后可以看到类似一下的输出：\n</code></pre><p>+— project :base-util<br>| +— com.android.support:recyclerview-v7:25.3.1 (<em>)<br>| +— cn.qqtheme.framework:WheelPicker:1.5.1<br>| | +— cn.qqtheme.framework:Common:1.5.1<br>| | | +— com.android.support:support-v4:latest.release -&gt; 26.0.0-alpha1 (</em>)<br>| | | — com.android.support:support-annotations:latest.release -&gt; 26.0.0-alpha1<br>| | +— com.android.support:support-v4:latest.release -&gt; 26.0.0-alpha1 (<em>)<br>| | — com.android.support:support-annotations:latest.release -&gt; 26.0.0-alpha1<br>| +— com.github.CymChad:BaseRecyclerViewAdapterHelper:v1.9.8<br>| +— io.reactivex:rxjava:1.1.8<br>| +— io.reactivex:rxandroid:1.1.0<br>| | — io.reactivex:rxjava:1.1.0 -&gt; 1.1.8<br>| +— com.squareup.okhttp3:okhttp:3.2.0 -&gt; 3.4.1<br>| | — com.squareup.okio:okio:1.9.0<br>| +— com.squareup.retrofit2:retrofit:2.0.2<br>| | — com.squareup.okhttp3:okhttp:3.2.0 -&gt; 3.4.1 (</em>)<br>| +— com.squareup.retrofit2:adapter-rxjava:2.0.2<br>| | +— com.squareup.retrofit2:retrofit:2.0.2 (<em>)<br>| | — io.reactivex:rxjava:1.1.1 -&gt; 1.1.8<br>| +— com.squareup.retrofit2:converter-gson:2.0.2<br>| | +— com.squareup.retrofit2:retrofit:2.0.2 (</em>)<br>| | — com.google.code.gson:gson:2.6.1<br>| +— com.squareup.okhttp3:logging-interceptor:3.4.1<br>| | — com.squareup.okhttp3:okhttp:3.4.1 (<em>)<br>| +— com.github.zhaokaiqiang.klog:library:1.5.0<br>| | — com.android.support:support-annotations:23.4.0 -&gt; 26.0.0-alpha1<br>| +— com.squareup.retrofit2:converter-simplexml:2.0.2<br>| | +— com.squareup.retrofit2:retrofit:2.0.2 (</em>)<br>| | — org.simpleframework:simple-xml:2.7.1<br>| +— com.github.bumptech.glide:glide:3.7.0<br>| +— project :base-res (*)<br>| — com.jakewharton:butterknife:7.0.1</p>\n<p>很明显cn.qqtheme.framework:WheelPicker这个包默认引用了最新的support库！</p>\n<h3 id=\"最终解决：\"><a href=\"#最终解决：\" class=\"headerlink\" title=\"最终解决：\"></a>最终解决：</h3><p>找到依赖的库，修改为下面的方式引入：</p>\n<pre><code>compile (&apos;cn.qqtheme.framework:WheelPicker:1.5.1&apos;){\n        exclude group:&apos;com.android.support&apos;\n    }\n</code></pre>"},{"title":"startService()和bindService()","date":"2019-07-04T12:37:58.000Z","_content":"\n# startService()和bindService()的区别\n\n![](/images/startService\\ and\\ bindService)\n\n### 生命周期上的差别\n#### startService()\n执行startService时，Service经历onCreate->onStartCommand。当执行stopService时，直接调用onDestroy方法。调用者如果没有stopService，Service会一直在后台运行，下次调用者再起来仍然可以stopService。\n\n多次调用startService，该Service只能被创建一次，即该Service的onCreate方法只会被调用一次。**但是每次调用startService，onStartCommand方法都会被调用。**无论startService调用多少次，stopService只需要调用一次就能够终止Service\n\n#### BindService()\nbindService开启服务时，根据生命周期里onBind方法的返回值是否为空，有两种情况。\n1. **onBind返回值是null**\n调用bindService开启服务，生命周期执行的方法依次是：\nonCreate() ==> onBind();\n**调用多次bindService，onCreate和onBind也只在第一次会被执行。调用unbindService结束服务，生命周期执行onDestroy方法，并且unbindService方法只能调用一次，多次调用应用会抛出异常。** 使用时也要注意调用unbindService一定要确保服务已经开启，否则应用会抛出异常。\n2. **onBind返回值不为null**\n这时候调用bindService开启服务，生命周期执行的方法依次是：\nonCreate() ==> onBind() ==> onServiceConnected();\n可以发现我们自己写的Connection类里的onServiceConnected方法被调用了。**调用多次bindService，onCreate和onBind都只在第一次会被执行，onServiceConnected会执行多次。**\n并且我们注意到onServiceConnected方法的第二个参数也是IBinder类型的，不难猜测onBind()方法返回的对象被传递到了这里。打印一下两个对象的地址可以证明猜测是正确的。\n也就是说我们可以在onServiceConnected方法里拿到了Service服务的内部类Binder的对象，通过这个内部类对象，只要强转一下，我们可以调用这个内部类的非私有成员对象和方法。\n调用unbindService结束服务和上面相同，unbindService只能调用一次，onDestroy也只执行一次，多次调用会抛出异常。\n<br>\n**总结**\n第一次执行bindService时，onCreate和onBind方法会被调用，但是多次执行bindService时，onCreate和onBind方法并不会被多次调用，即并不会多次创建服务和绑定服务。\n\n### 既使用startService又使用bindService的情况\n如果一个Service又被启动又被绑定，则该Service会一直在后台运行。首先不管如何调用，onCreate始终只会调用一次。对应startService调用多少次，Service的onStart方法便会调用多少次。Service的终止，需要unbindService和stopService同时调用才行。不管startService与bindService的调用顺序，如果先调用unbindService，此时服务不会自动终止，再调用stopService之后，服务才会终止；如果先调用stopService，此时服务也不会终止，而再调用unbindService或者之前调用bindService的Context不存在了（如Activity被finish的时候）之后，服务才会自动停止。\n\n参考链接:\n[https://my.oschina.net/tingzi/blog/376545]()\n[https://www.jianshu.com/p/d870f99b675c]()\n","source":"_posts/Android/startService-和bindService.md","raw":"---\ntitle: startService()和bindService()\ndate: 2019-07-04 20:37:58\ntags: \n- service\ncategories:\n- Android\n- service\n---\n\n# startService()和bindService()的区别\n\n![](/images/startService\\ and\\ bindService)\n\n### 生命周期上的差别\n#### startService()\n执行startService时，Service经历onCreate->onStartCommand。当执行stopService时，直接调用onDestroy方法。调用者如果没有stopService，Service会一直在后台运行，下次调用者再起来仍然可以stopService。\n\n多次调用startService，该Service只能被创建一次，即该Service的onCreate方法只会被调用一次。**但是每次调用startService，onStartCommand方法都会被调用。**无论startService调用多少次，stopService只需要调用一次就能够终止Service\n\n#### BindService()\nbindService开启服务时，根据生命周期里onBind方法的返回值是否为空，有两种情况。\n1. **onBind返回值是null**\n调用bindService开启服务，生命周期执行的方法依次是：\nonCreate() ==> onBind();\n**调用多次bindService，onCreate和onBind也只在第一次会被执行。调用unbindService结束服务，生命周期执行onDestroy方法，并且unbindService方法只能调用一次，多次调用应用会抛出异常。** 使用时也要注意调用unbindService一定要确保服务已经开启，否则应用会抛出异常。\n2. **onBind返回值不为null**\n这时候调用bindService开启服务，生命周期执行的方法依次是：\nonCreate() ==> onBind() ==> onServiceConnected();\n可以发现我们自己写的Connection类里的onServiceConnected方法被调用了。**调用多次bindService，onCreate和onBind都只在第一次会被执行，onServiceConnected会执行多次。**\n并且我们注意到onServiceConnected方法的第二个参数也是IBinder类型的，不难猜测onBind()方法返回的对象被传递到了这里。打印一下两个对象的地址可以证明猜测是正确的。\n也就是说我们可以在onServiceConnected方法里拿到了Service服务的内部类Binder的对象，通过这个内部类对象，只要强转一下，我们可以调用这个内部类的非私有成员对象和方法。\n调用unbindService结束服务和上面相同，unbindService只能调用一次，onDestroy也只执行一次，多次调用会抛出异常。\n<br>\n**总结**\n第一次执行bindService时，onCreate和onBind方法会被调用，但是多次执行bindService时，onCreate和onBind方法并不会被多次调用，即并不会多次创建服务和绑定服务。\n\n### 既使用startService又使用bindService的情况\n如果一个Service又被启动又被绑定，则该Service会一直在后台运行。首先不管如何调用，onCreate始终只会调用一次。对应startService调用多少次，Service的onStart方法便会调用多少次。Service的终止，需要unbindService和stopService同时调用才行。不管startService与bindService的调用顺序，如果先调用unbindService，此时服务不会自动终止，再调用stopService之后，服务才会终止；如果先调用stopService，此时服务也不会终止，而再调用unbindService或者之前调用bindService的Context不存在了（如Activity被finish的时候）之后，服务才会自动停止。\n\n参考链接:\n[https://my.oschina.net/tingzi/blog/376545]()\n[https://www.jianshu.com/p/d870f99b675c]()\n","slug":"Android/startService-和bindService","published":1,"updated":"2019-07-04T13:11:22.661Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy9jfv1z000o48zmi94xkluj","content":"<h1 id=\"startService-和bindService-的区别\"><a href=\"#startService-和bindService-的区别\" class=\"headerlink\" title=\"startService()和bindService()的区别\"></a>startService()和bindService()的区别</h1><p><img src=\"/images/startService\\ and\\ bindService\" alt></p>\n<h3 id=\"生命周期上的差别\"><a href=\"#生命周期上的差别\" class=\"headerlink\" title=\"生命周期上的差别\"></a>生命周期上的差别</h3><h4 id=\"startService\"><a href=\"#startService\" class=\"headerlink\" title=\"startService()\"></a>startService()</h4><p>执行startService时，Service经历onCreate-&gt;onStartCommand。当执行stopService时，直接调用onDestroy方法。调用者如果没有stopService，Service会一直在后台运行，下次调用者再起来仍然可以stopService。</p>\n<p>多次调用startService，该Service只能被创建一次，即该Service的onCreate方法只会被调用一次。<strong>但是每次调用startService，onStartCommand方法都会被调用。</strong>无论startService调用多少次，stopService只需要调用一次就能够终止Service</p>\n<h4 id=\"BindService\"><a href=\"#BindService\" class=\"headerlink\" title=\"BindService()\"></a>BindService()</h4><p>bindService开启服务时，根据生命周期里onBind方法的返回值是否为空，有两种情况。</p>\n<ol>\n<li><strong>onBind返回值是null</strong><br>调用bindService开启服务，生命周期执行的方法依次是：<br>onCreate() ==&gt; onBind();<br><strong>调用多次bindService，onCreate和onBind也只在第一次会被执行。调用unbindService结束服务，生命周期执行onDestroy方法，并且unbindService方法只能调用一次，多次调用应用会抛出异常。</strong> 使用时也要注意调用unbindService一定要确保服务已经开启，否则应用会抛出异常。</li>\n<li><strong>onBind返回值不为null</strong><br>这时候调用bindService开启服务，生命周期执行的方法依次是：<br>onCreate() ==&gt; onBind() ==&gt; onServiceConnected();<br>可以发现我们自己写的Connection类里的onServiceConnected方法被调用了。<strong>调用多次bindService，onCreate和onBind都只在第一次会被执行，onServiceConnected会执行多次。</strong><br>并且我们注意到onServiceConnected方法的第二个参数也是IBinder类型的，不难猜测onBind()方法返回的对象被传递到了这里。打印一下两个对象的地址可以证明猜测是正确的。<br>也就是说我们可以在onServiceConnected方法里拿到了Service服务的内部类Binder的对象，通过这个内部类对象，只要强转一下，我们可以调用这个内部类的非私有成员对象和方法。<br>调用unbindService结束服务和上面相同，unbindService只能调用一次，onDestroy也只执行一次，多次调用会抛出异常。<br><br><br><strong>总结</strong><br>第一次执行bindService时，onCreate和onBind方法会被调用，但是多次执行bindService时，onCreate和onBind方法并不会被多次调用，即并不会多次创建服务和绑定服务。</li>\n</ol>\n<h3 id=\"既使用startService又使用bindService的情况\"><a href=\"#既使用startService又使用bindService的情况\" class=\"headerlink\" title=\"既使用startService又使用bindService的情况\"></a>既使用startService又使用bindService的情况</h3><p>如果一个Service又被启动又被绑定，则该Service会一直在后台运行。首先不管如何调用，onCreate始终只会调用一次。对应startService调用多少次，Service的onStart方法便会调用多少次。Service的终止，需要unbindService和stopService同时调用才行。不管startService与bindService的调用顺序，如果先调用unbindService，此时服务不会自动终止，再调用stopService之后，服务才会终止；如果先调用stopService，此时服务也不会终止，而再调用unbindService或者之前调用bindService的Context不存在了（如Activity被finish的时候）之后，服务才会自动停止。</p>\n<p>参考链接:<br><a href>https://my.oschina.net/tingzi/blog/376545</a><br><a href>https://www.jianshu.com/p/d870f99b675c</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"startService-和bindService-的区别\"><a href=\"#startService-和bindService-的区别\" class=\"headerlink\" title=\"startService()和bindService()的区别\"></a>startService()和bindService()的区别</h1><p><img src=\"/images/startService\\ and\\ bindService\" alt></p>\n<h3 id=\"生命周期上的差别\"><a href=\"#生命周期上的差别\" class=\"headerlink\" title=\"生命周期上的差别\"></a>生命周期上的差别</h3><h4 id=\"startService\"><a href=\"#startService\" class=\"headerlink\" title=\"startService()\"></a>startService()</h4><p>执行startService时，Service经历onCreate-&gt;onStartCommand。当执行stopService时，直接调用onDestroy方法。调用者如果没有stopService，Service会一直在后台运行，下次调用者再起来仍然可以stopService。</p>\n<p>多次调用startService，该Service只能被创建一次，即该Service的onCreate方法只会被调用一次。<strong>但是每次调用startService，onStartCommand方法都会被调用。</strong>无论startService调用多少次，stopService只需要调用一次就能够终止Service</p>\n<h4 id=\"BindService\"><a href=\"#BindService\" class=\"headerlink\" title=\"BindService()\"></a>BindService()</h4><p>bindService开启服务时，根据生命周期里onBind方法的返回值是否为空，有两种情况。</p>\n<ol>\n<li><strong>onBind返回值是null</strong><br>调用bindService开启服务，生命周期执行的方法依次是：<br>onCreate() ==&gt; onBind();<br><strong>调用多次bindService，onCreate和onBind也只在第一次会被执行。调用unbindService结束服务，生命周期执行onDestroy方法，并且unbindService方法只能调用一次，多次调用应用会抛出异常。</strong> 使用时也要注意调用unbindService一定要确保服务已经开启，否则应用会抛出异常。</li>\n<li><strong>onBind返回值不为null</strong><br>这时候调用bindService开启服务，生命周期执行的方法依次是：<br>onCreate() ==&gt; onBind() ==&gt; onServiceConnected();<br>可以发现我们自己写的Connection类里的onServiceConnected方法被调用了。<strong>调用多次bindService，onCreate和onBind都只在第一次会被执行，onServiceConnected会执行多次。</strong><br>并且我们注意到onServiceConnected方法的第二个参数也是IBinder类型的，不难猜测onBind()方法返回的对象被传递到了这里。打印一下两个对象的地址可以证明猜测是正确的。<br>也就是说我们可以在onServiceConnected方法里拿到了Service服务的内部类Binder的对象，通过这个内部类对象，只要强转一下，我们可以调用这个内部类的非私有成员对象和方法。<br>调用unbindService结束服务和上面相同，unbindService只能调用一次，onDestroy也只执行一次，多次调用会抛出异常。<br><br><br><strong>总结</strong><br>第一次执行bindService时，onCreate和onBind方法会被调用，但是多次执行bindService时，onCreate和onBind方法并不会被多次调用，即并不会多次创建服务和绑定服务。</li>\n</ol>\n<h3 id=\"既使用startService又使用bindService的情况\"><a href=\"#既使用startService又使用bindService的情况\" class=\"headerlink\" title=\"既使用startService又使用bindService的情况\"></a>既使用startService又使用bindService的情况</h3><p>如果一个Service又被启动又被绑定，则该Service会一直在后台运行。首先不管如何调用，onCreate始终只会调用一次。对应startService调用多少次，Service的onStart方法便会调用多少次。Service的终止，需要unbindService和stopService同时调用才行。不管startService与bindService的调用顺序，如果先调用unbindService，此时服务不会自动终止，再调用stopService之后，服务才会终止；如果先调用stopService，此时服务也不会终止，而再调用unbindService或者之前调用bindService的Context不存在了（如Activity被finish的时候）之后，服务才会自动停止。</p>\n<p>参考链接:<br><a href>https://my.oschina.net/tingzi/blog/376545</a><br><a href>https://www.jianshu.com/p/d870f99b675c</a></p>\n"},{"title":"scrollBy(),scrollTo()和Scroller","date":"2019-06-16T12:26:14.000Z","_content":"# scrollBy(),scrollTo()和Scroller\n\n## 作用\n用于对View进行滚动\n<br>\n注意：\n1. **滚动的是View的内容，而不是View本身（对viewd的视窗进行移动）**\n比如：TextView滚动的是内部的text而不是整个view\n2. **滚动的方向与坐标轴正方向相反**\n比如：scrollBy(20,0)\n最后显示，view会向左移动\n因为是视窗的移动，所以视窗右移，view相对的向左移动(可以这么理解，具体看源码)\n\n## scrollBy() 和 scrollTo()的区别\nscrollBy()方法是让View相对于当前的位置滚动某段距离，而scrollTo()方法则是让View相对于初始的位置滚动某段距离。\n\n## Scroller\n利用Scroller可以实现有过渡动画的平滑移动，而不是突兀的瞬移\n### 使用步骤\nScroller的基本用法其实还是比较简单的，主要可以分为以下几个步骤：\n\n1. 创建Scroller的实例\n2. 调用startScroll()方法来初始化滚动数据并刷新界面\n3. 重写computeScroll()方法，并在其内部完成平滑滚动的逻辑\n\n\n\n### 代码：实现自定义的简单ViewPager\n```java\npackage com.example.work3;\n\nimport android.content.Context;\nimport android.support.v4.view.ViewConfigurationCompat;\nimport android.util.AttributeSet;\nimport android.util.Log;\nimport android.view.MotionEvent;\nimport android.view.View;\nimport android.view.ViewConfiguration;\nimport android.view.ViewGroup;\nimport android.widget.Scroller;\n\npublic class ScrollLayout extends ViewGroup {\n\n    private final String TAG = \"test_scroll\";\n    private Scroller mScroller;\n    // 可以判定为拖动的最小滑动距离\n    private int mTouchSlop;\n    // 落下的屏幕坐标\n    private float mXDown;\n    // 当前的屏幕坐标\n    private float mXMove;\n    // 上一次Action_MMOVE的屏幕坐标\n    private float mLastMove;\n    // 界面可滑动的左边界\n    private int mLeftBorder;\n    // 界面可滑动的右边界\n    private int mRightBorder;\n\n    public ScrollLayout(Context context) {\n        super(context);\n        init(context);\n    }\n\n    public ScrollLayout(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        init(context);\n    }\n\n    public ScrollLayout(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        init(context);\n    }\n\n    private void init(Context context) {\n        mScroller = new Scroller(context);\n        // 获取系统定义的mTouchSlop值\n        mTouchSlop = ViewConfigurationCompat.getScaledPagingTouchSlop(ViewConfiguration.get(context));\n    }\n\n    @Override\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n        int childCount = getChildCount();\n        for (int i = 0; i < childCount; i++) {\n            measureChild(getChildAt(i), widthMeasureSpec, heightMeasureSpec);\n        }\n    }\n\n    @Override\n    protected void onLayout(boolean changed, int l, int t, int r, int b) {\n        if (!changed)\n            return;\n        int childCount = getChildCount();\n        for (int i = 0; i < childCount; i++) {\n            View childView = getChildAt(i);\n            childView.layout(i * childView.getMeasuredWidth(), 0, (i + 1) * childView.getMeasuredWidth(), childView.getMeasuredHeight());\n        }\n        // 初始化左右边界\n        mLeftBorder = getChildAt(0).getLeft();\n        mRightBorder = getChildAt(childCount - 1).getRight();\n    }\n\n    @Override\n    public boolean onInterceptTouchEvent(MotionEvent ev) {\n        switch (ev.getAction()) {\n            case MotionEvent.ACTION_DOWN:\n                mXDown = ev.getRawX();\n                mLastMove = mXDown;\n                break;\n            case MotionEvent.ACTION_MOVE:\n                mXMove = ev.getRawX();\n                float diff = Math.abs(mXMove - mXDown);\n                mLastMove = mXMove;\n                // 手指拖动值大于TouchSlop，认为应该进行滚动，拦截事件\n                if (diff > mTouchSlop) {\n                    return true;\n                }\n                break;\n            case MotionEvent.ACTION_UP:\n                break;\n            default:\n                break;\n        }\n        return super.onInterceptTouchEvent(ev);\n    }\n\n    @Override\n    public boolean onTouchEvent(MotionEvent event) {\n        switch (event.getAction()) {\n            case MotionEvent.ACTION_DOWN:\n                break;\n            case MotionEvent.ACTION_MOVE: {\n                mXMove = event.getRawX();\n                int scrolledX = (int) (mLastMove - mXMove);\n                if (getScrollX() + scrolledX < mLeftBorder) {\n                    scrollTo(mLeftBorder, 0);\n                    return true;\n                } else if (getScrollX() + scrolledX + getWidth() > mRightBorder) {\n                    scrollTo(mRightBorder - getWidth(), 0);\n                    return true;\n                }\n                // view随着手指的拖动进行滚动\n                scrollBy(scrolledX, 0);\n                Log.i(TAG, \"onTouchEvent: \" + getChildAt(1).getLeft());\n                mLastMove = mXMove;\n                break;\n            }\n            case MotionEvent.ACTION_UP: {\n                // 当手指抬起时，根据当前的滚动值来判定应该滚动到哪个子控件的界面\n                int targetIndex = (getScrollX() + getWidth() / 2) / getWidth();\n                int dx = targetIndex * getWidth() - getScrollX();\n                // 第二步，调用startScroll()方法来初始化滚动数据并刷新界面\n                mScroller.startScroll(getScrollX(), 0, dx, 0);\n                // 对view重绘\n                invalidate();\n                break;\n            }\n        }\n        return super.onTouchEvent(event);\n    }\n\n    @Override\n    public void computeScroll() {\n        // computeScroll方法重写的模版代码， 如果是子View需要调用父布局的scrollTo方法\n        if (mScroller.computeScrollOffset()) {\n            scrollTo(mScroller.getCurrX(), mScroller.getCurrY());\n            // 对view重绘\n            invalidate();\n        }\n    }\n}\n```\n\n## getScrollX()方法\n返回当前滑动View左边界的位置，其实获取的值是画布在窗口左边界时的x坐标。\n原点（0，0）是初始化时内容显示的位置。\n\n## 参考\n[Android getScrollX()详解\n](https://blog.csdn.net/znouy/article/details/51338256)\n[Android Scroller完全解析，关于Scroller你所需知道的一切\n](https://blog.csdn.net/guolin_blog/article/details/48719871)","source":"_posts/Android/scrollBy-scrollTo-和Scroller.md","raw":"---\ntitle: 'scrollBy(),scrollTo()和Scroller'\ndate: 2019-06-16 20:26:14\ntags: \n- View\ncategories:\n- Android\n---\n# scrollBy(),scrollTo()和Scroller\n\n## 作用\n用于对View进行滚动\n<br>\n注意：\n1. **滚动的是View的内容，而不是View本身（对viewd的视窗进行移动）**\n比如：TextView滚动的是内部的text而不是整个view\n2. **滚动的方向与坐标轴正方向相反**\n比如：scrollBy(20,0)\n最后显示，view会向左移动\n因为是视窗的移动，所以视窗右移，view相对的向左移动(可以这么理解，具体看源码)\n\n## scrollBy() 和 scrollTo()的区别\nscrollBy()方法是让View相对于当前的位置滚动某段距离，而scrollTo()方法则是让View相对于初始的位置滚动某段距离。\n\n## Scroller\n利用Scroller可以实现有过渡动画的平滑移动，而不是突兀的瞬移\n### 使用步骤\nScroller的基本用法其实还是比较简单的，主要可以分为以下几个步骤：\n\n1. 创建Scroller的实例\n2. 调用startScroll()方法来初始化滚动数据并刷新界面\n3. 重写computeScroll()方法，并在其内部完成平滑滚动的逻辑\n\n\n\n### 代码：实现自定义的简单ViewPager\n```java\npackage com.example.work3;\n\nimport android.content.Context;\nimport android.support.v4.view.ViewConfigurationCompat;\nimport android.util.AttributeSet;\nimport android.util.Log;\nimport android.view.MotionEvent;\nimport android.view.View;\nimport android.view.ViewConfiguration;\nimport android.view.ViewGroup;\nimport android.widget.Scroller;\n\npublic class ScrollLayout extends ViewGroup {\n\n    private final String TAG = \"test_scroll\";\n    private Scroller mScroller;\n    // 可以判定为拖动的最小滑动距离\n    private int mTouchSlop;\n    // 落下的屏幕坐标\n    private float mXDown;\n    // 当前的屏幕坐标\n    private float mXMove;\n    // 上一次Action_MMOVE的屏幕坐标\n    private float mLastMove;\n    // 界面可滑动的左边界\n    private int mLeftBorder;\n    // 界面可滑动的右边界\n    private int mRightBorder;\n\n    public ScrollLayout(Context context) {\n        super(context);\n        init(context);\n    }\n\n    public ScrollLayout(Context context, AttributeSet attrs) {\n        super(context, attrs);\n        init(context);\n    }\n\n    public ScrollLayout(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n        init(context);\n    }\n\n    private void init(Context context) {\n        mScroller = new Scroller(context);\n        // 获取系统定义的mTouchSlop值\n        mTouchSlop = ViewConfigurationCompat.getScaledPagingTouchSlop(ViewConfiguration.get(context));\n    }\n\n    @Override\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n        int childCount = getChildCount();\n        for (int i = 0; i < childCount; i++) {\n            measureChild(getChildAt(i), widthMeasureSpec, heightMeasureSpec);\n        }\n    }\n\n    @Override\n    protected void onLayout(boolean changed, int l, int t, int r, int b) {\n        if (!changed)\n            return;\n        int childCount = getChildCount();\n        for (int i = 0; i < childCount; i++) {\n            View childView = getChildAt(i);\n            childView.layout(i * childView.getMeasuredWidth(), 0, (i + 1) * childView.getMeasuredWidth(), childView.getMeasuredHeight());\n        }\n        // 初始化左右边界\n        mLeftBorder = getChildAt(0).getLeft();\n        mRightBorder = getChildAt(childCount - 1).getRight();\n    }\n\n    @Override\n    public boolean onInterceptTouchEvent(MotionEvent ev) {\n        switch (ev.getAction()) {\n            case MotionEvent.ACTION_DOWN:\n                mXDown = ev.getRawX();\n                mLastMove = mXDown;\n                break;\n            case MotionEvent.ACTION_MOVE:\n                mXMove = ev.getRawX();\n                float diff = Math.abs(mXMove - mXDown);\n                mLastMove = mXMove;\n                // 手指拖动值大于TouchSlop，认为应该进行滚动，拦截事件\n                if (diff > mTouchSlop) {\n                    return true;\n                }\n                break;\n            case MotionEvent.ACTION_UP:\n                break;\n            default:\n                break;\n        }\n        return super.onInterceptTouchEvent(ev);\n    }\n\n    @Override\n    public boolean onTouchEvent(MotionEvent event) {\n        switch (event.getAction()) {\n            case MotionEvent.ACTION_DOWN:\n                break;\n            case MotionEvent.ACTION_MOVE: {\n                mXMove = event.getRawX();\n                int scrolledX = (int) (mLastMove - mXMove);\n                if (getScrollX() + scrolledX < mLeftBorder) {\n                    scrollTo(mLeftBorder, 0);\n                    return true;\n                } else if (getScrollX() + scrolledX + getWidth() > mRightBorder) {\n                    scrollTo(mRightBorder - getWidth(), 0);\n                    return true;\n                }\n                // view随着手指的拖动进行滚动\n                scrollBy(scrolledX, 0);\n                Log.i(TAG, \"onTouchEvent: \" + getChildAt(1).getLeft());\n                mLastMove = mXMove;\n                break;\n            }\n            case MotionEvent.ACTION_UP: {\n                // 当手指抬起时，根据当前的滚动值来判定应该滚动到哪个子控件的界面\n                int targetIndex = (getScrollX() + getWidth() / 2) / getWidth();\n                int dx = targetIndex * getWidth() - getScrollX();\n                // 第二步，调用startScroll()方法来初始化滚动数据并刷新界面\n                mScroller.startScroll(getScrollX(), 0, dx, 0);\n                // 对view重绘\n                invalidate();\n                break;\n            }\n        }\n        return super.onTouchEvent(event);\n    }\n\n    @Override\n    public void computeScroll() {\n        // computeScroll方法重写的模版代码， 如果是子View需要调用父布局的scrollTo方法\n        if (mScroller.computeScrollOffset()) {\n            scrollTo(mScroller.getCurrX(), mScroller.getCurrY());\n            // 对view重绘\n            invalidate();\n        }\n    }\n}\n```\n\n## getScrollX()方法\n返回当前滑动View左边界的位置，其实获取的值是画布在窗口左边界时的x坐标。\n原点（0，0）是初始化时内容显示的位置。\n\n## 参考\n[Android getScrollX()详解\n](https://blog.csdn.net/znouy/article/details/51338256)\n[Android Scroller完全解析，关于Scroller你所需知道的一切\n](https://blog.csdn.net/guolin_blog/article/details/48719871)","slug":"Android/scrollBy-scrollTo-和Scroller","published":1,"updated":"2019-06-16T13:06:20.081Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy9jfv21000t48zmrz0xtbug","content":"<h1 id=\"scrollBy-scrollTo-和Scroller\"><a href=\"#scrollBy-scrollTo-和Scroller\" class=\"headerlink\" title=\"scrollBy(),scrollTo()和Scroller\"></a>scrollBy(),scrollTo()和Scroller</h1><h2 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h2><p>用于对View进行滚动<br><br><br>注意：</p>\n<ol>\n<li><strong>滚动的是View的内容，而不是View本身（对viewd的视窗进行移动）</strong><br>比如：TextView滚动的是内部的text而不是整个view</li>\n<li><strong>滚动的方向与坐标轴正方向相反</strong><br>比如：scrollBy(20,0)<br>最后显示，view会向左移动<br>因为是视窗的移动，所以视窗右移，view相对的向左移动(可以这么理解，具体看源码)</li>\n</ol>\n<h2 id=\"scrollBy-和-scrollTo-的区别\"><a href=\"#scrollBy-和-scrollTo-的区别\" class=\"headerlink\" title=\"scrollBy() 和 scrollTo()的区别\"></a>scrollBy() 和 scrollTo()的区别</h2><p>scrollBy()方法是让View相对于当前的位置滚动某段距离，而scrollTo()方法则是让View相对于初始的位置滚动某段距离。</p>\n<h2 id=\"Scroller\"><a href=\"#Scroller\" class=\"headerlink\" title=\"Scroller\"></a>Scroller</h2><p>利用Scroller可以实现有过渡动画的平滑移动，而不是突兀的瞬移</p>\n<h3 id=\"使用步骤\"><a href=\"#使用步骤\" class=\"headerlink\" title=\"使用步骤\"></a>使用步骤</h3><p>Scroller的基本用法其实还是比较简单的，主要可以分为以下几个步骤：</p>\n<ol>\n<li>创建Scroller的实例</li>\n<li>调用startScroll()方法来初始化滚动数据并刷新界面</li>\n<li>重写computeScroll()方法，并在其内部完成平滑滚动的逻辑</li>\n</ol>\n<h3 id=\"代码：实现自定义的简单ViewPager\"><a href=\"#代码：实现自定义的简单ViewPager\" class=\"headerlink\" title=\"代码：实现自定义的简单ViewPager\"></a>代码：实现自定义的简单ViewPager</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.work3;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.v4.view.ViewConfigurationCompat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.AttributeSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.MotionEvent;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.View;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.ViewConfiguration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.ViewGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.Scroller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScrollLayout</span> <span class=\"keyword\">extends</span> <span class=\"title\">ViewGroup</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"test_scroll\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Scroller mScroller;</span><br><span class=\"line\">    <span class=\"comment\">// 可以判定为拖动的最小滑动距离</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mTouchSlop;</span><br><span class=\"line\">    <span class=\"comment\">// 落下的屏幕坐标</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> mXDown;</span><br><span class=\"line\">    <span class=\"comment\">// 当前的屏幕坐标</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> mXMove;</span><br><span class=\"line\">    <span class=\"comment\">// 上一次Action_MMOVE的屏幕坐标</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> mLastMove;</span><br><span class=\"line\">    <span class=\"comment\">// 界面可滑动的左边界</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mLeftBorder;</span><br><span class=\"line\">    <span class=\"comment\">// 界面可滑动的右边界</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mRightBorder;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScrollLayout</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context);</span><br><span class=\"line\">        init(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScrollLayout</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context, attrs);</span><br><span class=\"line\">        init(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScrollLayout</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyleAttr);</span><br><span class=\"line\">        init(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        mScroller = <span class=\"keyword\">new</span> Scroller(context);</span><br><span class=\"line\">        <span class=\"comment\">// 获取系统定义的mTouchSlop值</span></span><br><span class=\"line\">        mTouchSlop = ViewConfigurationCompat.getScaledPagingTouchSlop(ViewConfiguration.get(context));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> childCount = getChildCount();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; childCount; i++) &#123;</span><br><span class=\"line\">            measureChild(getChildAt(i), widthMeasureSpec, heightMeasureSpec);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!changed)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> childCount = getChildCount();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; childCount; i++) &#123;</span><br><span class=\"line\">            View childView = getChildAt(i);</span><br><span class=\"line\">            childView.layout(i * childView.getMeasuredWidth(), <span class=\"number\">0</span>, (i + <span class=\"number\">1</span>) * childView.getMeasuredWidth(), childView.getMeasuredHeight());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化左右边界</span></span><br><span class=\"line\">        mLeftBorder = getChildAt(<span class=\"number\">0</span>).getLeft();</span><br><span class=\"line\">        mRightBorder = getChildAt(childCount - <span class=\"number\">1</span>).getRight();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onInterceptTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (ev.getAction()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN:</span><br><span class=\"line\">                mXDown = ev.getRawX();</span><br><span class=\"line\">                mLastMove = mXDown;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE:</span><br><span class=\"line\">                mXMove = ev.getRawX();</span><br><span class=\"line\">                <span class=\"keyword\">float</span> diff = Math.abs(mXMove - mXDown);</span><br><span class=\"line\">                mLastMove = mXMove;</span><br><span class=\"line\">                <span class=\"comment\">// 手指拖动值大于TouchSlop，认为应该进行滚动，拦截事件</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (diff &gt; mTouchSlop) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_UP:</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onInterceptTouchEvent(ev);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (event.getAction()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN:</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE: &#123;</span><br><span class=\"line\">                mXMove = event.getRawX();</span><br><span class=\"line\">                <span class=\"keyword\">int</span> scrolledX = (<span class=\"keyword\">int</span>) (mLastMove - mXMove);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (getScrollX() + scrolledX &lt; mLeftBorder) &#123;</span><br><span class=\"line\">                    scrollTo(mLeftBorder, <span class=\"number\">0</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (getScrollX() + scrolledX + getWidth() &gt; mRightBorder) &#123;</span><br><span class=\"line\">                    scrollTo(mRightBorder - getWidth(), <span class=\"number\">0</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// view随着手指的拖动进行滚动</span></span><br><span class=\"line\">                scrollBy(scrolledX, <span class=\"number\">0</span>);</span><br><span class=\"line\">                Log.i(TAG, <span class=\"string\">\"onTouchEvent: \"</span> + getChildAt(<span class=\"number\">1</span>).getLeft());</span><br><span class=\"line\">                mLastMove = mXMove;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_UP: &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 当手指抬起时，根据当前的滚动值来判定应该滚动到哪个子控件的界面</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> targetIndex = (getScrollX() + getWidth() / <span class=\"number\">2</span>) / getWidth();</span><br><span class=\"line\">                <span class=\"keyword\">int</span> dx = targetIndex * getWidth() - getScrollX();</span><br><span class=\"line\">                <span class=\"comment\">// 第二步，调用startScroll()方法来初始化滚动数据并刷新界面</span></span><br><span class=\"line\">                mScroller.startScroll(getScrollX(), <span class=\"number\">0</span>, dx, <span class=\"number\">0</span>);</span><br><span class=\"line\">                <span class=\"comment\">// 对view重绘</span></span><br><span class=\"line\">                invalidate();</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onTouchEvent(event);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">computeScroll</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// computeScroll方法重写的模版代码， 如果是子View需要调用父布局的scrollTo方法</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mScroller.computeScrollOffset()) &#123;</span><br><span class=\"line\">            scrollTo(mScroller.getCurrX(), mScroller.getCurrY());</span><br><span class=\"line\">            <span class=\"comment\">// 对view重绘</span></span><br><span class=\"line\">            invalidate();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"getScrollX-方法\"><a href=\"#getScrollX-方法\" class=\"headerlink\" title=\"getScrollX()方法\"></a>getScrollX()方法</h2><p>返回当前滑动View左边界的位置，其实获取的值是画布在窗口左边界时的x坐标。<br>原点（0，0）是初始化时内容显示的位置。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://blog.csdn.net/znouy/article/details/51338256\" target=\"_blank\" rel=\"noopener\">Android getScrollX()详解\n</a><br><a href=\"https://blog.csdn.net/guolin_blog/article/details/48719871\" target=\"_blank\" rel=\"noopener\">Android Scroller完全解析，关于Scroller你所需知道的一切\n</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"scrollBy-scrollTo-和Scroller\"><a href=\"#scrollBy-scrollTo-和Scroller\" class=\"headerlink\" title=\"scrollBy(),scrollTo()和Scroller\"></a>scrollBy(),scrollTo()和Scroller</h1><h2 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h2><p>用于对View进行滚动<br><br><br>注意：</p>\n<ol>\n<li><strong>滚动的是View的内容，而不是View本身（对viewd的视窗进行移动）</strong><br>比如：TextView滚动的是内部的text而不是整个view</li>\n<li><strong>滚动的方向与坐标轴正方向相反</strong><br>比如：scrollBy(20,0)<br>最后显示，view会向左移动<br>因为是视窗的移动，所以视窗右移，view相对的向左移动(可以这么理解，具体看源码)</li>\n</ol>\n<h2 id=\"scrollBy-和-scrollTo-的区别\"><a href=\"#scrollBy-和-scrollTo-的区别\" class=\"headerlink\" title=\"scrollBy() 和 scrollTo()的区别\"></a>scrollBy() 和 scrollTo()的区别</h2><p>scrollBy()方法是让View相对于当前的位置滚动某段距离，而scrollTo()方法则是让View相对于初始的位置滚动某段距离。</p>\n<h2 id=\"Scroller\"><a href=\"#Scroller\" class=\"headerlink\" title=\"Scroller\"></a>Scroller</h2><p>利用Scroller可以实现有过渡动画的平滑移动，而不是突兀的瞬移</p>\n<h3 id=\"使用步骤\"><a href=\"#使用步骤\" class=\"headerlink\" title=\"使用步骤\"></a>使用步骤</h3><p>Scroller的基本用法其实还是比较简单的，主要可以分为以下几个步骤：</p>\n<ol>\n<li>创建Scroller的实例</li>\n<li>调用startScroll()方法来初始化滚动数据并刷新界面</li>\n<li>重写computeScroll()方法，并在其内部完成平滑滚动的逻辑</li>\n</ol>\n<h3 id=\"代码：实现自定义的简单ViewPager\"><a href=\"#代码：实现自定义的简单ViewPager\" class=\"headerlink\" title=\"代码：实现自定义的简单ViewPager\"></a>代码：实现自定义的简单ViewPager</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.work3;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.support.v4.view.ViewConfigurationCompat;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.AttributeSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.MotionEvent;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.View;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.ViewConfiguration;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.ViewGroup;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.widget.Scroller;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ScrollLayout</span> <span class=\"keyword\">extends</span> <span class=\"title\">ViewGroup</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"test_scroll\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Scroller mScroller;</span><br><span class=\"line\">    <span class=\"comment\">// 可以判定为拖动的最小滑动距离</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mTouchSlop;</span><br><span class=\"line\">    <span class=\"comment\">// 落下的屏幕坐标</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> mXDown;</span><br><span class=\"line\">    <span class=\"comment\">// 当前的屏幕坐标</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> mXMove;</span><br><span class=\"line\">    <span class=\"comment\">// 上一次Action_MMOVE的屏幕坐标</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">float</span> mLastMove;</span><br><span class=\"line\">    <span class=\"comment\">// 界面可滑动的左边界</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mLeftBorder;</span><br><span class=\"line\">    <span class=\"comment\">// 界面可滑动的右边界</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> mRightBorder;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScrollLayout</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context);</span><br><span class=\"line\">        init(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScrollLayout</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context, attrs);</span><br><span class=\"line\">        init(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ScrollLayout</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyleAttr);</span><br><span class=\"line\">        init(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">init</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        mScroller = <span class=\"keyword\">new</span> Scroller(context);</span><br><span class=\"line\">        <span class=\"comment\">// 获取系统定义的mTouchSlop值</span></span><br><span class=\"line\">        mTouchSlop = ViewConfigurationCompat.getScaledPagingTouchSlop(ViewConfiguration.get(context));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> childCount = getChildCount();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; childCount; i++) &#123;</span><br><span class=\"line\">            measureChild(getChildAt(i), widthMeasureSpec, heightMeasureSpec);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!changed)</span><br><span class=\"line\">            <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> childCount = getChildCount();</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; childCount; i++) &#123;</span><br><span class=\"line\">            View childView = getChildAt(i);</span><br><span class=\"line\">            childView.layout(i * childView.getMeasuredWidth(), <span class=\"number\">0</span>, (i + <span class=\"number\">1</span>) * childView.getMeasuredWidth(), childView.getMeasuredHeight());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 初始化左右边界</span></span><br><span class=\"line\">        mLeftBorder = getChildAt(<span class=\"number\">0</span>).getLeft();</span><br><span class=\"line\">        mRightBorder = getChildAt(childCount - <span class=\"number\">1</span>).getRight();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onInterceptTouchEvent</span><span class=\"params\">(MotionEvent ev)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (ev.getAction()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN:</span><br><span class=\"line\">                mXDown = ev.getRawX();</span><br><span class=\"line\">                mLastMove = mXDown;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE:</span><br><span class=\"line\">                mXMove = ev.getRawX();</span><br><span class=\"line\">                <span class=\"keyword\">float</span> diff = Math.abs(mXMove - mXDown);</span><br><span class=\"line\">                mLastMove = mXMove;</span><br><span class=\"line\">                <span class=\"comment\">// 手指拖动值大于TouchSlop，认为应该进行滚动，拦截事件</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (diff &gt; mTouchSlop) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_UP:</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onInterceptTouchEvent(ev);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">onTouchEvent</span><span class=\"params\">(MotionEvent event)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (event.getAction()) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_DOWN:</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_MOVE: &#123;</span><br><span class=\"line\">                mXMove = event.getRawX();</span><br><span class=\"line\">                <span class=\"keyword\">int</span> scrolledX = (<span class=\"keyword\">int</span>) (mLastMove - mXMove);</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (getScrollX() + scrolledX &lt; mLeftBorder) &#123;</span><br><span class=\"line\">                    scrollTo(mLeftBorder, <span class=\"number\">0</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (getScrollX() + scrolledX + getWidth() &gt; mRightBorder) &#123;</span><br><span class=\"line\">                    scrollTo(mRightBorder - getWidth(), <span class=\"number\">0</span>);</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"comment\">// view随着手指的拖动进行滚动</span></span><br><span class=\"line\">                scrollBy(scrolledX, <span class=\"number\">0</span>);</span><br><span class=\"line\">                Log.i(TAG, <span class=\"string\">\"onTouchEvent: \"</span> + getChildAt(<span class=\"number\">1</span>).getLeft());</span><br><span class=\"line\">                mLastMove = mXMove;</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> MotionEvent.ACTION_UP: &#123;</span><br><span class=\"line\">                <span class=\"comment\">// 当手指抬起时，根据当前的滚动值来判定应该滚动到哪个子控件的界面</span></span><br><span class=\"line\">                <span class=\"keyword\">int</span> targetIndex = (getScrollX() + getWidth() / <span class=\"number\">2</span>) / getWidth();</span><br><span class=\"line\">                <span class=\"keyword\">int</span> dx = targetIndex * getWidth() - getScrollX();</span><br><span class=\"line\">                <span class=\"comment\">// 第二步，调用startScroll()方法来初始化滚动数据并刷新界面</span></span><br><span class=\"line\">                mScroller.startScroll(getScrollX(), <span class=\"number\">0</span>, dx, <span class=\"number\">0</span>);</span><br><span class=\"line\">                <span class=\"comment\">// 对view重绘</span></span><br><span class=\"line\">                invalidate();</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">super</span>.onTouchEvent(event);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">computeScroll</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// computeScroll方法重写的模版代码， 如果是子View需要调用父布局的scrollTo方法</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (mScroller.computeScrollOffset()) &#123;</span><br><span class=\"line\">            scrollTo(mScroller.getCurrX(), mScroller.getCurrY());</span><br><span class=\"line\">            <span class=\"comment\">// 对view重绘</span></span><br><span class=\"line\">            invalidate();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"getScrollX-方法\"><a href=\"#getScrollX-方法\" class=\"headerlink\" title=\"getScrollX()方法\"></a>getScrollX()方法</h2><p>返回当前滑动View左边界的位置，其实获取的值是画布在窗口左边界时的x坐标。<br>原点（0，0）是初始化时内容显示的位置。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a href=\"https://blog.csdn.net/znouy/article/details/51338256\" target=\"_blank\" rel=\"noopener\">Android getScrollX()详解\n</a><br><a href=\"https://blog.csdn.net/guolin_blog/article/details/48719871\" target=\"_blank\" rel=\"noopener\">Android Scroller完全解析，关于Scroller你所需知道的一切\n</a></p>\n"},{"title":"C语言结构体的内存对齐","date":"2019-04-13T05:11:14.000Z","_content":"\n# C语言结构体的内存对齐\n\n## 内存对齐原则\n* 数据成员对齐规则：结构（struct或联合union）的数据成员，第一个数据成员放在offset为0的地方，以后每个数据成员存储的起始位置: min(#pragma pack()指定的数,这个数据%成员的自身长度)的倍数\n\n* 结构体作为成员：如果一个结构里有某些结构体成员，则结构体成员要从min(#pragram pack() , 内部长度最长的数据成员)的整数倍地址开始存储。（struct a里存有struct b，b里有char，int，double等元素，那b应该从min(#pragram pack(), 8)的整数倍开始存储。）\n\n* 结构体的总大小，也就是sizeof的结果，必须是 min(#pragram pack() , 长度最长的数据成员) 的整数倍\n\n## pragram pack(4)\n设置内存对齐的字节数， 默认为系统字长，64位系统为8字节，32位系统为4字节\n\n## 例子：\n```c++\n# pragram pack(8)\n\nstruct S3\n{\n    double d;\n    char c;\n    int i;\n};\nstruct S4\n{\n    char c1;\n    struct S3 s3;\n    double d;\n};\nprintf(\"%d\\n\", sizeof(struct S4));\n```\n\n最后的输出为 32\n\n## 参考：\n[[C/C++] 结构体内存对齐用法 - 我自逍遥笑 - 博客园](https://www.cnblogs.com/zwh0214/p/8833314.html)\n\n## C语言联合体union的sizeof\n\n**分配给union的实际大小不仅要满足是对齐大小的整数倍，同时要满足实际大小不能小于最大成员的大小。**\n\n","source":"_posts/C/C语言结构体的内存对齐.md","raw":"---\ntitle: C语言结构体的内存对齐\ndate: 2019-04-13 13:11:14\ncategories: \n- C/C++\ntags:\n---\n\n# C语言结构体的内存对齐\n\n## 内存对齐原则\n* 数据成员对齐规则：结构（struct或联合union）的数据成员，第一个数据成员放在offset为0的地方，以后每个数据成员存储的起始位置: min(#pragma pack()指定的数,这个数据%成员的自身长度)的倍数\n\n* 结构体作为成员：如果一个结构里有某些结构体成员，则结构体成员要从min(#pragram pack() , 内部长度最长的数据成员)的整数倍地址开始存储。（struct a里存有struct b，b里有char，int，double等元素，那b应该从min(#pragram pack(), 8)的整数倍开始存储。）\n\n* 结构体的总大小，也就是sizeof的结果，必须是 min(#pragram pack() , 长度最长的数据成员) 的整数倍\n\n## pragram pack(4)\n设置内存对齐的字节数， 默认为系统字长，64位系统为8字节，32位系统为4字节\n\n## 例子：\n```c++\n# pragram pack(8)\n\nstruct S3\n{\n    double d;\n    char c;\n    int i;\n};\nstruct S4\n{\n    char c1;\n    struct S3 s3;\n    double d;\n};\nprintf(\"%d\\n\", sizeof(struct S4));\n```\n\n最后的输出为 32\n\n## 参考：\n[[C/C++] 结构体内存对齐用法 - 我自逍遥笑 - 博客园](https://www.cnblogs.com/zwh0214/p/8833314.html)\n\n## C语言联合体union的sizeof\n\n**分配给union的实际大小不仅要满足是对齐大小的整数倍，同时要满足实际大小不能小于最大成员的大小。**\n\n","slug":"C/C语言结构体的内存对齐","published":1,"updated":"2019-05-12T13:11:22.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy9jfv22000v48zmqp7nm0bu","content":"<h1 id=\"C语言结构体的内存对齐\"><a href=\"#C语言结构体的内存对齐\" class=\"headerlink\" title=\"C语言结构体的内存对齐\"></a>C语言结构体的内存对齐</h1><h2 id=\"内存对齐原则\"><a href=\"#内存对齐原则\" class=\"headerlink\" title=\"内存对齐原则\"></a>内存对齐原则</h2><ul>\n<li><p>数据成员对齐规则：结构（struct或联合union）的数据成员，第一个数据成员放在offset为0的地方，以后每个数据成员存储的起始位置: min(#pragma pack()指定的数,这个数据%成员的自身长度)的倍数</p>\n</li>\n<li><p>结构体作为成员：如果一个结构里有某些结构体成员，则结构体成员要从min(#pragram pack() , 内部长度最长的数据成员)的整数倍地址开始存储。（struct a里存有struct b，b里有char，int，double等元素，那b应该从min(#pragram pack(), 8)的整数倍开始存储。）</p>\n</li>\n<li><p>结构体的总大小，也就是sizeof的结果，必须是 min(#pragram pack() , 长度最长的数据成员) 的整数倍</p>\n</li>\n</ul>\n<h2 id=\"pragram-pack-4\"><a href=\"#pragram-pack-4\" class=\"headerlink\" title=\"pragram pack(4)\"></a>pragram pack(4)</h2><p>设置内存对齐的字节数， 默认为系统字长，64位系统为8字节，32位系统为4字节</p>\n<h2 id=\"例子：\"><a href=\"#例子：\" class=\"headerlink\" title=\"例子：\"></a>例子：</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># pragram pack(8)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">S3</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> d;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> c;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">S4</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> c1;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">S3</span> <span class=\"title\">s3</span>;</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> d;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, <span class=\"keyword\">sizeof</span>(struct S4));</span><br></pre></td></tr></table></figure>\n<p>最后的输出为 32</p>\n<h2 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h2><p><a href=\"https://www.cnblogs.com/zwh0214/p/8833314.html\" target=\"_blank\" rel=\"noopener\">[C/C++] 结构体内存对齐用法 - 我自逍遥笑 - 博客园</a></p>\n<h2 id=\"C语言联合体union的sizeof\"><a href=\"#C语言联合体union的sizeof\" class=\"headerlink\" title=\"C语言联合体union的sizeof\"></a>C语言联合体union的sizeof</h2><p><strong>分配给union的实际大小不仅要满足是对齐大小的整数倍，同时要满足实际大小不能小于最大成员的大小。</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"C语言结构体的内存对齐\"><a href=\"#C语言结构体的内存对齐\" class=\"headerlink\" title=\"C语言结构体的内存对齐\"></a>C语言结构体的内存对齐</h1><h2 id=\"内存对齐原则\"><a href=\"#内存对齐原则\" class=\"headerlink\" title=\"内存对齐原则\"></a>内存对齐原则</h2><ul>\n<li><p>数据成员对齐规则：结构（struct或联合union）的数据成员，第一个数据成员放在offset为0的地方，以后每个数据成员存储的起始位置: min(#pragma pack()指定的数,这个数据%成员的自身长度)的倍数</p>\n</li>\n<li><p>结构体作为成员：如果一个结构里有某些结构体成员，则结构体成员要从min(#pragram pack() , 内部长度最长的数据成员)的整数倍地址开始存储。（struct a里存有struct b，b里有char，int，double等元素，那b应该从min(#pragram pack(), 8)的整数倍开始存储。）</p>\n</li>\n<li><p>结构体的总大小，也就是sizeof的结果，必须是 min(#pragram pack() , 长度最长的数据成员) 的整数倍</p>\n</li>\n</ul>\n<h2 id=\"pragram-pack-4\"><a href=\"#pragram-pack-4\" class=\"headerlink\" title=\"pragram pack(4)\"></a>pragram pack(4)</h2><p>设置内存对齐的字节数， 默认为系统字长，64位系统为8字节，32位系统为4字节</p>\n<h2 id=\"例子：\"><a href=\"#例子：\" class=\"headerlink\" title=\"例子：\"></a>例子：</h2><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\"># pragram pack(8)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">S3</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> d;</span><br><span class=\"line\">    <span class=\"keyword\">char</span> c;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">S4</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">char</span> c1;</span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">S3</span> <span class=\"title\">s3</span>;</span></span><br><span class=\"line\">    <span class=\"keyword\">double</span> d;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, <span class=\"keyword\">sizeof</span>(struct S4));</span><br></pre></td></tr></table></figure>\n<p>最后的输出为 32</p>\n<h2 id=\"参考：\"><a href=\"#参考：\" class=\"headerlink\" title=\"参考：\"></a>参考：</h2><p><a href=\"https://www.cnblogs.com/zwh0214/p/8833314.html\" target=\"_blank\" rel=\"noopener\">[C/C++] 结构体内存对齐用法 - 我自逍遥笑 - 博客园</a></p>\n<h2 id=\"C语言联合体union的sizeof\"><a href=\"#C语言联合体union的sizeof\" class=\"headerlink\" title=\"C语言联合体union的sizeof\"></a>C语言联合体union的sizeof</h2><p><strong>分配给union的实际大小不仅要满足是对齐大小的整数倍，同时要满足实际大小不能小于最大成员的大小。</strong></p>\n"},{"title":"自定义ViewGroup","date":"2019-04-13T05:12:35.000Z","_content":"\n# 自定义ViewGroup\n\n### 参考文章\n[自定义LayoutParams](https://blog.csdn.net/xmxkf/article/details/51500304#3-%E6%94%AF%E6%8C%81layoutmargin%E5%B1%9E%E6%80%A7)\n[关于onMeasure过程的理解](https://blog.csdn.net/xmxkf/article/details/51490283)\n[Measure测量流程全解析（简洁）](https://juejin.im/post/5ad37c476fb9a028bc2e32af)\n### 下面是继承自ViewGroup的FlowLayout标签流式布局\n```java\npackage com.example.test;\n\nimport android.content.Context;\nimport android.util.AttributeSet;\nimport android.util.Log;\nimport android.view.View;\nimport android.view.ViewGroup;\n\npublic class FlowLayout extends ViewGroup {\n    public FlowLayout(Context context) {\n        super(context);\n    }\n\n    public FlowLayout(Context context, AttributeSet attrs) {\n        super(context, attrs);\n    }\n\n    public FlowLayout(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n    }\n\n    @Override\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n        int specWidth = MeasureSpec.getSize(widthMeasureSpec);\n        int specHeight = MeasureSpec.getSize(heightMeasureSpec);\n        int specWidthMode = MeasureSpec.getMode(widthMeasureSpec);\n        int specHeightMode = MeasureSpec.getMode(heightMeasureSpec);\n\n        int count = getChildCount();\n\n        //计算child的大小\n        for (int i = 0; i < count; i++) {\n            View child = getChildAt(i);\n            //measureChildWithMargins方法在计算时已经考虑到了padding, 所以这里widthUsed参数设置为0\n            //这里为了支持margin，所以用measureChildWithMargins方法\n            measureChildWithMargins(child,\n                    widthMeasureSpec, 0,\n                    heightMeasureSpec, 0);\n        }\n        //计算ViewGroup自身的大小\n        //这里只要处理height的wrap_content情况就可以了\n        int height = specHeight;\n        int width = specWidth;\n        if (specHeightMode == MeasureSpec.AT_MOST) {\n            height = getPaddingBottom() + getPaddingTop();\n            int used_width = 0;\n            int line_max_height = 0;\n            for (int i = 0; i < count; i++) {\n                View child = getChildAt(i);\n                MarginLayoutParams mlp = (MarginLayoutParams) child.getLayoutParams();\n                int child_width = child.getMeasuredWidth() + mlp.leftMargin + mlp.rightMargin;\n                int child_height = child.getMeasuredHeight() + mlp.topMargin + mlp.bottomMargin;\n                //在这一行可以容纳\n                if (used_width + child_width <= width - getPaddingStart() - getPaddingEnd()) {\n                    line_max_height = Math.max(line_max_height, child_height);\n                    used_width += child_width;\n                } else {\n                    //切换到下一行\n                    height += line_max_height;\n                    used_width = child_width;\n                    line_max_height = child_height;\n                }\n            }\n            //加上最后一行的最大height\n            height += line_max_height;\n        }\n        setMeasuredDimension(width, height);\n    }\n\n    private final String TAG = \"test_log\";\n\n    @Override\n    protected void onLayout(boolean changed, int l, int t, int r, int b) {\n        int width = getMeasuredWidth() - getPaddingStart() - getPaddingEnd();\n        int used_width = 0;\n        int used_height = 0;\n\n        int count = getChildCount();\n        int last_line_max_height = 0;\n        for (int i = 0; i < count; i++) {\n            View child_view = getChildAt(i);\n            MarginLayoutParams mlp = (MarginLayoutParams) child_view.getLayoutParams();\n            //用于计算是否越界时需要包含margin\n            int child_width = child_view.getMeasuredWidth() + mlp.leftMargin + mlp.rightMargin;\n            int child_height = child_view.getMeasuredHeight() + mlp.topMargin + mlp.bottomMargin;\n            //layout时的位置，必须考虑padding\n            int layout_l, layout_t, layout_r, layout_b;\n            if (used_width + child_width <= width) {\n                layout_l = getPaddingStart() + used_width + mlp.leftMargin;\n                layout_t = getPaddingTop() + used_height + mlp.topMargin;\n                layout_r = layout_l + child_view.getMeasuredWidth();\n                layout_b = layout_t + child_view.getMeasuredHeight();\n\n                used_width += child_width;\n                //记录该行height的最大值\n                last_line_max_height = Math.max(last_line_max_height, child_height);\n            } else {\n                layout_l = getPaddingStart() + mlp.leftMargin;\n                layout_t = getPaddingTop() + used_height + last_line_max_height + mlp.topMargin;\n                layout_r = layout_l + child_view.getMeasuredWidth();\n                layout_b = layout_t + child_view.getMeasuredHeight();\n\n                used_height += last_line_max_height;\n                used_width = child_width;\n\n                last_line_max_height = child_height;\n            }\n            child_view.layout(layout_l, layout_t, layout_r, layout_b);\n        }\n    }\n\n    @Override\n    public LayoutParams generateLayoutParams(AttributeSet attrs) {\n        return new MarginLayoutParams(getContext(), attrs);\n    }\n\n    @Override\n    protected LayoutParams generateLayoutParams(LayoutParams p) {\n        return new MarginLayoutParams(p);\n    }\n\n    @Override\n    protected LayoutParams generateDefaultLayoutParams() {\n        return new MarginLayoutParams(super.generateDefaultLayoutParams());\n    }\n}\n\n```\n\n### 关于MeasureSpec\n\n父控件告诉子控件可获得的空间以及关于这个空间的约束条件\n\n#### SpecMode\n\n* EXACTLY\n  * 设置了精确的宽高。如width、height设置了具体值或者设置为 match_parent，都属于这种模式\n* AT_MOST\n  * width、height设置为wrap_content则属于这种模式。表示父容器只是限制了子view的最大值\n* UNSPECIFIED\n  * 这种模式一般用于系统， 父容器不对View有任何限制。 一般很少用\n\n### 关于view的Measure过程\n我们知道，整个绘制流程是从ViewRootImpl类中performTraversals()开始的，这里面分别执行performMeasure、performLayout、performDraw来完成整个绘制的三大流程。而三大流程都是至顶向下，今天这里只说measure的过程。\n    这里以DecorView(根View)面放着一个ViewGroup(ViewGroupA)ViewGroup里面放着一个View(ViewB)为例来说明整个测量的流程：\n* **ViewRootImpl.performTraversals()->performMeasure():**\n> 这里面会调getRootMeasureSpec（）根据手机屏幕的宽高和DecorView的LayoutParams生成DecorView的MeasureSpec,然后调用DecorView的measure()开始DecorView的测量\n* **DecorView.measure()->onMeasure():**\n> DecorView继承自FrameLayout，所以会走到FrameLayout的onMeasure(),onMeasure()里调measureChild()来根据上面说的规则为ViewGroupA生成MeasureSpec，并通过ViewGroupA.measure（）开始ViewGroupA的测量\n* **ViewGroupA.measure()->onMeasure():**\n>这是我们自定义的一个ViewGroup(继承自ViewGroup)\n假如我们没有重写onMeasure()的话，则默认调的是View.onMeasure()，则不会发起对子View的measure,它里面的子View也就不会被测量(0),而这个ViewGroup如果没有设置具体宽高的话，（wrap_content）则ViewGroup展示的就是父容器的宽高（根据上面说的MeasureSpec生成规则)。\n    所以如果我们继承自ViewGroup来自定义一个ViewGroup的话，是肯定要重写onMeasure()的，**里面要调用measureChild()来为子View生成MeasureSpec并调child.measure()开始对child的测量(getChildMeasureSpec()方法)，这样子View才能被测量显示。而如果我们要使设置的wrap_content生效，还要根据子View测量结果进行计算从而得到自己的宽高，最后通过调setMeasuredDimension(int measuredWidth, int measuredHeight)来设置自己的宽高，从而达到wrap_content的效果。**\n* **ViewB.measure()->onMeasure():**\n> View的测量相对于ViewGroup要简单点，因为不用去Measure child,但是一样的，如果要使wrap_conten生效需自己重写onMeasure()计算。\n\n### 测量子view时MeasureSpec的生成规则\n1. **当子View的宽高设置的是具体数值时**\n> 显然我们可以直接拿到子View的宽高，则子View宽高就确定了，不用再去考虑父容器的SpecMode了,**此时子View的SpecMode为EXACTLY，SpecSize就是设置的宽高。**\n2. **当子View的宽高设置的是match_parent**\n> 则**不管父容器的SpecMode是什么模式，子View的SpecSize就等于父容器的宽高，而子View的SpecMode随父容器的SpecMode。**（这里没有考虑UNSPECIFIED模式，如果父容器是UNSPECIFIED模式，则子View SpecSize为0，SpecMode为UNSPECIFIED）\n3. **当子View的宽高设置的是wrap_content,**\n> 因为这种情况父容器实在不知道子View应该多宽多高，**所以子View的SpecSize给的是父容器的宽高，也就是说只是给子View限制了一个最大宽高，而子View的SpecMode是AT_MOST模式。**（这里没有考虑UNSPECIFIED模式，如果父容器是UNSPECIFIED模式，则子View SpecSize为0，SpecMode为UNSPECIFIED）。\n    \n* 通过上面的解析我们可以知道，当你给一个View/ViewGroup设置宽高为具体数值或者match_parent，它都能正确的显示，但是如果你设置的是wrap_content，则默认显示出来是其父容器的大小，如果你想要它正常的显示为wrap_content，则你就要自己重写onMeasure()来自己计算它的宽高度并设置。**所以我们平常自定义View/ViewGroup的时候之所以要重写onMeasure()，就是为了能让wrap_content达到效果。**\n\n### 关于LayoutParams\n在上面的FlowLayout代码中，为了支持margin属性，使用了MarginLayoutParams。这个MarginLayoutParams继承自LayoutParams。**在使用中必须重写所有的generateLayoutParams()方法**\n尝试了一下，RelativeLayoutParams等都是继承自MarginLayoutParams\n","source":"_posts/Android/自定义ViewGroup.md","raw":"---\ntitle: 自定义ViewGroup\ndate: 2019-04-13 13:12:35\ntags:\n- view\ncategories:\n- Android\n- view\n---\n\n# 自定义ViewGroup\n\n### 参考文章\n[自定义LayoutParams](https://blog.csdn.net/xmxkf/article/details/51500304#3-%E6%94%AF%E6%8C%81layoutmargin%E5%B1%9E%E6%80%A7)\n[关于onMeasure过程的理解](https://blog.csdn.net/xmxkf/article/details/51490283)\n[Measure测量流程全解析（简洁）](https://juejin.im/post/5ad37c476fb9a028bc2e32af)\n### 下面是继承自ViewGroup的FlowLayout标签流式布局\n```java\npackage com.example.test;\n\nimport android.content.Context;\nimport android.util.AttributeSet;\nimport android.util.Log;\nimport android.view.View;\nimport android.view.ViewGroup;\n\npublic class FlowLayout extends ViewGroup {\n    public FlowLayout(Context context) {\n        super(context);\n    }\n\n    public FlowLayout(Context context, AttributeSet attrs) {\n        super(context, attrs);\n    }\n\n    public FlowLayout(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n    }\n\n    @Override\n    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) {\n        super.onMeasure(widthMeasureSpec, heightMeasureSpec);\n        int specWidth = MeasureSpec.getSize(widthMeasureSpec);\n        int specHeight = MeasureSpec.getSize(heightMeasureSpec);\n        int specWidthMode = MeasureSpec.getMode(widthMeasureSpec);\n        int specHeightMode = MeasureSpec.getMode(heightMeasureSpec);\n\n        int count = getChildCount();\n\n        //计算child的大小\n        for (int i = 0; i < count; i++) {\n            View child = getChildAt(i);\n            //measureChildWithMargins方法在计算时已经考虑到了padding, 所以这里widthUsed参数设置为0\n            //这里为了支持margin，所以用measureChildWithMargins方法\n            measureChildWithMargins(child,\n                    widthMeasureSpec, 0,\n                    heightMeasureSpec, 0);\n        }\n        //计算ViewGroup自身的大小\n        //这里只要处理height的wrap_content情况就可以了\n        int height = specHeight;\n        int width = specWidth;\n        if (specHeightMode == MeasureSpec.AT_MOST) {\n            height = getPaddingBottom() + getPaddingTop();\n            int used_width = 0;\n            int line_max_height = 0;\n            for (int i = 0; i < count; i++) {\n                View child = getChildAt(i);\n                MarginLayoutParams mlp = (MarginLayoutParams) child.getLayoutParams();\n                int child_width = child.getMeasuredWidth() + mlp.leftMargin + mlp.rightMargin;\n                int child_height = child.getMeasuredHeight() + mlp.topMargin + mlp.bottomMargin;\n                //在这一行可以容纳\n                if (used_width + child_width <= width - getPaddingStart() - getPaddingEnd()) {\n                    line_max_height = Math.max(line_max_height, child_height);\n                    used_width += child_width;\n                } else {\n                    //切换到下一行\n                    height += line_max_height;\n                    used_width = child_width;\n                    line_max_height = child_height;\n                }\n            }\n            //加上最后一行的最大height\n            height += line_max_height;\n        }\n        setMeasuredDimension(width, height);\n    }\n\n    private final String TAG = \"test_log\";\n\n    @Override\n    protected void onLayout(boolean changed, int l, int t, int r, int b) {\n        int width = getMeasuredWidth() - getPaddingStart() - getPaddingEnd();\n        int used_width = 0;\n        int used_height = 0;\n\n        int count = getChildCount();\n        int last_line_max_height = 0;\n        for (int i = 0; i < count; i++) {\n            View child_view = getChildAt(i);\n            MarginLayoutParams mlp = (MarginLayoutParams) child_view.getLayoutParams();\n            //用于计算是否越界时需要包含margin\n            int child_width = child_view.getMeasuredWidth() + mlp.leftMargin + mlp.rightMargin;\n            int child_height = child_view.getMeasuredHeight() + mlp.topMargin + mlp.bottomMargin;\n            //layout时的位置，必须考虑padding\n            int layout_l, layout_t, layout_r, layout_b;\n            if (used_width + child_width <= width) {\n                layout_l = getPaddingStart() + used_width + mlp.leftMargin;\n                layout_t = getPaddingTop() + used_height + mlp.topMargin;\n                layout_r = layout_l + child_view.getMeasuredWidth();\n                layout_b = layout_t + child_view.getMeasuredHeight();\n\n                used_width += child_width;\n                //记录该行height的最大值\n                last_line_max_height = Math.max(last_line_max_height, child_height);\n            } else {\n                layout_l = getPaddingStart() + mlp.leftMargin;\n                layout_t = getPaddingTop() + used_height + last_line_max_height + mlp.topMargin;\n                layout_r = layout_l + child_view.getMeasuredWidth();\n                layout_b = layout_t + child_view.getMeasuredHeight();\n\n                used_height += last_line_max_height;\n                used_width = child_width;\n\n                last_line_max_height = child_height;\n            }\n            child_view.layout(layout_l, layout_t, layout_r, layout_b);\n        }\n    }\n\n    @Override\n    public LayoutParams generateLayoutParams(AttributeSet attrs) {\n        return new MarginLayoutParams(getContext(), attrs);\n    }\n\n    @Override\n    protected LayoutParams generateLayoutParams(LayoutParams p) {\n        return new MarginLayoutParams(p);\n    }\n\n    @Override\n    protected LayoutParams generateDefaultLayoutParams() {\n        return new MarginLayoutParams(super.generateDefaultLayoutParams());\n    }\n}\n\n```\n\n### 关于MeasureSpec\n\n父控件告诉子控件可获得的空间以及关于这个空间的约束条件\n\n#### SpecMode\n\n* EXACTLY\n  * 设置了精确的宽高。如width、height设置了具体值或者设置为 match_parent，都属于这种模式\n* AT_MOST\n  * width、height设置为wrap_content则属于这种模式。表示父容器只是限制了子view的最大值\n* UNSPECIFIED\n  * 这种模式一般用于系统， 父容器不对View有任何限制。 一般很少用\n\n### 关于view的Measure过程\n我们知道，整个绘制流程是从ViewRootImpl类中performTraversals()开始的，这里面分别执行performMeasure、performLayout、performDraw来完成整个绘制的三大流程。而三大流程都是至顶向下，今天这里只说measure的过程。\n    这里以DecorView(根View)面放着一个ViewGroup(ViewGroupA)ViewGroup里面放着一个View(ViewB)为例来说明整个测量的流程：\n* **ViewRootImpl.performTraversals()->performMeasure():**\n> 这里面会调getRootMeasureSpec（）根据手机屏幕的宽高和DecorView的LayoutParams生成DecorView的MeasureSpec,然后调用DecorView的measure()开始DecorView的测量\n* **DecorView.measure()->onMeasure():**\n> DecorView继承自FrameLayout，所以会走到FrameLayout的onMeasure(),onMeasure()里调measureChild()来根据上面说的规则为ViewGroupA生成MeasureSpec，并通过ViewGroupA.measure（）开始ViewGroupA的测量\n* **ViewGroupA.measure()->onMeasure():**\n>这是我们自定义的一个ViewGroup(继承自ViewGroup)\n假如我们没有重写onMeasure()的话，则默认调的是View.onMeasure()，则不会发起对子View的measure,它里面的子View也就不会被测量(0),而这个ViewGroup如果没有设置具体宽高的话，（wrap_content）则ViewGroup展示的就是父容器的宽高（根据上面说的MeasureSpec生成规则)。\n    所以如果我们继承自ViewGroup来自定义一个ViewGroup的话，是肯定要重写onMeasure()的，**里面要调用measureChild()来为子View生成MeasureSpec并调child.measure()开始对child的测量(getChildMeasureSpec()方法)，这样子View才能被测量显示。而如果我们要使设置的wrap_content生效，还要根据子View测量结果进行计算从而得到自己的宽高，最后通过调setMeasuredDimension(int measuredWidth, int measuredHeight)来设置自己的宽高，从而达到wrap_content的效果。**\n* **ViewB.measure()->onMeasure():**\n> View的测量相对于ViewGroup要简单点，因为不用去Measure child,但是一样的，如果要使wrap_conten生效需自己重写onMeasure()计算。\n\n### 测量子view时MeasureSpec的生成规则\n1. **当子View的宽高设置的是具体数值时**\n> 显然我们可以直接拿到子View的宽高，则子View宽高就确定了，不用再去考虑父容器的SpecMode了,**此时子View的SpecMode为EXACTLY，SpecSize就是设置的宽高。**\n2. **当子View的宽高设置的是match_parent**\n> 则**不管父容器的SpecMode是什么模式，子View的SpecSize就等于父容器的宽高，而子View的SpecMode随父容器的SpecMode。**（这里没有考虑UNSPECIFIED模式，如果父容器是UNSPECIFIED模式，则子View SpecSize为0，SpecMode为UNSPECIFIED）\n3. **当子View的宽高设置的是wrap_content,**\n> 因为这种情况父容器实在不知道子View应该多宽多高，**所以子View的SpecSize给的是父容器的宽高，也就是说只是给子View限制了一个最大宽高，而子View的SpecMode是AT_MOST模式。**（这里没有考虑UNSPECIFIED模式，如果父容器是UNSPECIFIED模式，则子View SpecSize为0，SpecMode为UNSPECIFIED）。\n    \n* 通过上面的解析我们可以知道，当你给一个View/ViewGroup设置宽高为具体数值或者match_parent，它都能正确的显示，但是如果你设置的是wrap_content，则默认显示出来是其父容器的大小，如果你想要它正常的显示为wrap_content，则你就要自己重写onMeasure()来自己计算它的宽高度并设置。**所以我们平常自定义View/ViewGroup的时候之所以要重写onMeasure()，就是为了能让wrap_content达到效果。**\n\n### 关于LayoutParams\n在上面的FlowLayout代码中，为了支持margin属性，使用了MarginLayoutParams。这个MarginLayoutParams继承自LayoutParams。**在使用中必须重写所有的generateLayoutParams()方法**\n尝试了一下，RelativeLayoutParams等都是继承自MarginLayoutParams\n","slug":"Android/自定义ViewGroup","published":1,"updated":"2019-06-02T10:17:09.307Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy9jfv24000z48zmhsmcd0j3","content":"<h1 id=\"自定义ViewGroup\"><a href=\"#自定义ViewGroup\" class=\"headerlink\" title=\"自定义ViewGroup\"></a>自定义ViewGroup</h1><h3 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h3><p><a href=\"https://blog.csdn.net/xmxkf/article/details/51500304#3-%E6%94%AF%E6%8C%81layoutmargin%E5%B1%9E%E6%80%A7\" target=\"_blank\" rel=\"noopener\">自定义LayoutParams</a><br><a href=\"https://blog.csdn.net/xmxkf/article/details/51490283\" target=\"_blank\" rel=\"noopener\">关于onMeasure过程的理解</a><br><a href=\"https://juejin.im/post/5ad37c476fb9a028bc2e32af\" target=\"_blank\" rel=\"noopener\">Measure测量流程全解析（简洁）</a></p>\n<h3 id=\"下面是继承自ViewGroup的FlowLayout标签流式布局\"><a href=\"#下面是继承自ViewGroup的FlowLayout标签流式布局\" class=\"headerlink\" title=\"下面是继承自ViewGroup的FlowLayout标签流式布局\"></a>下面是继承自ViewGroup的FlowLayout标签流式布局</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.AttributeSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.View;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.ViewGroup;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlowLayout</span> <span class=\"keyword\">extends</span> <span class=\"title\">ViewGroup</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FlowLayout</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FlowLayout</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context, attrs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FlowLayout</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyleAttr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> specWidth = MeasureSpec.getSize(widthMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> specHeight = MeasureSpec.getSize(heightMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> specWidthMode = MeasureSpec.getMode(widthMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> specHeightMode = MeasureSpec.getMode(heightMeasureSpec);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = getChildCount();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//计算child的大小</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">            View child = getChildAt(i);</span><br><span class=\"line\">            <span class=\"comment\">//measureChildWithMargins方法在计算时已经考虑到了padding, 所以这里widthUsed参数设置为0</span></span><br><span class=\"line\">            <span class=\"comment\">//这里为了支持margin，所以用measureChildWithMargins方法</span></span><br><span class=\"line\">            measureChildWithMargins(child,</span><br><span class=\"line\">                    widthMeasureSpec, <span class=\"number\">0</span>,</span><br><span class=\"line\">                    heightMeasureSpec, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//计算ViewGroup自身的大小</span></span><br><span class=\"line\">        <span class=\"comment\">//这里只要处理height的wrap_content情况就可以了</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> height = specHeight;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> width = specWidth;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (specHeightMode == MeasureSpec.AT_MOST) &#123;</span><br><span class=\"line\">            height = getPaddingBottom() + getPaddingTop();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> used_width = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> line_max_height = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">                View child = getChildAt(i);</span><br><span class=\"line\">                MarginLayoutParams mlp = (MarginLayoutParams) child.getLayoutParams();</span><br><span class=\"line\">                <span class=\"keyword\">int</span> child_width = child.getMeasuredWidth() + mlp.leftMargin + mlp.rightMargin;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> child_height = child.getMeasuredHeight() + mlp.topMargin + mlp.bottomMargin;</span><br><span class=\"line\">                <span class=\"comment\">//在这一行可以容纳</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (used_width + child_width &lt;= width - getPaddingStart() - getPaddingEnd()) &#123;</span><br><span class=\"line\">                    line_max_height = Math.max(line_max_height, child_height);</span><br><span class=\"line\">                    used_width += child_width;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//切换到下一行</span></span><br><span class=\"line\">                    height += line_max_height;</span><br><span class=\"line\">                    used_width = child_width;</span><br><span class=\"line\">                    line_max_height = child_height;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//加上最后一行的最大height</span></span><br><span class=\"line\">            height += line_max_height;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        setMeasuredDimension(width, height);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"test_log\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> width = getMeasuredWidth() - getPaddingStart() - getPaddingEnd();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> used_width = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> used_height = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = getChildCount();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> last_line_max_height = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">            View child_view = getChildAt(i);</span><br><span class=\"line\">            MarginLayoutParams mlp = (MarginLayoutParams) child_view.getLayoutParams();</span><br><span class=\"line\">            <span class=\"comment\">//用于计算是否越界时需要包含margin</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> child_width = child_view.getMeasuredWidth() + mlp.leftMargin + mlp.rightMargin;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> child_height = child_view.getMeasuredHeight() + mlp.topMargin + mlp.bottomMargin;</span><br><span class=\"line\">            <span class=\"comment\">//layout时的位置，必须考虑padding</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> layout_l, layout_t, layout_r, layout_b;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (used_width + child_width &lt;= width) &#123;</span><br><span class=\"line\">                layout_l = getPaddingStart() + used_width + mlp.leftMargin;</span><br><span class=\"line\">                layout_t = getPaddingTop() + used_height + mlp.topMargin;</span><br><span class=\"line\">                layout_r = layout_l + child_view.getMeasuredWidth();</span><br><span class=\"line\">                layout_b = layout_t + child_view.getMeasuredHeight();</span><br><span class=\"line\"></span><br><span class=\"line\">                used_width += child_width;</span><br><span class=\"line\">                <span class=\"comment\">//记录该行height的最大值</span></span><br><span class=\"line\">                last_line_max_height = Math.max(last_line_max_height, child_height);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                layout_l = getPaddingStart() + mlp.leftMargin;</span><br><span class=\"line\">                layout_t = getPaddingTop() + used_height + last_line_max_height + mlp.topMargin;</span><br><span class=\"line\">                layout_r = layout_l + child_view.getMeasuredWidth();</span><br><span class=\"line\">                layout_b = layout_t + child_view.getMeasuredHeight();</span><br><span class=\"line\"></span><br><span class=\"line\">                used_height += last_line_max_height;</span><br><span class=\"line\">                used_width = child_width;</span><br><span class=\"line\"></span><br><span class=\"line\">                last_line_max_height = child_height;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            child_view.layout(layout_l, layout_t, layout_r, layout_b);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> LayoutParams <span class=\"title\">generateLayoutParams</span><span class=\"params\">(AttributeSet attrs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MarginLayoutParams(getContext(), attrs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> LayoutParams <span class=\"title\">generateLayoutParams</span><span class=\"params\">(LayoutParams p)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MarginLayoutParams(p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> LayoutParams <span class=\"title\">generateDefaultLayoutParams</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MarginLayoutParams(<span class=\"keyword\">super</span>.generateDefaultLayoutParams());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"关于MeasureSpec\"><a href=\"#关于MeasureSpec\" class=\"headerlink\" title=\"关于MeasureSpec\"></a>关于MeasureSpec</h3><p>父控件告诉子控件可获得的空间以及关于这个空间的约束条件</p>\n<h4 id=\"SpecMode\"><a href=\"#SpecMode\" class=\"headerlink\" title=\"SpecMode\"></a>SpecMode</h4><ul>\n<li>EXACTLY<ul>\n<li>设置了精确的宽高。如width、height设置了具体值或者设置为 match_parent，都属于这种模式</li>\n</ul>\n</li>\n<li>AT_MOST<ul>\n<li>width、height设置为wrap_content则属于这种模式。表示父容器只是限制了子view的最大值</li>\n</ul>\n</li>\n<li>UNSPECIFIED<ul>\n<li>这种模式一般用于系统， 父容器不对View有任何限制。 一般很少用</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"关于view的Measure过程\"><a href=\"#关于view的Measure过程\" class=\"headerlink\" title=\"关于view的Measure过程\"></a>关于view的Measure过程</h3><p>我们知道，整个绘制流程是从ViewRootImpl类中performTraversals()开始的，这里面分别执行performMeasure、performLayout、performDraw来完成整个绘制的三大流程。而三大流程都是至顶向下，今天这里只说measure的过程。<br>    这里以DecorView(根View)面放着一个ViewGroup(ViewGroupA)ViewGroup里面放着一个View(ViewB)为例来说明整个测量的流程：</p>\n<ul>\n<li><strong>ViewRootImpl.performTraversals()-&gt;performMeasure():</strong><blockquote>\n<p>这里面会调getRootMeasureSpec（）根据手机屏幕的宽高和DecorView的LayoutParams生成DecorView的MeasureSpec,然后调用DecorView的measure()开始DecorView的测量</p>\n</blockquote>\n</li>\n<li><strong>DecorView.measure()-&gt;onMeasure():</strong><blockquote>\n<p>DecorView继承自FrameLayout，所以会走到FrameLayout的onMeasure(),onMeasure()里调measureChild()来根据上面说的规则为ViewGroupA生成MeasureSpec，并通过ViewGroupA.measure（）开始ViewGroupA的测量</p>\n</blockquote>\n</li>\n<li><strong>ViewGroupA.measure()-&gt;onMeasure():</strong><blockquote>\n<p>这是我们自定义的一个ViewGroup(继承自ViewGroup)<br>假如我们没有重写onMeasure()的话，则默认调的是View.onMeasure()，则不会发起对子View的measure,它里面的子View也就不会被测量(0),而这个ViewGroup如果没有设置具体宽高的话，（wrap_content）则ViewGroup展示的就是父容器的宽高（根据上面说的MeasureSpec生成规则)。<br>  所以如果我们继承自ViewGroup来自定义一个ViewGroup的话，是肯定要重写onMeasure()的，<strong>里面要调用measureChild()来为子View生成MeasureSpec并调child.measure()开始对child的测量(getChildMeasureSpec()方法)，这样子View才能被测量显示。而如果我们要使设置的wrap_content生效，还要根据子View测量结果进行计算从而得到自己的宽高，最后通过调setMeasuredDimension(int measuredWidth, int measuredHeight)来设置自己的宽高，从而达到wrap_content的效果。</strong></p>\n</blockquote>\n</li>\n<li><strong>ViewB.measure()-&gt;onMeasure():</strong><blockquote>\n<p>View的测量相对于ViewGroup要简单点，因为不用去Measure child,但是一样的，如果要使wrap_conten生效需自己重写onMeasure()计算。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"测量子view时MeasureSpec的生成规则\"><a href=\"#测量子view时MeasureSpec的生成规则\" class=\"headerlink\" title=\"测量子view时MeasureSpec的生成规则\"></a>测量子view时MeasureSpec的生成规则</h3><ol>\n<li><strong>当子View的宽高设置的是具体数值时</strong><blockquote>\n<p>显然我们可以直接拿到子View的宽高，则子View宽高就确定了，不用再去考虑父容器的SpecMode了,<strong>此时子View的SpecMode为EXACTLY，SpecSize就是设置的宽高。</strong></p>\n</blockquote>\n</li>\n<li><strong>当子View的宽高设置的是match_parent</strong><blockquote>\n<p>则<strong>不管父容器的SpecMode是什么模式，子View的SpecSize就等于父容器的宽高，而子View的SpecMode随父容器的SpecMode。</strong>（这里没有考虑UNSPECIFIED模式，如果父容器是UNSPECIFIED模式，则子View SpecSize为0，SpecMode为UNSPECIFIED）</p>\n</blockquote>\n</li>\n<li><strong>当子View的宽高设置的是wrap_content,</strong><blockquote>\n<p>因为这种情况父容器实在不知道子View应该多宽多高，<strong>所以子View的SpecSize给的是父容器的宽高，也就是说只是给子View限制了一个最大宽高，而子View的SpecMode是AT_MOST模式。</strong>（这里没有考虑UNSPECIFIED模式，如果父容器是UNSPECIFIED模式，则子View SpecSize为0，SpecMode为UNSPECIFIED）。</p>\n</blockquote>\n</li>\n</ol>\n<ul>\n<li>通过上面的解析我们可以知道，当你给一个View/ViewGroup设置宽高为具体数值或者match_parent，它都能正确的显示，但是如果你设置的是wrap_content，则默认显示出来是其父容器的大小，如果你想要它正常的显示为wrap_content，则你就要自己重写onMeasure()来自己计算它的宽高度并设置。<strong>所以我们平常自定义View/ViewGroup的时候之所以要重写onMeasure()，就是为了能让wrap_content达到效果。</strong></li>\n</ul>\n<h3 id=\"关于LayoutParams\"><a href=\"#关于LayoutParams\" class=\"headerlink\" title=\"关于LayoutParams\"></a>关于LayoutParams</h3><p>在上面的FlowLayout代码中，为了支持margin属性，使用了MarginLayoutParams。这个MarginLayoutParams继承自LayoutParams。<strong>在使用中必须重写所有的generateLayoutParams()方法</strong><br>尝试了一下，RelativeLayoutParams等都是继承自MarginLayoutParams</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"自定义ViewGroup\"><a href=\"#自定义ViewGroup\" class=\"headerlink\" title=\"自定义ViewGroup\"></a>自定义ViewGroup</h1><h3 id=\"参考文章\"><a href=\"#参考文章\" class=\"headerlink\" title=\"参考文章\"></a>参考文章</h3><p><a href=\"https://blog.csdn.net/xmxkf/article/details/51500304#3-%E6%94%AF%E6%8C%81layoutmargin%E5%B1%9E%E6%80%A7\" target=\"_blank\" rel=\"noopener\">自定义LayoutParams</a><br><a href=\"https://blog.csdn.net/xmxkf/article/details/51490283\" target=\"_blank\" rel=\"noopener\">关于onMeasure过程的理解</a><br><a href=\"https://juejin.im/post/5ad37c476fb9a028bc2e32af\" target=\"_blank\" rel=\"noopener\">Measure测量流程全解析（简洁）</a></p>\n<h3 id=\"下面是继承自ViewGroup的FlowLayout标签流式布局\"><a href=\"#下面是继承自ViewGroup的FlowLayout标签流式布局\" class=\"headerlink\" title=\"下面是继承自ViewGroup的FlowLayout标签流式布局\"></a>下面是继承自ViewGroup的FlowLayout标签流式布局</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> com.example.test;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.content.Context;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.AttributeSet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.util.Log;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.View;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.ViewGroup;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FlowLayout</span> <span class=\"keyword\">extends</span> <span class=\"title\">ViewGroup</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FlowLayout</span><span class=\"params\">(Context context)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FlowLayout</span><span class=\"params\">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context, attrs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">FlowLayout</span><span class=\"params\">(Context context, AttributeSet attrs, <span class=\"keyword\">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>(context, attrs, defStyleAttr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onMeasure</span><span class=\"params\">(<span class=\"keyword\">int</span> widthMeasureSpec, <span class=\"keyword\">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> specWidth = MeasureSpec.getSize(widthMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> specHeight = MeasureSpec.getSize(heightMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> specWidthMode = MeasureSpec.getMode(widthMeasureSpec);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> specHeightMode = MeasureSpec.getMode(heightMeasureSpec);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = getChildCount();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//计算child的大小</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">            View child = getChildAt(i);</span><br><span class=\"line\">            <span class=\"comment\">//measureChildWithMargins方法在计算时已经考虑到了padding, 所以这里widthUsed参数设置为0</span></span><br><span class=\"line\">            <span class=\"comment\">//这里为了支持margin，所以用measureChildWithMargins方法</span></span><br><span class=\"line\">            measureChildWithMargins(child,</span><br><span class=\"line\">                    widthMeasureSpec, <span class=\"number\">0</span>,</span><br><span class=\"line\">                    heightMeasureSpec, <span class=\"number\">0</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//计算ViewGroup自身的大小</span></span><br><span class=\"line\">        <span class=\"comment\">//这里只要处理height的wrap_content情况就可以了</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> height = specHeight;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> width = specWidth;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (specHeightMode == MeasureSpec.AT_MOST) &#123;</span><br><span class=\"line\">            height = getPaddingBottom() + getPaddingTop();</span><br><span class=\"line\">            <span class=\"keyword\">int</span> used_width = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> line_max_height = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">                View child = getChildAt(i);</span><br><span class=\"line\">                MarginLayoutParams mlp = (MarginLayoutParams) child.getLayoutParams();</span><br><span class=\"line\">                <span class=\"keyword\">int</span> child_width = child.getMeasuredWidth() + mlp.leftMargin + mlp.rightMargin;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> child_height = child.getMeasuredHeight() + mlp.topMargin + mlp.bottomMargin;</span><br><span class=\"line\">                <span class=\"comment\">//在这一行可以容纳</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span> (used_width + child_width &lt;= width - getPaddingStart() - getPaddingEnd()) &#123;</span><br><span class=\"line\">                    line_max_height = Math.max(line_max_height, child_height);</span><br><span class=\"line\">                    used_width += child_width;</span><br><span class=\"line\">                &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//切换到下一行</span></span><br><span class=\"line\">                    height += line_max_height;</span><br><span class=\"line\">                    used_width = child_width;</span><br><span class=\"line\">                    line_max_height = child_height;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            <span class=\"comment\">//加上最后一行的最大height</span></span><br><span class=\"line\">            height += line_max_height;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        setMeasuredDimension(width, height);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> String TAG = <span class=\"string\">\"test_log\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onLayout</span><span class=\"params\">(<span class=\"keyword\">boolean</span> changed, <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> t, <span class=\"keyword\">int</span> r, <span class=\"keyword\">int</span> b)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> width = getMeasuredWidth() - getPaddingStart() - getPaddingEnd();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> used_width = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> used_height = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = getChildCount();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> last_line_max_height = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; count; i++) &#123;</span><br><span class=\"line\">            View child_view = getChildAt(i);</span><br><span class=\"line\">            MarginLayoutParams mlp = (MarginLayoutParams) child_view.getLayoutParams();</span><br><span class=\"line\">            <span class=\"comment\">//用于计算是否越界时需要包含margin</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> child_width = child_view.getMeasuredWidth() + mlp.leftMargin + mlp.rightMargin;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> child_height = child_view.getMeasuredHeight() + mlp.topMargin + mlp.bottomMargin;</span><br><span class=\"line\">            <span class=\"comment\">//layout时的位置，必须考虑padding</span></span><br><span class=\"line\">            <span class=\"keyword\">int</span> layout_l, layout_t, layout_r, layout_b;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (used_width + child_width &lt;= width) &#123;</span><br><span class=\"line\">                layout_l = getPaddingStart() + used_width + mlp.leftMargin;</span><br><span class=\"line\">                layout_t = getPaddingTop() + used_height + mlp.topMargin;</span><br><span class=\"line\">                layout_r = layout_l + child_view.getMeasuredWidth();</span><br><span class=\"line\">                layout_b = layout_t + child_view.getMeasuredHeight();</span><br><span class=\"line\"></span><br><span class=\"line\">                used_width += child_width;</span><br><span class=\"line\">                <span class=\"comment\">//记录该行height的最大值</span></span><br><span class=\"line\">                last_line_max_height = Math.max(last_line_max_height, child_height);</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                layout_l = getPaddingStart() + mlp.leftMargin;</span><br><span class=\"line\">                layout_t = getPaddingTop() + used_height + last_line_max_height + mlp.topMargin;</span><br><span class=\"line\">                layout_r = layout_l + child_view.getMeasuredWidth();</span><br><span class=\"line\">                layout_b = layout_t + child_view.getMeasuredHeight();</span><br><span class=\"line\"></span><br><span class=\"line\">                used_height += last_line_max_height;</span><br><span class=\"line\">                used_width = child_width;</span><br><span class=\"line\"></span><br><span class=\"line\">                last_line_max_height = child_height;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            child_view.layout(layout_l, layout_t, layout_r, layout_b);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> LayoutParams <span class=\"title\">generateLayoutParams</span><span class=\"params\">(AttributeSet attrs)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MarginLayoutParams(getContext(), attrs);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> LayoutParams <span class=\"title\">generateLayoutParams</span><span class=\"params\">(LayoutParams p)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MarginLayoutParams(p);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> LayoutParams <span class=\"title\">generateDefaultLayoutParams</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> MarginLayoutParams(<span class=\"keyword\">super</span>.generateDefaultLayoutParams());</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"关于MeasureSpec\"><a href=\"#关于MeasureSpec\" class=\"headerlink\" title=\"关于MeasureSpec\"></a>关于MeasureSpec</h3><p>父控件告诉子控件可获得的空间以及关于这个空间的约束条件</p>\n<h4 id=\"SpecMode\"><a href=\"#SpecMode\" class=\"headerlink\" title=\"SpecMode\"></a>SpecMode</h4><ul>\n<li>EXACTLY<ul>\n<li>设置了精确的宽高。如width、height设置了具体值或者设置为 match_parent，都属于这种模式</li>\n</ul>\n</li>\n<li>AT_MOST<ul>\n<li>width、height设置为wrap_content则属于这种模式。表示父容器只是限制了子view的最大值</li>\n</ul>\n</li>\n<li>UNSPECIFIED<ul>\n<li>这种模式一般用于系统， 父容器不对View有任何限制。 一般很少用</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"关于view的Measure过程\"><a href=\"#关于view的Measure过程\" class=\"headerlink\" title=\"关于view的Measure过程\"></a>关于view的Measure过程</h3><p>我们知道，整个绘制流程是从ViewRootImpl类中performTraversals()开始的，这里面分别执行performMeasure、performLayout、performDraw来完成整个绘制的三大流程。而三大流程都是至顶向下，今天这里只说measure的过程。<br>    这里以DecorView(根View)面放着一个ViewGroup(ViewGroupA)ViewGroup里面放着一个View(ViewB)为例来说明整个测量的流程：</p>\n<ul>\n<li><strong>ViewRootImpl.performTraversals()-&gt;performMeasure():</strong><blockquote>\n<p>这里面会调getRootMeasureSpec（）根据手机屏幕的宽高和DecorView的LayoutParams生成DecorView的MeasureSpec,然后调用DecorView的measure()开始DecorView的测量</p>\n</blockquote>\n</li>\n<li><strong>DecorView.measure()-&gt;onMeasure():</strong><blockquote>\n<p>DecorView继承自FrameLayout，所以会走到FrameLayout的onMeasure(),onMeasure()里调measureChild()来根据上面说的规则为ViewGroupA生成MeasureSpec，并通过ViewGroupA.measure（）开始ViewGroupA的测量</p>\n</blockquote>\n</li>\n<li><strong>ViewGroupA.measure()-&gt;onMeasure():</strong><blockquote>\n<p>这是我们自定义的一个ViewGroup(继承自ViewGroup)<br>假如我们没有重写onMeasure()的话，则默认调的是View.onMeasure()，则不会发起对子View的measure,它里面的子View也就不会被测量(0),而这个ViewGroup如果没有设置具体宽高的话，（wrap_content）则ViewGroup展示的就是父容器的宽高（根据上面说的MeasureSpec生成规则)。<br>  所以如果我们继承自ViewGroup来自定义一个ViewGroup的话，是肯定要重写onMeasure()的，<strong>里面要调用measureChild()来为子View生成MeasureSpec并调child.measure()开始对child的测量(getChildMeasureSpec()方法)，这样子View才能被测量显示。而如果我们要使设置的wrap_content生效，还要根据子View测量结果进行计算从而得到自己的宽高，最后通过调setMeasuredDimension(int measuredWidth, int measuredHeight)来设置自己的宽高，从而达到wrap_content的效果。</strong></p>\n</blockquote>\n</li>\n<li><strong>ViewB.measure()-&gt;onMeasure():</strong><blockquote>\n<p>View的测量相对于ViewGroup要简单点，因为不用去Measure child,但是一样的，如果要使wrap_conten生效需自己重写onMeasure()计算。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"测量子view时MeasureSpec的生成规则\"><a href=\"#测量子view时MeasureSpec的生成规则\" class=\"headerlink\" title=\"测量子view时MeasureSpec的生成规则\"></a>测量子view时MeasureSpec的生成规则</h3><ol>\n<li><strong>当子View的宽高设置的是具体数值时</strong><blockquote>\n<p>显然我们可以直接拿到子View的宽高，则子View宽高就确定了，不用再去考虑父容器的SpecMode了,<strong>此时子View的SpecMode为EXACTLY，SpecSize就是设置的宽高。</strong></p>\n</blockquote>\n</li>\n<li><strong>当子View的宽高设置的是match_parent</strong><blockquote>\n<p>则<strong>不管父容器的SpecMode是什么模式，子View的SpecSize就等于父容器的宽高，而子View的SpecMode随父容器的SpecMode。</strong>（这里没有考虑UNSPECIFIED模式，如果父容器是UNSPECIFIED模式，则子View SpecSize为0，SpecMode为UNSPECIFIED）</p>\n</blockquote>\n</li>\n<li><strong>当子View的宽高设置的是wrap_content,</strong><blockquote>\n<p>因为这种情况父容器实在不知道子View应该多宽多高，<strong>所以子View的SpecSize给的是父容器的宽高，也就是说只是给子View限制了一个最大宽高，而子View的SpecMode是AT_MOST模式。</strong>（这里没有考虑UNSPECIFIED模式，如果父容器是UNSPECIFIED模式，则子View SpecSize为0，SpecMode为UNSPECIFIED）。</p>\n</blockquote>\n</li>\n</ol>\n<ul>\n<li>通过上面的解析我们可以知道，当你给一个View/ViewGroup设置宽高为具体数值或者match_parent，它都能正确的显示，但是如果你设置的是wrap_content，则默认显示出来是其父容器的大小，如果你想要它正常的显示为wrap_content，则你就要自己重写onMeasure()来自己计算它的宽高度并设置。<strong>所以我们平常自定义View/ViewGroup的时候之所以要重写onMeasure()，就是为了能让wrap_content达到效果。</strong></li>\n</ul>\n<h3 id=\"关于LayoutParams\"><a href=\"#关于LayoutParams\" class=\"headerlink\" title=\"关于LayoutParams\"></a>关于LayoutParams</h3><p>在上面的FlowLayout代码中，为了支持margin属性，使用了MarginLayoutParams。这个MarginLayoutParams继承自LayoutParams。<strong>在使用中必须重写所有的generateLayoutParams()方法</strong><br>尝试了一下，RelativeLayoutParams等都是继承自MarginLayoutParams</p>\n"},{"title":"多个cpp文件编译共享同一个.h文件的全局变量","date":"2019-04-13T05:12:22.000Z","_content":"\n# 多个cpp文件编译共享同一个.h文件的全局变量\n\n在多个cpp文件一起编译时，有事会出现.h文件中全局变量的重复定义，导致编译失败。下面是解决的方案:\n\n## 一个cpp文件多次#include一个.h文件\n> 使用#ifndef\n\n```c++\n//在.h头文件中\n#ifndef <标示> //自定义的一个标示, 习惯性用.h文件名大写\n#define <标示>\n//...头文件内容\n#endif\n```\n原理大概是在一个在头文件include的时候define一个标示，当再次include时检测标示是否已经定义过。是，则不再执行该头文件的内容\n\n**这种方法只能解决一个cpp源文件中的重复include问题**\n\n## 多个cpp文件多次#include一个.h文件\n### 使用static关键字\n```c++\n//.h头文件\nstatic int i;\nstatic void func();\n```\n* #### static修饰变量\n变量static标记之后，多个cpp文件include不会出现问题。\n**但是使用static之后，会在每个cpp作用域中创建拷贝，这实际上并没有达到 共享的目的**\n下面是网上的一些解释:\n> 定义全局变量时使用static，意味着该变量的作用域只限于定义它的源文件中，其它源文件不能访问。既然这种定义方式出现在头文件中，那么可以很自然地推测：包含了该头文件的所有源文件中都定义了这些变量，即该头文件被包含了多少次，这些变量就定义了多少次。\n> \n> 假如将上面两行代码的static去掉，编译的时候就会出现变量重定义的错误，这进一步证实了上面的推测，因为没有static的话变量的作用域是全局的，定义了两个以上的同名变量就会出现该错误。\n\n* #### static修饰函数\n函数标记为static表示只能在.h文件和定义该函数的cpp文件中被调用。其他文件中不可见。\n*似乎是这样的。。。我的理解。网上说static和inline经常配合使用*\n\n### 使用extern关键字\nextern表明该变量在别的地方已经定义过了，在这里要使用那个变量\n\n```c++\n//cpp文件\nextern int i;\n```\n经过实验，extern的不仅仅.h文件里定义，定义在其他cpp文件中的全局变量也是可以访问到的。\n\n定义在.h文件的情况下，**在使用extern时，不能include定义它的.h文件。**否则还是会出现重定义的问题。\n","source":"_posts/C/多个cpp文件编译共享同一个-h文件的全局变量.md","raw":"---\ntitle: 多个cpp文件编译共享同一个.h文件的全局变量\ndate: 2019-04-13 13:12:22\ncategories: \n- C/C++\ntags:\n---\n\n# 多个cpp文件编译共享同一个.h文件的全局变量\n\n在多个cpp文件一起编译时，有事会出现.h文件中全局变量的重复定义，导致编译失败。下面是解决的方案:\n\n## 一个cpp文件多次#include一个.h文件\n> 使用#ifndef\n\n```c++\n//在.h头文件中\n#ifndef <标示> //自定义的一个标示, 习惯性用.h文件名大写\n#define <标示>\n//...头文件内容\n#endif\n```\n原理大概是在一个在头文件include的时候define一个标示，当再次include时检测标示是否已经定义过。是，则不再执行该头文件的内容\n\n**这种方法只能解决一个cpp源文件中的重复include问题**\n\n## 多个cpp文件多次#include一个.h文件\n### 使用static关键字\n```c++\n//.h头文件\nstatic int i;\nstatic void func();\n```\n* #### static修饰变量\n变量static标记之后，多个cpp文件include不会出现问题。\n**但是使用static之后，会在每个cpp作用域中创建拷贝，这实际上并没有达到 共享的目的**\n下面是网上的一些解释:\n> 定义全局变量时使用static，意味着该变量的作用域只限于定义它的源文件中，其它源文件不能访问。既然这种定义方式出现在头文件中，那么可以很自然地推测：包含了该头文件的所有源文件中都定义了这些变量，即该头文件被包含了多少次，这些变量就定义了多少次。\n> \n> 假如将上面两行代码的static去掉，编译的时候就会出现变量重定义的错误，这进一步证实了上面的推测，因为没有static的话变量的作用域是全局的，定义了两个以上的同名变量就会出现该错误。\n\n* #### static修饰函数\n函数标记为static表示只能在.h文件和定义该函数的cpp文件中被调用。其他文件中不可见。\n*似乎是这样的。。。我的理解。网上说static和inline经常配合使用*\n\n### 使用extern关键字\nextern表明该变量在别的地方已经定义过了，在这里要使用那个变量\n\n```c++\n//cpp文件\nextern int i;\n```\n经过实验，extern的不仅仅.h文件里定义，定义在其他cpp文件中的全局变量也是可以访问到的。\n\n定义在.h文件的情况下，**在使用extern时，不能include定义它的.h文件。**否则还是会出现重定义的问题。\n","slug":"C/多个cpp文件编译共享同一个-h文件的全局变量","published":1,"updated":"2019-05-12T13:11:28.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy9jfv26001248zmd1o9hj3s","content":"<h1 id=\"多个cpp文件编译共享同一个-h文件的全局变量\"><a href=\"#多个cpp文件编译共享同一个-h文件的全局变量\" class=\"headerlink\" title=\"多个cpp文件编译共享同一个.h文件的全局变量\"></a>多个cpp文件编译共享同一个.h文件的全局变量</h1><p>在多个cpp文件一起编译时，有事会出现.h文件中全局变量的重复定义，导致编译失败。下面是解决的方案:</p>\n<h2 id=\"一个cpp文件多次-include一个-h文件\"><a href=\"#一个cpp文件多次-include一个-h文件\" class=\"headerlink\" title=\"一个cpp文件多次#include一个.h文件\"></a>一个cpp文件多次#include一个.h文件</h2><blockquote>\n<p>使用#ifndef</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在.h头文件中</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> <span class=\"meta-string\">&lt;标示&gt; //自定义的一个标示, 习惯性用.h文件名大写</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> <span class=\"meta-string\">&lt;标示&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//...头文件内容</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<p>原理大概是在一个在头文件include的时候define一个标示，当再次include时检测标示是否已经定义过。是，则不再执行该头文件的内容</p>\n<p><strong>这种方法只能解决一个cpp源文件中的重复include问题</strong></p>\n<h2 id=\"多个cpp文件多次-include一个-h文件\"><a href=\"#多个cpp文件多次-include一个-h文件\" class=\"headerlink\" title=\"多个cpp文件多次#include一个.h文件\"></a>多个cpp文件多次#include一个.h文件</h2><h3 id=\"使用static关键字\"><a href=\"#使用static关键字\" class=\"headerlink\" title=\"使用static关键字\"></a>使用static关键字</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//.h头文件</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> i;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h4 id=\"static修饰变量\"><a href=\"#static修饰变量\" class=\"headerlink\" title=\"static修饰变量\"></a>static修饰变量</h4><p>变量static标记之后，多个cpp文件include不会出现问题。<br><strong>但是使用static之后，会在每个cpp作用域中创建拷贝，这实际上并没有达到 共享的目的</strong><br>下面是网上的一些解释:</p>\n<blockquote>\n<p>定义全局变量时使用static，意味着该变量的作用域只限于定义它的源文件中，其它源文件不能访问。既然这种定义方式出现在头文件中，那么可以很自然地推测：包含了该头文件的所有源文件中都定义了这些变量，即该头文件被包含了多少次，这些变量就定义了多少次。</p>\n<p>假如将上面两行代码的static去掉，编译的时候就会出现变量重定义的错误，这进一步证实了上面的推测，因为没有static的话变量的作用域是全局的，定义了两个以上的同名变量就会出现该错误。</p>\n</blockquote>\n</li>\n<li><h4 id=\"static修饰函数\"><a href=\"#static修饰函数\" class=\"headerlink\" title=\"static修饰函数\"></a>static修饰函数</h4><p>函数标记为static表示只能在.h文件和定义该函数的cpp文件中被调用。其他文件中不可见。<br><em>似乎是这样的。。。我的理解。网上说static和inline经常配合使用</em></p>\n</li>\n</ul>\n<h3 id=\"使用extern关键字\"><a href=\"#使用extern关键字\" class=\"headerlink\" title=\"使用extern关键字\"></a>使用extern关键字</h3><p>extern表明该变量在别的地方已经定义过了，在这里要使用那个变量</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//cpp文件</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">int</span> i;</span><br></pre></td></tr></table></figure>\n<p>经过实验，extern的不仅仅.h文件里定义，定义在其他cpp文件中的全局变量也是可以访问到的。</p>\n<p>定义在.h文件的情况下，<strong>在使用extern时，不能include定义它的.h文件。</strong>否则还是会出现重定义的问题。</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"多个cpp文件编译共享同一个-h文件的全局变量\"><a href=\"#多个cpp文件编译共享同一个-h文件的全局变量\" class=\"headerlink\" title=\"多个cpp文件编译共享同一个.h文件的全局变量\"></a>多个cpp文件编译共享同一个.h文件的全局变量</h1><p>在多个cpp文件一起编译时，有事会出现.h文件中全局变量的重复定义，导致编译失败。下面是解决的方案:</p>\n<h2 id=\"一个cpp文件多次-include一个-h文件\"><a href=\"#一个cpp文件多次-include一个-h文件\" class=\"headerlink\" title=\"一个cpp文件多次#include一个.h文件\"></a>一个cpp文件多次#include一个.h文件</h2><blockquote>\n<p>使用#ifndef</p>\n</blockquote>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//在.h头文件中</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> <span class=\"meta-string\">&lt;标示&gt; //自定义的一个标示, 习惯性用.h文件名大写</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> <span class=\"meta-string\">&lt;标示&gt;</span></span></span><br><span class=\"line\"><span class=\"comment\">//...头文件内容</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure>\n<p>原理大概是在一个在头文件include的时候define一个标示，当再次include时检测标示是否已经定义过。是，则不再执行该头文件的内容</p>\n<p><strong>这种方法只能解决一个cpp源文件中的重复include问题</strong></p>\n<h2 id=\"多个cpp文件多次-include一个-h文件\"><a href=\"#多个cpp文件多次-include一个-h文件\" class=\"headerlink\" title=\"多个cpp文件多次#include一个.h文件\"></a>多个cpp文件多次#include一个.h文件</h2><h3 id=\"使用static关键字\"><a href=\"#使用static关键字\" class=\"headerlink\" title=\"使用static关键字\"></a>使用static关键字</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//.h头文件</span></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"keyword\">int</span> i;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">func</span><span class=\"params\">()</span></span>;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><h4 id=\"static修饰变量\"><a href=\"#static修饰变量\" class=\"headerlink\" title=\"static修饰变量\"></a>static修饰变量</h4><p>变量static标记之后，多个cpp文件include不会出现问题。<br><strong>但是使用static之后，会在每个cpp作用域中创建拷贝，这实际上并没有达到 共享的目的</strong><br>下面是网上的一些解释:</p>\n<blockquote>\n<p>定义全局变量时使用static，意味着该变量的作用域只限于定义它的源文件中，其它源文件不能访问。既然这种定义方式出现在头文件中，那么可以很自然地推测：包含了该头文件的所有源文件中都定义了这些变量，即该头文件被包含了多少次，这些变量就定义了多少次。</p>\n<p>假如将上面两行代码的static去掉，编译的时候就会出现变量重定义的错误，这进一步证实了上面的推测，因为没有static的话变量的作用域是全局的，定义了两个以上的同名变量就会出现该错误。</p>\n</blockquote>\n</li>\n<li><h4 id=\"static修饰函数\"><a href=\"#static修饰函数\" class=\"headerlink\" title=\"static修饰函数\"></a>static修饰函数</h4><p>函数标记为static表示只能在.h文件和定义该函数的cpp文件中被调用。其他文件中不可见。<br><em>似乎是这样的。。。我的理解。网上说static和inline经常配合使用</em></p>\n</li>\n</ul>\n<h3 id=\"使用extern关键字\"><a href=\"#使用extern关键字\" class=\"headerlink\" title=\"使用extern关键字\"></a>使用extern关键字</h3><p>extern表明该变量在别的地方已经定义过了，在这里要使用那个变量</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//cpp文件</span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"keyword\">int</span> i;</span><br></pre></td></tr></table></figure>\n<p>经过实验，extern的不仅仅.h文件里定义，定义在其他cpp文件中的全局变量也是可以访问到的。</p>\n<p>定义在.h文件的情况下，<strong>在使用extern时，不能include定义它的.h文件。</strong>否则还是会出现重定义的问题。</p>\n"},{"title":"Jni入门","date":"2019-04-13T05:12:47.000Z","categries":["java"],"_content":"\n# Jni入门\n\n参考:\n[JNI 开发流程 - JNI/NDK 开发指南 - 极客学院Wiki](http://wiki.jikexueyuan.com/project/jni-ndk-developer-guide/workflow.html)\n\n### 1、编写native方法，使用javah创建头文件\n```java\npublic class HelloWorld {\n    public static native String sayHello(String name); // 1.声明这是一个native函数，由本地代码实现\n}\n```\n\n```java\njavah -jni -classpath JniCalcINterface \n```\n参数说明：\nclasspath：类搜索路径，这里表示从当前的 bin 目录下查找\nd：将生成的头文件放到当前的 jni 目录下\no： 指定生成的头文件名称，默认以类全路径名生成（包名+类名.h）\n\n**注意：-d和-o只能使用其中一个参数。**\n\n创建的.h文件如下\n```c++\n/* DO NOT EDIT THIS FILE - it is machine generated */  \n#include <jni.h>  \n/* Header for class com_study_jnilearn_HelloWorld */  \n\n#ifndef _Included_com_study_jnilearn_HelloWorld  \n#define _Included_com_study_jnilearn_HelloWorld  \n#ifdef __cplusplus  \nextern \"C\" {  \n#endif  \n/* \n * Class:     com_study_jnilearn_HelloWorld \n * Method:    sayHello \n * Signature: (Ljava/lang/String;)Ljava/lang/String; \n */  \nJNIEXPORT jstring JNICALL Java_com_study_jnilearn_HelloWorld_sayHello  \n  (JNIEnv *, jclass, jstring);  \n\n#ifdef __cplusplus  \n}  \n#endif  \n#endif  \n```\n\n**注意 extern \"C\"表示兼容C语言，当调用C编写的.h头文件或者函数的时候，一定要写在extern \"C\"后面\n\n### 3、编译出so文件\n```shell\ngcc -I$JAVA_HOME/include -I$JAVA_HOME/include/linux -fPIC -shared HelloWorld.c -o libHelloWorld.so  \n```\n\n参数含义:\n\n-L \n* 表示要链接的库所在的目录。-L.  表示要链接的库在当前目录， -L/usr/lib 表示要连接的库在/usr/lib下。目录在/usr/lib时，系统会自动搜索这个目录，可以不用指明。\n\n-l (L的小写)\n* 表示需要链接库的名称，注意不是库文件名称，比如库文件为 libtest.so，那么库名称为test\n\n-include\n* 包含头文件，这个很少用，因为一般情况下在源码中，都有指定头文件。\n\n-I (i 的大写)\n* 指定头文件的所在的目录，可以使用相对路径。\n\n-shared \n* 指定生成动态链接库\n\n-fPIC\n* 表示编译为位置独立的代码，不用此选项的话编译后的代码是位置相关的所以动态载入时事通过代码拷贝的方式来满足不同进程的需要，而不能达到真正代码共享的目的。\n\n-o \n* 指定编译后动态库生成的路径和文件名\n\n### 4、加载动态库\n```java\nstatic{\n    System.loadLibrary(\"HelloWorld\");  //方式一\n    System.load(\"/Users/yangxin/Desktop/libHelloWorld.jnilib\" //方式二);\n}\n```\n方式1：只需要指定动态库的名字即可，不需要加lib前缀，也不要加.so、.dll和.jnilib后缀\n方式2：指定动态库的绝对路径名，需要加上前缀和后缀 **推荐使用这种方法**\n\n如果使用方式1，java 会去 java.library.path 系统属性指定的目录下查找动态库文件，如果没有找到会抛出java.lang.UnsatisfiedLinkError异常。\n有两种方式可以让 Java 从 java.library.path 找到动态链接库文件，聪明的你应该已经想到了。\n\n* 将动态链接库拷贝到java.library.path目录下, linux可以拷贝到/usr/local/lib目录下\n\n* 给 jvm 添加“-Djava.library.path=动态链接库搜索目录”参数，指定系统属性 java.library.path 的值 java -Djava.library.path=/Users/yangxin/Desktop Linux/Unix 环境下可以通过设置 LD_LIBRARY_PATH 环境变量，指定库的搜索目录。\n\n### 5、运行java程序\n\n\n\n","source":"_posts/Java/Jni入门.md","raw":"---\ntitle: Jni入门\ndate: 2019-04-13 13:12:47\ncategries:\n- java\ntags:\n- jni\n---\n\n# Jni入门\n\n参考:\n[JNI 开发流程 - JNI/NDK 开发指南 - 极客学院Wiki](http://wiki.jikexueyuan.com/project/jni-ndk-developer-guide/workflow.html)\n\n### 1、编写native方法，使用javah创建头文件\n```java\npublic class HelloWorld {\n    public static native String sayHello(String name); // 1.声明这是一个native函数，由本地代码实现\n}\n```\n\n```java\njavah -jni -classpath JniCalcINterface \n```\n参数说明：\nclasspath：类搜索路径，这里表示从当前的 bin 目录下查找\nd：将生成的头文件放到当前的 jni 目录下\no： 指定生成的头文件名称，默认以类全路径名生成（包名+类名.h）\n\n**注意：-d和-o只能使用其中一个参数。**\n\n创建的.h文件如下\n```c++\n/* DO NOT EDIT THIS FILE - it is machine generated */  \n#include <jni.h>  \n/* Header for class com_study_jnilearn_HelloWorld */  \n\n#ifndef _Included_com_study_jnilearn_HelloWorld  \n#define _Included_com_study_jnilearn_HelloWorld  \n#ifdef __cplusplus  \nextern \"C\" {  \n#endif  \n/* \n * Class:     com_study_jnilearn_HelloWorld \n * Method:    sayHello \n * Signature: (Ljava/lang/String;)Ljava/lang/String; \n */  \nJNIEXPORT jstring JNICALL Java_com_study_jnilearn_HelloWorld_sayHello  \n  (JNIEnv *, jclass, jstring);  \n\n#ifdef __cplusplus  \n}  \n#endif  \n#endif  \n```\n\n**注意 extern \"C\"表示兼容C语言，当调用C编写的.h头文件或者函数的时候，一定要写在extern \"C\"后面\n\n### 3、编译出so文件\n```shell\ngcc -I$JAVA_HOME/include -I$JAVA_HOME/include/linux -fPIC -shared HelloWorld.c -o libHelloWorld.so  \n```\n\n参数含义:\n\n-L \n* 表示要链接的库所在的目录。-L.  表示要链接的库在当前目录， -L/usr/lib 表示要连接的库在/usr/lib下。目录在/usr/lib时，系统会自动搜索这个目录，可以不用指明。\n\n-l (L的小写)\n* 表示需要链接库的名称，注意不是库文件名称，比如库文件为 libtest.so，那么库名称为test\n\n-include\n* 包含头文件，这个很少用，因为一般情况下在源码中，都有指定头文件。\n\n-I (i 的大写)\n* 指定头文件的所在的目录，可以使用相对路径。\n\n-shared \n* 指定生成动态链接库\n\n-fPIC\n* 表示编译为位置独立的代码，不用此选项的话编译后的代码是位置相关的所以动态载入时事通过代码拷贝的方式来满足不同进程的需要，而不能达到真正代码共享的目的。\n\n-o \n* 指定编译后动态库生成的路径和文件名\n\n### 4、加载动态库\n```java\nstatic{\n    System.loadLibrary(\"HelloWorld\");  //方式一\n    System.load(\"/Users/yangxin/Desktop/libHelloWorld.jnilib\" //方式二);\n}\n```\n方式1：只需要指定动态库的名字即可，不需要加lib前缀，也不要加.so、.dll和.jnilib后缀\n方式2：指定动态库的绝对路径名，需要加上前缀和后缀 **推荐使用这种方法**\n\n如果使用方式1，java 会去 java.library.path 系统属性指定的目录下查找动态库文件，如果没有找到会抛出java.lang.UnsatisfiedLinkError异常。\n有两种方式可以让 Java 从 java.library.path 找到动态链接库文件，聪明的你应该已经想到了。\n\n* 将动态链接库拷贝到java.library.path目录下, linux可以拷贝到/usr/local/lib目录下\n\n* 给 jvm 添加“-Djava.library.path=动态链接库搜索目录”参数，指定系统属性 java.library.path 的值 java -Djava.library.path=/Users/yangxin/Desktop Linux/Unix 环境下可以通过设置 LD_LIBRARY_PATH 环境变量，指定库的搜索目录。\n\n### 5、运行java程序\n\n\n\n","slug":"Java/Jni入门","published":1,"updated":"2019-05-12T13:10:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy9jfv27001748zm6xe3tz3t","content":"<h1 id=\"Jni入门\"><a href=\"#Jni入门\" class=\"headerlink\" title=\"Jni入门\"></a>Jni入门</h1><p>参考:<br><a href=\"http://wiki.jikexueyuan.com/project/jni-ndk-developer-guide/workflow.html\" target=\"_blank\" rel=\"noopener\">JNI 开发流程 - JNI/NDK 开发指南 - 极客学院Wiki</a></p>\n<h3 id=\"1、编写native方法，使用javah创建头文件\"><a href=\"#1、编写native方法，使用javah创建头文件\" class=\"headerlink\" title=\"1、编写native方法，使用javah创建头文件\"></a>1、编写native方法，使用javah创建头文件</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorld</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> String <span class=\"title\">sayHello</span><span class=\"params\">(String name)</span></span>; <span class=\"comment\">// 1.声明这是一个native函数，由本地代码实现</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javah -jni -classpath JniCalcINterface</span><br></pre></td></tr></table></figure>\n<p>参数说明：<br>classpath：类搜索路径，这里表示从当前的 bin 目录下查找<br>d：将生成的头文件放到当前的 jni 目录下<br>o： 指定生成的头文件名称，默认以类全路径名生成（包名+类名.h）</p>\n<p><strong>注意：-d和-o只能使用其中一个参数。</strong></p>\n<p>创建的.h文件如下<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* DO NOT EDIT THIS FILE - it is machine generated */</span>  </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;jni.h&gt;  </span></span></span><br><span class=\"line\"><span class=\"comment\">/* Header for class com_study_jnilearn_HelloWorld */</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _Included_com_study_jnilearn_HelloWorld  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _Included_com_study_jnilearn_HelloWorld  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> __cplusplus  </span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">\"C\"</span> &#123;  </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span>  </span></span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\"> * Class:     com_study_jnilearn_HelloWorld </span></span><br><span class=\"line\"><span class=\"comment\"> * Method:    sayHello </span></span><br><span class=\"line\"><span class=\"comment\"> * Signature: (Ljava/lang/String;)Ljava/lang/String; </span></span><br><span class=\"line\"><span class=\"comment\"> */</span>  </span><br><span class=\"line\">JNIEXPORT jstring JNICALL Java_com_study_jnilearn_HelloWorld_sayHello  </span><br><span class=\"line\">  (JNIEnv *, jclass, jstring);  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> __cplusplus  </span></span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure></p>\n<p>**注意 extern “C”表示兼容C语言，当调用C编写的.h头文件或者函数的时候，一定要写在extern “C”后面</p>\n<h3 id=\"3、编译出so文件\"><a href=\"#3、编译出so文件\" class=\"headerlink\" title=\"3、编译出so文件\"></a>3、编译出so文件</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -I$JAVA_HOME/include -I$JAVA_HOME/include/linux -fPIC -shared HelloWorld.c -o libHelloWorld.so</span><br></pre></td></tr></table></figure>\n<p>参数含义:</p>\n<p>-L </p>\n<ul>\n<li>表示要链接的库所在的目录。-L.  表示要链接的库在当前目录， -L/usr/lib 表示要连接的库在/usr/lib下。目录在/usr/lib时，系统会自动搜索这个目录，可以不用指明。</li>\n</ul>\n<p>-l (L的小写)</p>\n<ul>\n<li>表示需要链接库的名称，注意不是库文件名称，比如库文件为 libtest.so，那么库名称为test</li>\n</ul>\n<p>-include</p>\n<ul>\n<li>包含头文件，这个很少用，因为一般情况下在源码中，都有指定头文件。</li>\n</ul>\n<p>-I (i 的大写)</p>\n<ul>\n<li>指定头文件的所在的目录，可以使用相对路径。</li>\n</ul>\n<p>-shared </p>\n<ul>\n<li>指定生成动态链接库</li>\n</ul>\n<p>-fPIC</p>\n<ul>\n<li>表示编译为位置独立的代码，不用此选项的话编译后的代码是位置相关的所以动态载入时事通过代码拷贝的方式来满足不同进程的需要，而不能达到真正代码共享的目的。</li>\n</ul>\n<p>-o </p>\n<ul>\n<li>指定编译后动态库生成的路径和文件名</li>\n</ul>\n<h3 id=\"4、加载动态库\"><a href=\"#4、加载动态库\" class=\"headerlink\" title=\"4、加载动态库\"></a>4、加载动态库</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\">    System.loadLibrary(<span class=\"string\">\"HelloWorld\"</span>);  <span class=\"comment\">//方式一</span></span><br><span class=\"line\">    System.load(<span class=\"string\">\"/Users/yangxin/Desktop/libHelloWorld.jnilib\"</span> <span class=\"comment\">//方式二);</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>方式1：只需要指定动态库的名字即可，不需要加lib前缀，也不要加.so、.dll和.jnilib后缀<br>方式2：指定动态库的绝对路径名，需要加上前缀和后缀 <strong>推荐使用这种方法</strong></p>\n<p>如果使用方式1，java 会去 java.library.path 系统属性指定的目录下查找动态库文件，如果没有找到会抛出java.lang.UnsatisfiedLinkError异常。<br>有两种方式可以让 Java 从 java.library.path 找到动态链接库文件，聪明的你应该已经想到了。</p>\n<ul>\n<li><p>将动态链接库拷贝到java.library.path目录下, linux可以拷贝到/usr/local/lib目录下</p>\n</li>\n<li><p>给 jvm 添加“-Djava.library.path=动态链接库搜索目录”参数，指定系统属性 java.library.path 的值 java -Djava.library.path=/Users/yangxin/Desktop Linux/Unix 环境下可以通过设置 LD_LIBRARY_PATH 环境变量，指定库的搜索目录。</p>\n</li>\n</ul>\n<h3 id=\"5、运行java程序\"><a href=\"#5、运行java程序\" class=\"headerlink\" title=\"5、运行java程序\"></a>5、运行java程序</h3>","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Jni入门\"><a href=\"#Jni入门\" class=\"headerlink\" title=\"Jni入门\"></a>Jni入门</h1><p>参考:<br><a href=\"http://wiki.jikexueyuan.com/project/jni-ndk-developer-guide/workflow.html\" target=\"_blank\" rel=\"noopener\">JNI 开发流程 - JNI/NDK 开发指南 - 极客学院Wiki</a></p>\n<h3 id=\"1、编写native方法，使用javah创建头文件\"><a href=\"#1、编写native方法，使用javah创建头文件\" class=\"headerlink\" title=\"1、编写native方法，使用javah创建头文件\"></a>1、编写native方法，使用javah创建头文件</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloWorld</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">native</span> String <span class=\"title\">sayHello</span><span class=\"params\">(String name)</span></span>; <span class=\"comment\">// 1.声明这是一个native函数，由本地代码实现</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javah -jni -classpath JniCalcINterface</span><br></pre></td></tr></table></figure>\n<p>参数说明：<br>classpath：类搜索路径，这里表示从当前的 bin 目录下查找<br>d：将生成的头文件放到当前的 jni 目录下<br>o： 指定生成的头文件名称，默认以类全路径名生成（包名+类名.h）</p>\n<p><strong>注意：-d和-o只能使用其中一个参数。</strong></p>\n<p>创建的.h文件如下<br><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* DO NOT EDIT THIS FILE - it is machine generated */</span>  </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span> <span class=\"meta-string\">&lt;jni.h&gt;  </span></span></span><br><span class=\"line\"><span class=\"comment\">/* Header for class com_study_jnilearn_HelloWorld */</span>  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifndef</span> _Included_com_study_jnilearn_HelloWorld  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> _Included_com_study_jnilearn_HelloWorld  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> __cplusplus  </span></span><br><span class=\"line\"><span class=\"keyword\">extern</span> <span class=\"string\">\"C\"</span> &#123;  </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span>  </span></span><br><span class=\"line\"><span class=\"comment\">/* </span></span><br><span class=\"line\"><span class=\"comment\"> * Class:     com_study_jnilearn_HelloWorld </span></span><br><span class=\"line\"><span class=\"comment\"> * Method:    sayHello </span></span><br><span class=\"line\"><span class=\"comment\"> * Signature: (Ljava/lang/String;)Ljava/lang/String; </span></span><br><span class=\"line\"><span class=\"comment\"> */</span>  </span><br><span class=\"line\">JNIEXPORT jstring JNICALL Java_com_study_jnilearn_HelloWorld_sayHello  </span><br><span class=\"line\">  (JNIEnv *, jclass, jstring);  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">ifdef</span> __cplusplus  </span></span><br><span class=\"line\">&#125;  </span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span>  </span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">endif</span></span></span><br></pre></td></tr></table></figure></p>\n<p>**注意 extern “C”表示兼容C语言，当调用C编写的.h头文件或者函数的时候，一定要写在extern “C”后面</p>\n<h3 id=\"3、编译出so文件\"><a href=\"#3、编译出so文件\" class=\"headerlink\" title=\"3、编译出so文件\"></a>3、编译出so文件</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gcc -I$JAVA_HOME/include -I$JAVA_HOME/include/linux -fPIC -shared HelloWorld.c -o libHelloWorld.so</span><br></pre></td></tr></table></figure>\n<p>参数含义:</p>\n<p>-L </p>\n<ul>\n<li>表示要链接的库所在的目录。-L.  表示要链接的库在当前目录， -L/usr/lib 表示要连接的库在/usr/lib下。目录在/usr/lib时，系统会自动搜索这个目录，可以不用指明。</li>\n</ul>\n<p>-l (L的小写)</p>\n<ul>\n<li>表示需要链接库的名称，注意不是库文件名称，比如库文件为 libtest.so，那么库名称为test</li>\n</ul>\n<p>-include</p>\n<ul>\n<li>包含头文件，这个很少用，因为一般情况下在源码中，都有指定头文件。</li>\n</ul>\n<p>-I (i 的大写)</p>\n<ul>\n<li>指定头文件的所在的目录，可以使用相对路径。</li>\n</ul>\n<p>-shared </p>\n<ul>\n<li>指定生成动态链接库</li>\n</ul>\n<p>-fPIC</p>\n<ul>\n<li>表示编译为位置独立的代码，不用此选项的话编译后的代码是位置相关的所以动态载入时事通过代码拷贝的方式来满足不同进程的需要，而不能达到真正代码共享的目的。</li>\n</ul>\n<p>-o </p>\n<ul>\n<li>指定编译后动态库生成的路径和文件名</li>\n</ul>\n<h3 id=\"4、加载动态库\"><a href=\"#4、加载动态库\" class=\"headerlink\" title=\"4、加载动态库\"></a>4、加载动态库</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">static</span>&#123;</span><br><span class=\"line\">    System.loadLibrary(<span class=\"string\">\"HelloWorld\"</span>);  <span class=\"comment\">//方式一</span></span><br><span class=\"line\">    System.load(<span class=\"string\">\"/Users/yangxin/Desktop/libHelloWorld.jnilib\"</span> <span class=\"comment\">//方式二);</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>方式1：只需要指定动态库的名字即可，不需要加lib前缀，也不要加.so、.dll和.jnilib后缀<br>方式2：指定动态库的绝对路径名，需要加上前缀和后缀 <strong>推荐使用这种方法</strong></p>\n<p>如果使用方式1，java 会去 java.library.path 系统属性指定的目录下查找动态库文件，如果没有找到会抛出java.lang.UnsatisfiedLinkError异常。<br>有两种方式可以让 Java 从 java.library.path 找到动态链接库文件，聪明的你应该已经想到了。</p>\n<ul>\n<li><p>将动态链接库拷贝到java.library.path目录下, linux可以拷贝到/usr/local/lib目录下</p>\n</li>\n<li><p>给 jvm 添加“-Djava.library.path=动态链接库搜索目录”参数，指定系统属性 java.library.path 的值 java -Djava.library.path=/Users/yangxin/Desktop Linux/Unix 环境下可以通过设置 LD_LIBRARY_PATH 环境变量，指定库的搜索目录。</p>\n</li>\n</ul>\n<h3 id=\"5、运行java程序\"><a href=\"#5、运行java程序\" class=\"headerlink\" title=\"5、运行java程序\"></a>5、运行java程序</h3>"},{"title":"mysql配置远程登录","date":"2019-05-04T03:04:44.000Z","_content":"\n# mysql配置远程登录\n\n#### 1、给用户远程登录权限：\n```shell\ngrant all privileges  on *.* to root@'%' identified by \"password\";\n\nFLUSH PRIVILEGES\n```\n\nroot可以替换为其他用户名， %表示任意ip， 也可以换成指定的ip， password替换成密码\n\n使用以下命令可以查看用户的登录权限\n```shell\nselect host,user,password from user;\n```\n\n#### 2、 lnmp环境配置iptables\n\nlnmp一键安装环境默认是禁用iptables远程登录的，\n\n* 查看iptables规则：\n```shell\niptables -L -n --line-numbers\n```\n输入样例如下：\n![图片](/images/mysql_iptables.png)\n可以看到3306端口的target为drop\n\n* 删除对应的drop规则\n\n```shell\niptables -D INPUT 5\n```\n\n\niptables的使用参考：\n[https://www.vpser.net/security/linux-iptables.html]()\n\n","source":"_posts/Linux/mysql配置远程登录.md","raw":"---\ntitle: mysql配置远程登录\ndate: 2019-05-04 11:04:44\ntags:\n- mysql\n- Linux\ncategories:\n- Linux\n---\n\n# mysql配置远程登录\n\n#### 1、给用户远程登录权限：\n```shell\ngrant all privileges  on *.* to root@'%' identified by \"password\";\n\nFLUSH PRIVILEGES\n```\n\nroot可以替换为其他用户名， %表示任意ip， 也可以换成指定的ip， password替换成密码\n\n使用以下命令可以查看用户的登录权限\n```shell\nselect host,user,password from user;\n```\n\n#### 2、 lnmp环境配置iptables\n\nlnmp一键安装环境默认是禁用iptables远程登录的，\n\n* 查看iptables规则：\n```shell\niptables -L -n --line-numbers\n```\n输入样例如下：\n![图片](/images/mysql_iptables.png)\n可以看到3306端口的target为drop\n\n* 删除对应的drop规则\n\n```shell\niptables -D INPUT 5\n```\n\n\niptables的使用参考：\n[https://www.vpser.net/security/linux-iptables.html]()\n\n","slug":"Linux/mysql配置远程登录","published":1,"updated":"2019-05-04T03:28:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy9jfv28001a48zm3e2gbcyv","content":"<h1 id=\"mysql配置远程登录\"><a href=\"#mysql配置远程登录\" class=\"headerlink\" title=\"mysql配置远程登录\"></a>mysql配置远程登录</h1><h4 id=\"1、给用户远程登录权限：\"><a href=\"#1、给用户远程登录权限：\" class=\"headerlink\" title=\"1、给用户远程登录权限：\"></a>1、给用户远程登录权限：</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grant all privileges  on *.* to root@'%' identified by \"password\";</span><br><span class=\"line\"></span><br><span class=\"line\">FLUSH PRIVILEGES</span><br></pre></td></tr></table></figure>\n<p>root可以替换为其他用户名， %表示任意ip， 也可以换成指定的ip， password替换成密码</p>\n<p>使用以下命令可以查看用户的登录权限<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select host,user,password from user;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2、-lnmp环境配置iptables\"><a href=\"#2、-lnmp环境配置iptables\" class=\"headerlink\" title=\"2、 lnmp环境配置iptables\"></a>2、 lnmp环境配置iptables</h4><p>lnmp一键安装环境默认是禁用iptables远程登录的，</p>\n<ul>\n<li>查看iptables规则：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -L -n --line-numbers</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>输入样例如下：<br><img src=\"/images/mysql_iptables.png\" alt=\"图片\"><br>可以看到3306端口的target为drop</p>\n<ul>\n<li>删除对应的drop规则</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -D INPUT 5</span><br></pre></td></tr></table></figure>\n<p>iptables的使用参考：<br><a href>https://www.vpser.net/security/linux-iptables.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"mysql配置远程登录\"><a href=\"#mysql配置远程登录\" class=\"headerlink\" title=\"mysql配置远程登录\"></a>mysql配置远程登录</h1><h4 id=\"1、给用户远程登录权限：\"><a href=\"#1、给用户远程登录权限：\" class=\"headerlink\" title=\"1、给用户远程登录权限：\"></a>1、给用户远程登录权限：</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grant all privileges  on *.* to root@'%' identified by \"password\";</span><br><span class=\"line\"></span><br><span class=\"line\">FLUSH PRIVILEGES</span><br></pre></td></tr></table></figure>\n<p>root可以替换为其他用户名， %表示任意ip， 也可以换成指定的ip， password替换成密码</p>\n<p>使用以下命令可以查看用户的登录权限<br><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">select host,user,password from user;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"2、-lnmp环境配置iptables\"><a href=\"#2、-lnmp环境配置iptables\" class=\"headerlink\" title=\"2、 lnmp环境配置iptables\"></a>2、 lnmp环境配置iptables</h4><p>lnmp一键安装环境默认是禁用iptables远程登录的，</p>\n<ul>\n<li>查看iptables规则：<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -L -n --line-numbers</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>输入样例如下：<br><img src=\"/images/mysql_iptables.png\" alt=\"图片\"><br>可以看到3306端口的target为drop</p>\n<ul>\n<li>删除对应的drop规则</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">iptables -D INPUT 5</span><br></pre></td></tr></table></figure>\n<p>iptables的使用参考：<br><a href>https://www.vpser.net/security/linux-iptables.html</a></p>\n"},{"title":"apt常用命令","date":"2019-05-02T11:49:35.000Z","categroies":["Linux"],"_content":"\n# apt常用命令\n参考：\n[apt命令安装指定版本](https://www.centos.bz/2017/07/ubuntu-apt-cache-version-list-install-specify-version/)\n## 更新\n> sudo apt-get update     //更新源\nsudo apt-get upgrade    //更新已安装的包\nsudo apt-get dist-upgrade       //升级系统\nsudo apt-get dselect-upgrade    //使用 dselect 升级\n\n## 查询\n> apt-cache search package      \n> //搜索包　　\napt-cache show package          \n//获取包的相关信息，如说明、大小、版本等　\napt-cache depends package       \n//了解使用依赖\napt-cache rdepends package      \n//是查看该包被哪些包依赖\n\n```shell\napt-cache madison <package name>  //列出所有来源的版本...madison是一个apt-cache子命令，可以通过man apt-cache查询更多用法。\n\napt-cache policy <<package name>>  /*将列出所有来源的版本。信息会比上面详细一点*/\n\napt-show-versions -a <<package name>> //列举出所有版本，且能查看是否已经安装。还可以通过apt-show-versions -u <>来查询是否有升级版本。\n```\n\n## 安装\n> sudo apt-get install package      \n> //安装包　　\nsudo apt-get install package - - reinstall      \n//重新安装包　　\nsudo apt-get -f install         \n//修复安装   (\"-f = ——fix-missing\")\n\n## 删除\nsudo apt-get remove package \n删除包　　\nsudo apt-get remove package - - purge \n删除包，包括删除配置文件等\nsudo apt-get clean && sudo apt-get autoclean \n清理无用的包\nsudo apt-get check \n检查是否有损坏的依赖\n\n## 其他\n> sudo apt-get build-dep package \n> 安装相关的编译环境\napt-get source package \n下载该包的源代码\n\n\n\n","source":"_posts/Linux/apt常用命令.md","raw":"---\ntitle: apt常用命令\ndate: 2019-05-02 19:49:35\ntags: \n- Linux\ncategroies:\n- Linux\n---\n\n# apt常用命令\n参考：\n[apt命令安装指定版本](https://www.centos.bz/2017/07/ubuntu-apt-cache-version-list-install-specify-version/)\n## 更新\n> sudo apt-get update     //更新源\nsudo apt-get upgrade    //更新已安装的包\nsudo apt-get dist-upgrade       //升级系统\nsudo apt-get dselect-upgrade    //使用 dselect 升级\n\n## 查询\n> apt-cache search package      \n> //搜索包　　\napt-cache show package          \n//获取包的相关信息，如说明、大小、版本等　\napt-cache depends package       \n//了解使用依赖\napt-cache rdepends package      \n//是查看该包被哪些包依赖\n\n```shell\napt-cache madison <package name>  //列出所有来源的版本...madison是一个apt-cache子命令，可以通过man apt-cache查询更多用法。\n\napt-cache policy <<package name>>  /*将列出所有来源的版本。信息会比上面详细一点*/\n\napt-show-versions -a <<package name>> //列举出所有版本，且能查看是否已经安装。还可以通过apt-show-versions -u <>来查询是否有升级版本。\n```\n\n## 安装\n> sudo apt-get install package      \n> //安装包　　\nsudo apt-get install package - - reinstall      \n//重新安装包　　\nsudo apt-get -f install         \n//修复安装   (\"-f = ——fix-missing\")\n\n## 删除\nsudo apt-get remove package \n删除包　　\nsudo apt-get remove package - - purge \n删除包，包括删除配置文件等\nsudo apt-get clean && sudo apt-get autoclean \n清理无用的包\nsudo apt-get check \n检查是否有损坏的依赖\n\n## 其他\n> sudo apt-get build-dep package \n> 安装相关的编译环境\napt-get source package \n下载该包的源代码\n\n\n\n","slug":"Linux/apt常用命令","published":1,"updated":"2019-05-02T12:01:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjy9jfv29001d48zm92248kvb","content":"<h1 id=\"apt常用命令\"><a href=\"#apt常用命令\" class=\"headerlink\" title=\"apt常用命令\"></a>apt常用命令</h1><p>参考：<br><a href=\"https://www.centos.bz/2017/07/ubuntu-apt-cache-version-list-install-specify-version/\" target=\"_blank\" rel=\"noopener\">apt命令安装指定版本</a></p>\n<h2 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h2><blockquote>\n<p>sudo apt-get update     //更新源<br>sudo apt-get upgrade    //更新已安装的包<br>sudo apt-get dist-upgrade       //升级系统<br>sudo apt-get dselect-upgrade    //使用 dselect 升级</p>\n</blockquote>\n<h2 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h2><blockquote>\n<p>apt-cache search package<br>//搜索包　　<br>apt-cache show package<br>//获取包的相关信息，如说明、大小、版本等　<br>apt-cache depends package<br>//了解使用依赖<br>apt-cache rdepends package<br>//是查看该包被哪些包依赖</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-cache madison &lt;package name&gt;  //列出所有来源的版本...madison是一个apt-cache子命令，可以通过man apt-cache查询更多用法。</span><br><span class=\"line\"></span><br><span class=\"line\">apt-cache policy &lt;&lt;package name&gt;&gt;  /*将列出所有来源的版本。信息会比上面详细一点*/</span><br><span class=\"line\"></span><br><span class=\"line\">apt-show-versions -a &lt;&lt;package name&gt;&gt; //列举出所有版本，且能查看是否已经安装。还可以通过apt-show-versions -u &lt;&gt;来查询是否有升级版本。</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><blockquote>\n<p>sudo apt-get install package<br>//安装包　　<br>sudo apt-get install package - - reinstall<br>//重新安装包　　<br>sudo apt-get -f install<br>//修复安装   (“-f = ——fix-missing”)</p>\n</blockquote>\n<h2 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h2><p>sudo apt-get remove package<br>删除包　　<br>sudo apt-get remove package - - purge<br>删除包，包括删除配置文件等<br>sudo apt-get clean &amp;&amp; sudo apt-get autoclean<br>清理无用的包<br>sudo apt-get check<br>检查是否有损坏的依赖</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><blockquote>\n<p>sudo apt-get build-dep package<br>安装相关的编译环境<br>apt-get source package<br>下载该包的源代码</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"apt常用命令\"><a href=\"#apt常用命令\" class=\"headerlink\" title=\"apt常用命令\"></a>apt常用命令</h1><p>参考：<br><a href=\"https://www.centos.bz/2017/07/ubuntu-apt-cache-version-list-install-specify-version/\" target=\"_blank\" rel=\"noopener\">apt命令安装指定版本</a></p>\n<h2 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h2><blockquote>\n<p>sudo apt-get update     //更新源<br>sudo apt-get upgrade    //更新已安装的包<br>sudo apt-get dist-upgrade       //升级系统<br>sudo apt-get dselect-upgrade    //使用 dselect 升级</p>\n</blockquote>\n<h2 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h2><blockquote>\n<p>apt-cache search package<br>//搜索包　　<br>apt-cache show package<br>//获取包的相关信息，如说明、大小、版本等　<br>apt-cache depends package<br>//了解使用依赖<br>apt-cache rdepends package<br>//是查看该包被哪些包依赖</p>\n</blockquote>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-cache madison &lt;package name&gt;  //列出所有来源的版本...madison是一个apt-cache子命令，可以通过man apt-cache查询更多用法。</span><br><span class=\"line\"></span><br><span class=\"line\">apt-cache policy &lt;&lt;package name&gt;&gt;  /*将列出所有来源的版本。信息会比上面详细一点*/</span><br><span class=\"line\"></span><br><span class=\"line\">apt-show-versions -a &lt;&lt;package name&gt;&gt; //列举出所有版本，且能查看是否已经安装。还可以通过apt-show-versions -u &lt;&gt;来查询是否有升级版本。</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><blockquote>\n<p>sudo apt-get install package<br>//安装包　　<br>sudo apt-get install package - - reinstall<br>//重新安装包　　<br>sudo apt-get -f install<br>//修复安装   (“-f = ——fix-missing”)</p>\n</blockquote>\n<h2 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h2><p>sudo apt-get remove package<br>删除包　　<br>sudo apt-get remove package - - purge<br>删除包，包括删除配置文件等<br>sudo apt-get clean &amp;&amp; sudo apt-get autoclean<br>清理无用的包<br>sudo apt-get check<br>检查是否有损坏的依赖</p>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><blockquote>\n<p>sudo apt-get build-dep package<br>安装相关的编译环境<br>apt-get source package<br>下载该包的源代码</p>\n</blockquote>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjy9jfux9000048zm2bi427nm","category_id":"cjy9jfuxe000348zmrc3k5rrn","_id":"cjy9jfuxf000448zmpeic8kp3"},{"post_id":"cjy9jfv1r000b48zm6v5f2zvz","category_id":"cjy9jfv1q000848zmq3rv1e2g","_id":"cjy9jfv1x000i48zm480eg823"},{"post_id":"cjy9jfv1s000c48zm873aodmu","category_id":"cjy9jfv1q000848zmq3rv1e2g","_id":"cjy9jfv1z000m48zmr4j7w7q8"},{"post_id":"cjy9jfv1v000g48zmk5t8orn9","category_id":"cjy9jfv1q000848zmq3rv1e2g","_id":"cjy9jfv20000p48zm00irbyq7"},{"post_id":"cjy9jfv1p000748zmju8p3vbd","category_id":"cjy9jfv1q000848zmq3rv1e2g","_id":"cjy9jfv21000u48zmjnj2oe5u"},{"post_id":"cjy9jfv1w000h48zm6nw5uael","category_id":"cjy9jfv1q000848zmq3rv1e2g","_id":"cjy9jfv23000w48zmdy2uxaso"},{"post_id":"cjy9jfv1q000a48zm5srpu1rl","category_id":"cjy9jfv1q000848zmq3rv1e2g","_id":"cjy9jfv24001048zmnu39q7v8"},{"post_id":"cjy9jfv21000t48zmrz0xtbug","category_id":"cjy9jfv1q000848zmq3rv1e2g","_id":"cjy9jfv26001348zm2c870qa4"},{"post_id":"cjy9jfv1o000648zmszgsg7vr","category_id":"cjy9jfv1q000848zmq3rv1e2g","_id":"cjy9jfv28001848zm6p9us0nj"},{"post_id":"cjy9jfv1o000648zmszgsg7vr","category_id":"cjy9jfv20000q48zm7e27j3hn","_id":"cjy9jfv29001b48zmurcrs4ey"},{"post_id":"cjy9jfv1y000l48zm4odzdkmw","category_id":"cjy9jfv1q000848zmq3rv1e2g","_id":"cjy9jfv2a001e48zmxfmptd70"},{"post_id":"cjy9jfv1y000l48zm4odzdkmw","category_id":"cjy9jfv20000q48zm7e27j3hn","_id":"cjy9jfv2b001g48zmsp6xuerr"},{"post_id":"cjy9jfv1z000o48zmi94xkluj","category_id":"cjy9jfv1q000848zmq3rv1e2g","_id":"cjy9jfv2b001i48zmc8x7cqti"},{"post_id":"cjy9jfv1z000o48zmi94xkluj","category_id":"cjy9jfv27001448zmfq3qa840","_id":"cjy9jfv2c001l48zm0x8anupj"},{"post_id":"cjy9jfv22000v48zmqp7nm0bu","category_id":"cjy9jfv29001c48zmfcmr5s5f","_id":"cjy9jfv2c001n48zmqabz51n4"},{"post_id":"cjy9jfv24000z48zmhsmcd0j3","category_id":"cjy9jfv1q000848zmq3rv1e2g","_id":"cjy9jfv2d001s48zm4at7soha"},{"post_id":"cjy9jfv24000z48zmhsmcd0j3","category_id":"cjy9jfv2b001h48zma3kpo4h5","_id":"cjy9jfv2d001u48zmtkck7jsx"},{"post_id":"cjy9jfv26001248zmd1o9hj3s","category_id":"cjy9jfv29001c48zmfcmr5s5f","_id":"cjy9jfv2e001v48zm1rb0pbyw"},{"post_id":"cjy9jfv28001a48zm3e2gbcyv","category_id":"cjy9jfv2d001r48zm5fk7vliv","_id":"cjy9jfv2e001y48zmdkf3rhed"}],"PostTag":[{"post_id":"cjy9jfv1o000648zmszgsg7vr","tag_id":"cjy9jfv1q000948zm2a08e9fo","_id":"cjy9jfv1v000f48zmhlznk337"},{"post_id":"cjy9jfv1p000748zmju8p3vbd","tag_id":"cjy9jfv1u000e48zmiypl2ez2","_id":"cjy9jfv1z000n48zmo4tryzoh"},{"post_id":"cjy9jfv1y000l48zm4odzdkmw","tag_id":"cjy9jfv1q000948zm2a08e9fo","_id":"cjy9jfv21000s48zm65iis8l3"},{"post_id":"cjy9jfv1q000a48zm5srpu1rl","tag_id":"cjy9jfv1y000k48zmksvnbcpt","_id":"cjy9jfv26001148zmbdsana7n"},{"post_id":"cjy9jfv1q000a48zm5srpu1rl","tag_id":"cjy9jfv21000r48zmubqhxesz","_id":"cjy9jfv27001548zmojhy8mrw"},{"post_id":"cjy9jfv1r000b48zm6v5f2zvz","tag_id":"cjy9jfv21000r48zmubqhxesz","_id":"cjy9jfv28001948zmtfkhndje"},{"post_id":"cjy9jfv1s000c48zm873aodmu","tag_id":"cjy9jfv27001648zmgods7nkf","_id":"cjy9jfv2c001k48zmx43kqtem"},{"post_id":"cjy9jfv1s000c48zm873aodmu","tag_id":"cjy9jfv21000r48zmubqhxesz","_id":"cjy9jfv2c001m48zmm7njypxn"},{"post_id":"cjy9jfv1v000g48zmk5t8orn9","tag_id":"cjy9jfv2b001j48zm03n5ttuw","_id":"cjy9jfv2d001q48zm5ehrnsrl"},{"post_id":"cjy9jfv1w000h48zm6nw5uael","tag_id":"cjy9jfv2b001j48zm03n5ttuw","_id":"cjy9jfv2e001x48zm06xud6op"},{"post_id":"cjy9jfv1w000h48zm6nw5uael","tag_id":"cjy9jfv2d001t48zm4gxq6tcn","_id":"cjy9jfv2e001z48zmfp6k748b"},{"post_id":"cjy9jfv1z000o48zmi94xkluj","tag_id":"cjy9jfv2e001w48zmdde5q076","_id":"cjy9jfv2e002148zmf44n5ye7"},{"post_id":"cjy9jfv21000t48zmrz0xtbug","tag_id":"cjy9jfv2b001j48zm03n5ttuw","_id":"cjy9jfv2f002348zmi13pmor0"},{"post_id":"cjy9jfv24000z48zmhsmcd0j3","tag_id":"cjy9jfv2f002248zmjiycbiu8","_id":"cjy9jfv2f002548zm59jzxxpt"},{"post_id":"cjy9jfv27001748zm6xe3tz3t","tag_id":"cjy9jfv2f002448zm79fsz2zp","_id":"cjy9jfv2f002748zmgbmka3wk"},{"post_id":"cjy9jfv28001a48zm3e2gbcyv","tag_id":"cjy9jfv2f002648zmaa0era5c","_id":"cjy9jfv2g002a48zmwikfsjb3"},{"post_id":"cjy9jfv28001a48zm3e2gbcyv","tag_id":"cjy9jfv2f002848zm0114ya8u","_id":"cjy9jfv2g002b48zmzwtu6ryd"},{"post_id":"cjy9jfv29001d48zm92248kvb","tag_id":"cjy9jfv2f002848zm0114ya8u","_id":"cjy9jfv2g002c48zm3uddi8hu"}],"Tag":[{"name":"AndroidStudio","_id":"cjy9jfv1q000948zm2a08e9fo"},{"name":"Activity","_id":"cjy9jfv1u000e48zmiypl2ez2"},{"name":"MVP","_id":"cjy9jfv1y000k48zmksvnbcpt"},{"name":"内存泄露","_id":"cjy9jfv21000r48zmubqhxesz"},{"name":"Handler","_id":"cjy9jfv27001648zmgods7nkf"},{"name":"View","_id":"cjy9jfv2b001j48zm03n5ttuw"},{"name":"RecyclerView","_id":"cjy9jfv2d001t48zm4gxq6tcn"},{"name":"service","_id":"cjy9jfv2e001w48zmdde5q076"},{"name":"view","_id":"cjy9jfv2f002248zmjiycbiu8"},{"name":"jni","_id":"cjy9jfv2f002448zm79fsz2zp"},{"name":"mysql","_id":"cjy9jfv2f002648zmaa0era5c"},{"name":"Linux","_id":"cjy9jfv2f002848zm0114ya8u"}]}}