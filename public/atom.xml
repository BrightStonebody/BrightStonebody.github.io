<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>BrightStone</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-21T02:52:31.440Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>BrightStone</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/10/21/hello-world/"/>
    <id>http://yoursite.com/2019/10/21/hello-world/</id>
    <published>2019-10-21T02:52:31.440Z</published>
    <updated>2019-10-21T02:52:31.440Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="hello-world" scheme="http://yoursite.com/categories/hello-world/"/>
    
    
  </entry>
  
  <entry>
    <title>RemoteView刷新View</title>
    <link href="http://yoursite.com/2019/09/15/Android/RemoteView%E5%88%B7%E6%96%B0View/"/>
    <id>http://yoursite.com/2019/09/15/Android/RemoteView刷新View/</id>
    <published>2019-09-15T08:09:50.000Z</published>
    <updated>2019-10-21T02:52:31.425Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RemoteView刷新View"><a href="#RemoteView刷新View" class="headerlink" title="RemoteView刷新View"></a>RemoteView刷新View</h1><h2 id="通知栏"><a href="#通知栏" class="headerlink" title="通知栏"></a>通知栏</h2><p>在Notification通知栏的相关开发中，RemoteView刷新view只要重新发送一遍Notification，保证message_id是相同的就可以了<br>但是由于在实际的需求中出现了异步刷新的场景。即，当要刷新时，先直接刷新textview，调起线程刷新获取image资源，在回调里调用RemoteView的setxxx方法，刷新ImageView。 在这种情况下，出现了刷新不及时的情况，图片的刷新有时成功有时不成功。</p><p>在这种情况下，更改了刷新逻辑，当数据更新时直接刷新textview，并发送notification。在回调里调用RemoteView的相关方法，刷新image，并在回调里再次发送notification，以确保通知的view是最新的。<br>其中，虽然是发送了两次notification，但是并不用每次都new一个新的RemoteView出来， 即RemoteView可以重复利用，setContent的时候设置回去就好了</p><h2 id="关于Intent"><a href="#关于Intent" class="headerlink" title="关于Intent"></a>关于Intent</h2><p>由于通知栏的按钮的响应操作都很复杂，所以采取的方法时每次都发送一个广播，添加指定的action和extra，在广播接收器中进行指定的操作。</p><p>在操作的过程出出现了一个问题。通知栏有多个按钮，但是一开始，不同按钮的intent的action和extra的key都是一样的，extra的value不同，然后在广播接收器内判断extra来区分不同的按钮。<br>这样做并没达到想要的效果。所有的按钮接收到的intent中的extra值 都是得到的代码中添加的最后一个value值。</p><p>也就是说，<strong>Intent中，设置了相同的action值，相同的extra的key，之后设置的value值是会覆盖之前的value的。即使是不同的Intent对象</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;RemoteView刷新View&quot;&gt;&lt;a href=&quot;#RemoteView刷新View&quot; class=&quot;headerlink&quot; title=&quot;RemoteView刷新View&quot;&gt;&lt;/a&gt;RemoteView刷新View&lt;/h1&gt;&lt;h2 id=&quot;通知栏&quot;&gt;&lt;a h
      
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
      <category term="View" scheme="http://yoursite.com/categories/Android/View/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="View" scheme="http://yoursite.com/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>RecyclerView全局刷新view避免卡顿</title>
    <link href="http://yoursite.com/2019/09/15/Android/RecyclerView%E5%85%A8%E5%B1%80%E5%88%B7%E6%96%B0view%E9%81%BF%E5%85%8D%E5%8D%A1%E9%A1%BF/"/>
    <id>http://yoursite.com/2019/09/15/Android/RecyclerView全局刷新view避免卡顿/</id>
    <published>2019-09-15T07:33:22.000Z</published>
    <updated>2019-10-21T02:52:31.425Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RecyclerView全局刷新View避免卡顿"><a href="#RecyclerView全局刷新View避免卡顿" class="headerlink" title="RecyclerView全局刷新View避免卡顿"></a>RecyclerView全局刷新View避免卡顿</h1><h2 id="onBindViewHolder-VH-holder-int-position，-List-payloads"><a href="#onBindViewHolder-VH-holder-int-position，-List-payloads" class="headerlink" title="onBindViewHolder(VH holder, int position， List payloads)"></a>onBindViewHolder(VH holder, int position， List<object> payloads)</object></h2><p><br><br>这个方法默认是调用普通的onBindViewHolder方法。<br>我们可以重写这个方法，在payloads参数为空时，执行默认的onBindViewHolder，在其不为空时，刷新每个item特定的view<br>在调用notifyxxxx类似方法的时候，调用包含payload参数的重载方法</p><h3 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h3><p>实践了上面的方法，发现卡顿的问题得到了缓解，但是并没有完全解决</p><h2 id="创建并操作自己的ViewHolder缓存"><a href="#创建并操作自己的ViewHolder缓存" class="headerlink" title="创建并操作自己的ViewHolder缓存"></a>创建并操作自己的ViewHolder缓存</h2><h3 id="还是有卡顿的原因："><a href="#还是有卡顿的原因：" class="headerlink" title="还是有卡顿的原因："></a>还是有卡顿的原因：</h3><p>在调用notifyxxxx相关方法时，即使添加了payload参数，依然会有很多item刷新时走onCreateViewHolder方法，在这里进行inflate操作会非常耗时。所以要想办法跳过onCreateViewHolder方法</p><h4 id="创建自己的viewholder缓存"><a href="#创建自己的viewholder缓存" class="headerlink" title="创建自己的viewholder缓存"></a>创建自己的viewholder缓存</h4><ol><li><p>创建缓存集合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private List&lt;ViewHolder&gt; holderList = new ArrayList&lt;&gt;();</span><br></pre></td></tr></table></figure></li><li><p>添加到集合</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">holder.itemView.setTag(itemData));</span><br><span class="line">if (!holderList.contains(holder)) &#123;</span><br><span class="line">    holderList.add(holder);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>因为在添加之前做了是否包含的判断，所以集合中按道理之后包含显示的ViewHolder以及缓存的ViewHolder，集合的size并不会无限制的增长。</p><ol start="3"><li>刷新<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public void update()&#123;</span><br><span class="line">    for (ViewHolder holder : holderList) &#123; </span><br><span class="line">        ItemData itemData = (ItemData) holder.itemView.getTag();</span><br><span class="line">        // update view</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>卡顿问题解决</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;RecyclerView全局刷新View避免卡顿&quot;&gt;&lt;a href=&quot;#RecyclerView全局刷新View避免卡顿&quot; class=&quot;headerlink&quot; title=&quot;RecyclerView全局刷新View避免卡顿&quot;&gt;&lt;/a&gt;RecyclerView全局
      
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
      <category term="View" scheme="http://yoursite.com/categories/Android/View/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="View" scheme="http://yoursite.com/tags/View/"/>
    
      <category term="RecyclerView" scheme="http://yoursite.com/tags/RecyclerView/"/>
    
  </entry>
  
  <entry>
    <title>通知铃声的自定义遇到的问题</title>
    <link href="http://yoursite.com/2019/08/28/Android/%E9%80%9A%E7%9F%A5%E9%93%83%E5%A3%B0%E7%9A%84%E8%87%AA%E5%AE%9A%E4%B9%89%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2019/08/28/Android/通知铃声的自定义遇到的问题/</id>
    <published>2019-08-28T15:07:53.000Z</published>
    <updated>2019-10-21T02:52:31.440Z</updated>
    
    <content type="html"><![CDATA[<h1 id="通知铃声自定义遇到的问题"><a href="#通知铃声自定义遇到的问题" class="headerlink" title="通知铃声自定义遇到的问题"></a>通知铃声自定义遇到的问题</h1><h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><p>在自定义通知铃声是，当铃声的uri来自本地文件，或者是项目的资源文件，当通知弹出时，没有声音</p><h2 id="问题根源："><a href="#问题根源：" class="headerlink" title="问题根源："></a>问题根源：</h2><h3 id="1-从系统文件管理器中获取文件，从得到的uri中获取原始路径"><a href="#1-从系统文件管理器中获取文件，从得到的uri中获取原始路径" class="headerlink" title="1.从系统文件管理器中获取文件，从得到的uri中获取原始路径"></a>1.从系统文件管理器中获取文件，从得到的uri中获取原始路径</h3><p><strong>所有尝试从Uri中获取原始路径的方法，都是不推荐和不可靠的</strong></p><p>网上大部分的方法都是解析Uri，使用cursor读取对应的字段，然后获取到文件的路径，但是，经过尝试后发现，大部分机型中，cursor并没有那个字段，当然也就得不到对应的路径。</p><p>正确的做法应当是，使用ContentResolver获取到对应的文件流，拷问文件到App的目录中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">InputStream fis = getContentResolver().openInputStream(uri);</span><br></pre></td></tr></table></figure><h3 id="2-将拷贝的文件转化为uri"><a href="#2-将拷贝的文件转化为uri" class="headerlink" title="2. 将拷贝的文件转化为uri"></a>2. 将拷贝的文件转化为uri</h3><p><strong>失败的尝试：使用Uri.fromFile():</strong><br>首先，App将自己的铃声文件设置到notificaiton中，系统要弹出一个notification时，会调用我们的项目目录的铃声文件。</p><p>在Android7.0以上的版本中，对这种行为进行了限制，获取文件的Uri一定要使用FileProvider，而不能直接调用fromFile()方法.</p><h3 id="3-grantUriPermission"><a href="#3-grantUriPermission" class="headerlink" title="3. grantUriPermission()"></a>3. grantUriPermission()</h3><p>在某些机型中，使用file自定义notification的声音，仍然不能正常工作。<br><strong>设置logcat的Filter选项为No Filter, 会出现FileProvider Permission denial 的 warning</strong><br>为什么要选择No Filter选项才会看到这个warning。<br>是因为，弹出notification是系统服务，和我们的APP项目不是一个包名<br>在file转uri之后添加一个授权的语句就可以了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">getApplicationContext().grantUriPermission(&quot;com.android.systemui&quot;,</span><br><span class="line">                Uri.parse(info.uri), Intent.FLAG_GRANT_READ_URI_PERMISSION);</span><br></pre></td></tr></table></figure></p><p>包名com.android.systemui是系统服务的一个包名，负责notification、StatusBar等的相关操作</p><p>到这里问题就解决了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;通知铃声自定义遇到的问题&quot;&gt;&lt;a href=&quot;#通知铃声自定义遇到的问题&quot; class=&quot;headerlink&quot; title=&quot;通知铃声自定义遇到的问题&quot;&gt;&lt;/a&gt;通知铃声自定义遇到的问题&lt;/h1&gt;&lt;h2 id=&quot;问题：&quot;&gt;&lt;a href=&quot;#问题：&quot; class
      
    
    </summary>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="Notification" scheme="http://yoursite.com/tags/Notification/"/>
    
  </entry>
  
  <entry>
    <title>RecyclerView缓存机制总结</title>
    <link href="http://yoursite.com/2019/08/15/Android/RecyclerView%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/08/15/Android/RecyclerView缓存机制总结/</id>
    <published>2019-08-14T16:31:17.000Z</published>
    <updated>2019-10-21T02:52:31.425Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RecyclerView缓存机制总结"><a href="#RecyclerView缓存机制总结" class="headerlink" title="RecyclerView缓存机制总结"></a>RecyclerView缓存机制总结</h1><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p><strong>scrapped:</strong><br>A “scrapped” view is a view that is still attached to its parent RecyclerView but that has been marked for removal or reuse</p><h2 id="RecyclerView中涉及到缓存的集合"><a href="#RecyclerView中涉及到缓存的集合" class="headerlink" title="RecyclerView中涉及到缓存的集合"></a>RecyclerView中涉及到缓存的集合</h2><ul><li>mAttachedScrap<ul><li>显示在屏幕中，未与RecyclerView分离但被标记移除的Holder。 实际上是从屏幕上分离出来的ViewHolder，但是又即将添加到屏幕上去的ViewHolder。</li></ul></li><li>mChangedScrap<ul><li>显示在屏幕中，数据已经发生改变的Holder。notifxxx方法时产生</li></ul></li><li>mCachedViews <ul><li>在屏幕外的Holder。缓存，幕刃大小为2。</li></ul></li><li>mRecyclerPool<ul><li>在屏幕外的Holder。当mCachedViews满时，存储至此。按照ViewType进行分类存储。默认大小为5。从中取出的Holder需要调用onBindViewHolder方法</li></ul></li></ul><p>mAttachedScrap、mChangedScrap、mCachedViews中取出的Holder是直接可用的，不需要调用onCreatedViewHolder和onBindViewHolder方法。<br>mRecyclerPool中取出的Holder是无效的，需要调用onBindViewHolder方法<br><strong>很奇怪，按照网上mChangedScrap的解释，其中的Holder明显是需要调用onBindViewHolder方法的。但是网上的解释同时又都说不需要调用。。</strong></p><h2 id="RecyclerView获取Holder的顺序-sdk-28"><a href="#RecyclerView获取Holder的顺序-sdk-28" class="headerlink" title="RecyclerView获取Holder的顺序(sdk 28)"></a>RecyclerView获取Holder的顺序(sdk 28)</h2><ol><li>getChangedScrapViewForPosition</li><li>getScrapOrHiddenOrCachedHolderForPosition</li><li>getScrapOrCachedViewForId</li><li>getChildViewHolder</li><li>mViewCacheExtension.getViewForPositionAndType</li><li>getRecycledViewPool().getRecycledView</li><li>mAdapter.createViewHolder</li></ol><h2 id="四级缓存"><a href="#四级缓存" class="headerlink" title="四级缓存"></a>四级缓存</h2><ol><li>mAttachedScrap  mChangedScrap</li><li>mCacheView</li><li>mViewCacheExtension</li><li>mRecyclerPool</li></ol><h2 id="ListView的缓存机制"><a href="#ListView的缓存机制" class="headerlink" title="ListView的缓存机制"></a>ListView的缓存机制</h2><h3 id="缓存的集合"><a href="#缓存的集合" class="headerlink" title="缓存的集合"></a>缓存的集合</h3><ul><li>mActiveViews <ul><li>屏幕内的view，可直接重用</li></ul></li><li>mScrapViews<ul><li>屏幕外的view，需要调用bind</li></ul></li></ul><h3 id="与RecyclerView的不同"><a href="#与RecyclerView的不同" class="headerlink" title="与RecyclerView的不同"></a>与RecyclerView的不同</h3><ol><li>缓存不同： RecyclerView缓存的是ViewHolder，避免了每次的findViewByid，ListView缓存的是View。</li><li>RecyclerView中mCacheViews(屏幕外)获取缓存时，是通过匹配pos获取目标位置的缓存，这样做的好处是，当数据源数据不变的情况下，无须重新bindView。<br>离屏缓存，ListView从mScrapViews根据pos获取相应的缓存，但是并没有直接使用，而是重新getView（即必定会重新bindView）</li><li>RecyclerView可以实现局部刷新， ListView不行</li></ol><h2 id="参考："><a href="#参考：" class="headerlink" title="参考："></a>参考：</h2><p><a href="https://blog.jiahuan.me/2018/07/27/RecyclerView%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/" target="_blank" rel="noopener">RecyclerView源码分析缓存机制</a></p><p><a href="https://www.jianshu.com/p/efe81969f69d" target="_blank" rel="noopener">RecyclerView的缓存机制</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzA3NTYzODYzMg==&amp;mid=2653578065&amp;idx=2&amp;sn=25e64a8bb7b5934cf0ce2e49549a80d6&amp;chksm=84b3b156b3c43840061c28869671da915a25cf3be54891f040a3532e1bb17f9d32e244b79e3f&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">Android ListView 与 RecyclerView 对比浅析–缓存机制</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;RecyclerView缓存机制总结&quot;&gt;&lt;a href=&quot;#RecyclerView缓存机制总结&quot; class=&quot;headerlink&quot; title=&quot;RecyclerView缓存机制总结&quot;&gt;&lt;/a&gt;RecyclerView缓存机制总结&lt;/h1&gt;&lt;h2 id=&quot;基
      
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
      <category term="View" scheme="http://yoursite.com/categories/Android/View/"/>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="View" scheme="http://yoursite.com/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>事件分发机制</title>
    <link href="http://yoursite.com/2019/08/13/Android/%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2019/08/13/Android/事件分发机制/</id>
    <published>2019-08-13T13:12:59.000Z</published>
    <updated>2019-10-21T02:52:31.440Z</updated>
    
    <content type="html"><![CDATA[<h1 id="事件分发机制"><a href="#事件分发机制" class="headerlink" title="事件分发机制"></a>事件分发机制</h1><h1 id="dispatchTouchEvent"><a href="#dispatchTouchEvent" class="headerlink" title="dispatchTouchEvent"></a>dispatchTouchEvent</h1><h2 id="ViewGroup的dispatchTouchEvent方法"><a href="#ViewGroup的dispatchTouchEvent方法" class="headerlink" title="ViewGroup的dispatchTouchEvent方法"></a>ViewGroup的dispatchTouchEvent方法</h2><h3 id="伪代码"><a href="#伪代码" class="headerlink" title="伪代码"></a>伪代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public boolean dispatchTouchEvent()&#123;</span><br><span class="line">    boolean consume = false;</span><br><span class="line">    if (onInterceptTouchEvent(ev))&#123;</span><br><span class="line">        consume = super.dispatchTouchEvent();</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">        consume = child.dispatchTouchEvent(ev);</span><br><span class="line">        if (!consume)</span><br><span class="line">            consume = super.dispatchTouchEvent(ev)</span><br><span class="line">    &#125;</span><br><span class="line">    return consume;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解释：<br>在dispatchTouchEvent方法中，onInterceptTouchEvent方法会判断当前ViewGroup是否会拦截，若拦截，则交给自己处理，若不拦截，则交给子view。若子view不能处理，则还是由自己来处理</p><h3 id="各种事件action"><a href="#各种事件action" class="headerlink" title="各种事件action"></a>各种事件action</h3><h4 id="ActionDown"><a href="#ActionDown" class="headerlink" title="ActionDown"></a>ActionDown</h4><p>ActionDown事件是一个事件序列的开始。当ActionDown事件被ViewGroup拦截，则这个事件剩下的事件将不会通过onInterceptTouchEvent方法，而是直接交给ViewGroup处理</p><h4 id="ActionMove、ActionUp等其他事件"><a href="#ActionMove、ActionUp等其他事件" class="headerlink" title="ActionMove、ActionUp等其他事件"></a>ActionMove、ActionUp等其他事件</h4><p>若ActionDown没有被ViewGroup拦截，则其他的事件每次都会经过ViewGroup的onInterceptTouchEvent方法判断是否拦截</p><h2 id="View的dispatchTouchEvent方法"><a href="#View的dispatchTouchEvent方法" class="headerlink" title="View的dispatchTouchEvent方法"></a>View的dispatchTouchEvent方法</h2><p>如果有onTouchListener，优先执行onTouch方法，如果onTouch方法返回true，则不执行onTouchEvent方法</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;事件分发机制&quot;&gt;&lt;a href=&quot;#事件分发机制&quot; class=&quot;headerlink&quot; title=&quot;事件分发机制&quot;&gt;&lt;/a&gt;事件分发机制&lt;/h1&gt;&lt;h1 id=&quot;dispatchTouchEvent&quot;&gt;&lt;a href=&quot;#dispatchTouchEvent&quot;
      
    
    </summary>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="View" scheme="http://yoursite.com/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>LayoutInflater解析</title>
    <link href="http://yoursite.com/2019/08/13/Android/LayoutInflater%E8%A7%A3%E6%9E%90/"/>
    <id>http://yoursite.com/2019/08/13/Android/LayoutInflater解析/</id>
    <published>2019-08-13T12:31:21.000Z</published>
    <updated>2019-10-21T02:52:31.425Z</updated>
    
    <content type="html"><![CDATA[<h1 id="LayoutInflater解析"><a href="#LayoutInflater解析" class="headerlink" title="LayoutInflater解析"></a>LayoutInflater解析</h1><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">View result = root;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// Temp is the root view that was found in the xml</span><br><span class="line">final View temp = createViewFromTag(root, name, inflaterContext, attrs);</span><br><span class="line"></span><br><span class="line">ViewGroup.LayoutParams params = null;</span><br><span class="line">if (root != null) &#123;</span><br><span class="line">    // Create layout params that match root, if supplied</span><br><span class="line">    params = root.generateLayoutParams(attrs);</span><br><span class="line">    if (!attachToRoot) &#123;</span><br><span class="line">        // Set the layout params for temp if we are not</span><br><span class="line">        // attaching. (If we are, we use addView, below)</span><br><span class="line">        temp.setLayoutParams(params);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// Inflate all children under temp against its context.</span><br><span class="line"></span><br><span class="line">rInflateChildren(parser, temp, attrs, true);</span><br><span class="line"></span><br><span class="line">// We are supposed to attach all the views we found (int temp)</span><br><span class="line">// to root. Do that now.</span><br><span class="line">if (root != null &amp;&amp; attachToRoot) &#123;</span><br><span class="line">    root.addView(temp, params);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// Decide whether to return the root that was passed in or the</span><br><span class="line">// top view found in xml.</span><br><span class="line">if (root == null || !attachToRoot) &#123;</span><br><span class="line">    result = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">return result;</span><br></pre></td></tr></table></figure><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LayoutInflater.from(context).inflate(int resource, ViewGroup root, boolean attachToRoot) ;</span><br></pre></td></tr></table></figure><ul><li>第一个参数是layout资源文件id</li><li>第二个参数是父布局。 当第二个参数为null时，将不会为inflate出来的view添加layoutParam</li><li>第三个参数是是否加入到父布局中。若为空，则，调用root.addView直接加入到父布局中</li></ul><p><strong>需要注意的是，当root!=null，且attachToRoot为true时，Inflater返回的父布局的view，而不是解析出的view</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;LayoutInflater解析&quot;&gt;&lt;a href=&quot;#LayoutInflater解析&quot; class=&quot;headerlink&quot; title=&quot;LayoutInflater解析&quot;&gt;&lt;/a&gt;LayoutInflater解析&lt;/h1&gt;&lt;h2 id=&quot;源码&quot;&gt;&lt;a hr
      
    
    </summary>
    
    
      <category term="Android" scheme="http://yoursite.com/tags/Android/"/>
    
      <category term="View" scheme="http://yoursite.com/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>Scale动画组合使用的坑</title>
    <link href="http://yoursite.com/2019/08/02/Android/Scale%E5%8A%A8%E7%94%BB%E7%BB%84%E5%90%88%E4%BD%BF%E7%94%A8%E7%9A%84%E5%9D%91/"/>
    <id>http://yoursite.com/2019/08/02/Android/Scale动画组合使用的坑/</id>
    <published>2019-08-02T01:43:37.000Z</published>
    <updated>2019-10-21T02:52:31.440Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Scale动画组合使用的坑"><a href="#Scale动画组合使用的坑" class="headerlink" title="Scale动画组合使用的坑"></a>Scale动画组合使用的坑</h1><h2 id="API"><a href="#API" class="headerlink" title="API"></a>API</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Animation scale = <span class="keyword">new</span> ScaleAnimation(<span class="number">0.6f</span>, <span class="number">1.03f</span>, <span class="number">0.6f</span>, <span class="number">1.03f</span>, Animation.RELATIVE_TO_SELF, <span class="number">1f</span>, Animation.RELATIVE_TO_SELF, <span class="number">0</span>);</span><br></pre></td></tr></table></figure><p>参数1: X的初始值<br>参数2: X的最终值<br>参数3: Y的初始值<br>参数4: Y的最终值<br>参数5: X轴，Animation.RELATIVE_TO_SELF表示根据view大小的百分比进行缩放<br>参数6: X轴缩放轴点，1f表示以View的最右端为轴点<br>参数7: Y轴，同参数5<br>参数8: Y轴，同参数6</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>一个补间动画AnimationSet中有两个ScaleAnimation，先放大后缩小<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// start animation</span></span><br><span class="line">        AnimationSet animationSet = <span class="keyword">new</span> AnimationSet(<span class="keyword">false</span>);</span><br><span class="line">        Animation alpha = <span class="keyword">new</span> AlphaAnimation(<span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line">        alpha.setDuration(<span class="number">80</span>);</span><br><span class="line">        Animation scale = <span class="keyword">new</span> ScaleAnimation(<span class="number">0.6f</span>, <span class="number">1.03f</span>, <span class="number">0.6f</span>, <span class="number">1.03f</span>, Animation.RELATIVE_TO_SELF, <span class="number">1f</span>, Animation.RELATIVE_TO_SELF, <span class="number">0</span>);</span><br><span class="line">        scale.setDuration(<span class="number">160</span>);</span><br><span class="line">        scale.setInterpolator(PathInterpolatorCompat.create(<span class="number">0.32f</span>, <span class="number">0.66f</span>, <span class="number">0.6f</span>, <span class="number">1f</span>));</span><br><span class="line">        Animation scale2 = <span class="keyword">new</span> ScaleAnimation(<span class="number">1.03f</span>, <span class="number">1f</span>, <span class="number">1.03f</span>, <span class="number">1f</span>, Animation.RELATIVE_TO_SELF, <span class="number">1f</span>, Animation.RELATIVE_TO_SELF, <span class="number">0</span>);</span><br><span class="line">        scale2.setDuration(<span class="number">70</span>);</span><br><span class="line">        scale2.setStartOffset(<span class="number">160</span>);</span><br><span class="line">        animationSet.addAnimation(scale);</span><br><span class="line">        animationSet.addAnimation(scale2);</span><br><span class="line">        animationSet.addAnimation(alpha);</span><br><span class="line">        tv.startAnimation(animationSet);</span><br></pre></td></tr></table></figure></p><p>但是最后的动画效果却非常不流畅，通过加长动画效果，发现动画在放大后缩回的过程中，缩一定程度后直接突变到了最初始的大小</p><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>scale动画是根据当前的值进行缩放的，所以scale2应该改成这个样子<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Animation scale2 = <span class="keyword">new</span> ScaleAnimation(<span class="number">1.03f</span>, <span class="number">1f</span>, <span class="number">1.03f</span>, <span class="number">1f</span>, Animation.RELATIVE_TO_SELF, <span class="number">1f</span>, Animation.RELATIVE_TO_SELF, <span class="number">0</span>);</span><br><span class="line">scale2.setDuration(<span class="number">70</span>);</span><br><span class="line">scale2.setStartOffset(<span class="number">160</span>);</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Scale动画组合使用的坑&quot;&gt;&lt;a href=&quot;#Scale动画组合使用的坑&quot; class=&quot;headerlink&quot; title=&quot;Scale动画组合使用的坑&quot;&gt;&lt;/a&gt;Scale动画组合使用的坑&lt;/h1&gt;&lt;h2 id=&quot;API&quot;&gt;&lt;a href=&quot;#API&quot; c
      
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
      <category term="View" scheme="http://yoursite.com/categories/Android/View/"/>
    
    
      <category term="View" scheme="http://yoursite.com/tags/View/"/>
    
      <category term="Animation" scheme="http://yoursite.com/tags/Animation/"/>
    
  </entry>
  
  <entry>
    <title>ThreadLocal</title>
    <link href="http://yoursite.com/2019/07/22/Java/ThreadLocal/"/>
    <id>http://yoursite.com/2019/07/22/Java/ThreadLocal/</id>
    <published>2019-07-22T05:57:12.000Z</published>
    <updated>2019-10-21T02:52:31.440Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ThreadLocal"><a href="#ThreadLocal" class="headerlink" title="ThreadLocal"></a>ThreadLocal</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p><strong>当使用ThreadLocal维护变量时，ThreadLocal为每个使用该变量的线程提供独立的变量副本，所以每一个线程都可以独立的改变自己的副本，而不会影响其他线程所对应的副本。从线程的角度来看，目标变量就像是本地变量</strong></p><h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h3 id="set"><a href="#set" class="headerlink" title="set()"></a>set()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">set</span><span class="params">(T value)</span> </span>&#123;</span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        ThreadLocalMap map = getMap(t);</span><br><span class="line">        <span class="keyword">if</span> (map != <span class="keyword">null</span>)</span><br><span class="line">            map.set(<span class="keyword">this</span>, value);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            createMap(t, value);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>createMap()方法：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createMap</span><span class="params">(Thread t, T firstValue)</span> </span>&#123;</span><br><span class="line">        t.threadLocals = <span class="keyword">new</span> ThreadLocalMap(<span class="keyword">this</span>, firstValue);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>查看Thread类的代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* ThreadLocal values pertaining to this thread. This map is maintained</span></span><br><span class="line"><span class="comment">     * by the ThreadLocal class. */</span></span><br><span class="line">    ThreadLocal.ThreadLocalMap threadLocals = <span class="keyword">null</span>;</span><br></pre></td></tr></table></figure></p><p><strong>Thread类中有一个Thread.ThreadLocalMap成员变量。也就是说，ThreadLocal的set方法，实质是在Thread的threadlocals成员中添加value</strong></p><h3 id="get-方法"><a href="#get-方法" class="headerlink" title="get()方法"></a>get()方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Thread t = Thread.currentThread();</span><br><span class="line">        ThreadLocalMap map = getMap(t);</span><br><span class="line">        <span class="keyword">if</span> (map != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ThreadLocalMap.Entry e = map.getEntry(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">if</span> (e != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">                T result = (T)e.value;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> setInitialValue();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其中的ThreadLocalMap.Entry<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Entry</span> <span class="keyword">extends</span> <span class="title">WeakReference</span>&lt;<span class="title">ThreadLocal</span>&lt;?&gt;&gt; </span>&#123;</span><br><span class="line">            <span class="comment">/** The value associated with this ThreadLocal. */</span></span><br><span class="line">            Object value;</span><br><span class="line"></span><br><span class="line">            Entry(ThreadLocal&lt;?&gt; k, Object v) &#123;</span><br><span class="line">                <span class="keyword">super</span>(k);</span><br><span class="line">                value = v;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p><strong>Entry中的key时ThreadLocal的弱引用， 所以在ThreadLocal的get方法中map.getEntry(this)传入的是自己</strong></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><strong>Thread类中有一个ThreadLocalMap成员对象，这个变量在Thread类中并没有使用，只有在ThreadLocal类中才有用到。ThreadLocalMap里的Entry固定为ThreadLocal的弱引用。也就是说ThreadLocal是将value存储到Thread中，调用get和set方法是，先得到当前的Thread线程对象，获取到thread中的map，在以自己为key获取到value值</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ThreadLocal&quot;&gt;&lt;a href=&quot;#ThreadLocal&quot; class=&quot;headerlink&quot; title=&quot;ThreadLocal&quot;&gt;&lt;/a&gt;ThreadLocal&lt;/h1&gt;&lt;h2 id=&quot;作用&quot;&gt;&lt;a href=&quot;#作用&quot; class=&quot;head
      
    
    </summary>
    
      <category term="java" scheme="http://yoursite.com/categories/java/"/>
    
      <category term="多线程" scheme="http://yoursite.com/categories/java/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
    
      <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Text相关计算</title>
    <link href="http://yoursite.com/2019/07/19/Android/Text%E7%9B%B8%E5%85%B3%E8%AE%A1%E7%AE%97/"/>
    <id>http://yoursite.com/2019/07/19/Android/Text相关计算/</id>
    <published>2019-07-19T03:09:42.000Z</published>
    <updated>2019-10-21T02:52:31.440Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Text相关计算"><a href="#Text相关计算" class="headerlink" title="Text相关计算"></a>Text相关计算</h1><h2 id="Text的相关属性"><a href="#Text的相关属性" class="headerlink" title="Text的相关属性"></a>Text的相关属性</h2><p><img src="/images/Text相关计算.webp" alt="图片"></p><p>Baseline上方的值为正，下方的值为负</p><h2 id="TextSize和TextView大小的转换"><a href="#TextSize和TextView大小的转换" class="headerlink" title="TextSize和TextView大小的转换"></a>TextSize和TextView大小的转换</h2><p>相关参数包括：</p><ul><li><p>所使用字体(fallback的话不影响)的UPM(Units Per EM)</p></li><li><p>ascent/descent属性</p></li><li><p>top/bottom参数</p></li></ul><p><strong>禁止includePadding时, TextView实际占据高度是 (ascent - descent) / UPM * textSize</strong></p><p><strong>开启includePadding时, TextView实际占据高度是 (top - bottom) / UPM * textSize</strong></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.jianshu.com/p/1728b725b4a6" target="_blank" rel="noopener">Paint 绘制文字属性</a><br><a href="https://neutra.github.io/2016/TextView%E6%96%87%E5%AD%97%E5%AE%9E%E9%99%85%E9%AB%98%E5%BA%A6%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">TextView文字实际高度分析</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Text相关计算&quot;&gt;&lt;a href=&quot;#Text相关计算&quot; class=&quot;headerlink&quot; title=&quot;Text相关计算&quot;&gt;&lt;/a&gt;Text相关计算&lt;/h1&gt;&lt;h2 id=&quot;Text的相关属性&quot;&gt;&lt;a href=&quot;#Text的相关属性&quot; class=&quot;he
      
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="View" scheme="http://yoursite.com/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>RecyclerView设置item的间距</title>
    <link href="http://yoursite.com/2019/07/09/Android/RecyclerView%E8%AE%BE%E7%BD%AEitem%E7%9A%84%E9%97%B4%E8%B7%9D/"/>
    <id>http://yoursite.com/2019/07/09/Android/RecyclerView设置item的间距/</id>
    <published>2019-07-09T09:29:55.000Z</published>
    <updated>2019-10-21T02:52:31.425Z</updated>
    
    <content type="html"><![CDATA[<h1 id="RecyclerView设置item的间距"><a href="#RecyclerView设置item的间距" class="headerlink" title="RecyclerView设置item的间距"></a>RecyclerView设置item的间距</h1><h2 id="关于GridLayoutManager"><a href="#关于GridLayoutManager" class="headerlink" title="关于GridLayoutManager"></a>关于GridLayoutManager</h2><p>当一个RecyclerView设置了一个GridLayoutManager(this,count)，并且count为4的时候，<strong>实际上就是将屏幕均分为四份，每一份都是180px宽</strong>（以720px为例，我们只考虑左右，暂不考虑上下，原理是相同的），如果不设置ItemDecoration，那么默认item由左开始布置。</p><h2 id="自定义ItemDecoration"><a href="#自定义ItemDecoration" class="headerlink" title="自定义ItemDecoration"></a>自定义ItemDecoration</h2><h3 id="getItemOffsets方法"><a href="#getItemOffsets方法" class="headerlink" title="getItemOffsets方法"></a>getItemOffsets方法</h3><p>设置ItemView的内嵌偏移长度</p><p>ItemView 外面会包裹着一个矩形（outRect）<br>内嵌偏移长度 是指：该矩形（outRect）与 ItemView的间隔<br>相当于为item添加了padding</p><p><strong>常用的getItemOffsets的计算</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 是item在GridLayoutManager中居中显示，并且item之间的间距，每列第一个item和每列最后一个item到recyclerview边界的距离都相等</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmojiItemDecoration</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ItemDecoration</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mNumColumn;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mVerticalSpacing;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mItemWidth;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mItemHorizontalSpacing;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> mInitSpacing = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EmojiItemDecoration</span><span class="params">(<span class="keyword">int</span> column, <span class="keyword">int</span> itemWidth, <span class="keyword">int</span> verticalSpacing)</span> </span>&#123;</span><br><span class="line">        mNumColumn = column;</span><br><span class="line">        mItemWidth = itemWidth;</span><br><span class="line">        mVerticalSpacing = verticalSpacing;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getItemOffsets</span><span class="params">(Rect outRect, View view, RecyclerView parent, RecyclerView.State state)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!mInitSpacing) &#123;</span><br><span class="line">            mInitSpacing = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">int</span> parentWidth = parent.getWidth();</span><br><span class="line"></span><br><span class="line">            mItemHorizontalSpacing = (parentWidth - parent.getPaddingLeft() - parent.getPaddingRight() - mItemWidth * mNumColumn) / (mNumColumn + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> position = parent.getChildAdapterPosition(view);</span><br><span class="line">        <span class="keyword">int</span> column = position % mNumColumn;</span><br><span class="line"></span><br><span class="line">        outRect.left = (mNumColumn - column) * mItemHorizontalSpacing / mNumColumn;</span><br><span class="line">        outRect.right = (column + <span class="number">1</span>) * mItemHorizontalSpacing / mNumColumn;</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (position &lt; mNumColumn) &#123;</span><br><span class="line">            outRect.top = Dimensions.pxFromDp(<span class="number">12</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (position &gt;= mNumColumn) &#123;</span><br><span class="line">            outRect.top = mVerticalSpacing;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;RecyclerView设置item的间距&quot;&gt;&lt;a href=&quot;#RecyclerView设置item的间距&quot; class=&quot;headerlink&quot; title=&quot;RecyclerView设置item的间距&quot;&gt;&lt;/a&gt;RecyclerView设置item的间距&lt;/
      
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="View" scheme="http://yoursite.com/tags/View/"/>
    
      <category term="RecyclerView" scheme="http://yoursite.com/tags/RecyclerView/"/>
    
  </entry>
  
  <entry>
    <title>startService()和bindService()</title>
    <link href="http://yoursite.com/2019/07/04/Android/startService-%E5%92%8CbindService/"/>
    <id>http://yoursite.com/2019/07/04/Android/startService-和bindService/</id>
    <published>2019-07-04T12:37:58.000Z</published>
    <updated>2019-10-21T02:52:31.440Z</updated>
    
    <content type="html"><![CDATA[<h1 id="startService-和bindService-的区别"><a href="#startService-和bindService-的区别" class="headerlink" title="startService()和bindService()的区别"></a>startService()和bindService()的区别</h1><p><img src="/images/startService\ and\ bindService" alt></p><h3 id="生命周期上的差别"><a href="#生命周期上的差别" class="headerlink" title="生命周期上的差别"></a>生命周期上的差别</h3><h4 id="startService"><a href="#startService" class="headerlink" title="startService()"></a>startService()</h4><p>执行startService时，Service经历onCreate-&gt;onStartCommand。当执行stopService时，直接调用onDestroy方法。调用者如果没有stopService，Service会一直在后台运行，下次调用者再起来仍然可以stopService。</p><p>多次调用startService，该Service只能被创建一次，即该Service的onCreate方法只会被调用一次。<strong>但是每次调用startService，onStartCommand方法都会被调用。</strong>无论startService调用多少次，stopService只需要调用一次就能够终止Service</p><h4 id="BindService"><a href="#BindService" class="headerlink" title="BindService()"></a>BindService()</h4><p>bindService开启服务时，根据生命周期里onBind方法的返回值是否为空，有两种情况。</p><ol><li><strong>onBind返回值是null</strong><br>调用bindService开启服务，生命周期执行的方法依次是：<br>onCreate() ==&gt; onBind();<br><strong>调用多次bindService，onCreate和onBind也只在第一次会被执行。调用unbindService结束服务，生命周期执行onDestroy方法，并且unbindService方法只能调用一次，多次调用应用会抛出异常。</strong> 使用时也要注意调用unbindService一定要确保服务已经开启，否则应用会抛出异常。</li><li><strong>onBind返回值不为null</strong><br>这时候调用bindService开启服务，生命周期执行的方法依次是：<br>onCreate() ==&gt; onBind() ==&gt; onServiceConnected();<br>可以发现我们自己写的Connection类里的onServiceConnected方法被调用了。<strong>调用多次bindService，onCreate和onBind都只在第一次会被执行，onServiceConnected会执行多次。</strong><br>并且我们注意到onServiceConnected方法的第二个参数也是IBinder类型的，不难猜测onBind()方法返回的对象被传递到了这里。打印一下两个对象的地址可以证明猜测是正确的。<br>也就是说我们可以在onServiceConnected方法里拿到了Service服务的内部类Binder的对象，通过这个内部类对象，只要强转一下，我们可以调用这个内部类的非私有成员对象和方法。<br>调用unbindService结束服务和上面相同，unbindService只能调用一次，onDestroy也只执行一次，多次调用会抛出异常。<br><br><br><strong>总结</strong><br>第一次执行bindService时，onCreate和onBind方法会被调用，但是多次执行bindService时，onCreate和onBind方法并不会被多次调用，即并不会多次创建服务和绑定服务。</li></ol><h3 id="既使用startService又使用bindService的情况"><a href="#既使用startService又使用bindService的情况" class="headerlink" title="既使用startService又使用bindService的情况"></a>既使用startService又使用bindService的情况</h3><p>如果一个Service又被启动又被绑定，则该Service会一直在后台运行。首先不管如何调用，onCreate始终只会调用一次。对应startService调用多少次，Service的onStart方法便会调用多少次。Service的终止，需要unbindService和stopService同时调用才行。不管startService与bindService的调用顺序，如果先调用unbindService，此时服务不会自动终止，再调用stopService之后，服务才会终止；如果先调用stopService，此时服务也不会终止，而再调用unbindService或者之前调用bindService的Context不存在了（如Activity被finish的时候）之后，服务才会自动停止。</p><p>参考链接:<br><a href>https://my.oschina.net/tingzi/blog/376545</a><br><a href>https://www.jianshu.com/p/d870f99b675c</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;startService-和bindService-的区别&quot;&gt;&lt;a href=&quot;#startService-和bindService-的区别&quot; class=&quot;headerlink&quot; title=&quot;startService()和bindService()的区别&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
      <category term="Service" scheme="http://yoursite.com/categories/Android/Service/"/>
    
    
      <category term="Service" scheme="http://yoursite.com/tags/Service/"/>
    
  </entry>
  
  <entry>
    <title>scrollBy(),scrollTo()和Scroller</title>
    <link href="http://yoursite.com/2019/06/16/Android/scrollBy-scrollTo-%E5%92%8CScroller/"/>
    <id>http://yoursite.com/2019/06/16/Android/scrollBy-scrollTo-和Scroller/</id>
    <published>2019-06-16T12:26:14.000Z</published>
    <updated>2019-10-21T02:52:31.440Z</updated>
    
    <content type="html"><![CDATA[<h1 id="scrollBy-scrollTo-和Scroller"><a href="#scrollBy-scrollTo-和Scroller" class="headerlink" title="scrollBy(),scrollTo()和Scroller"></a>scrollBy(),scrollTo()和Scroller</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>用于对View进行滚动<br><br><br>注意：</p><ol><li><strong>滚动的是View的内容，而不是View本身（对viewd的视窗进行移动）</strong><br>比如：TextView滚动的是内部的text而不是整个view</li><li><strong>滚动的方向与坐标轴正方向相反</strong><br>比如：scrollBy(20,0)<br>最后显示，view会向左移动<br>因为是视窗的移动，所以视窗右移，view相对的向左移动(可以这么理解，具体看源码)</li></ol><h2 id="scrollBy-和-scrollTo-的区别"><a href="#scrollBy-和-scrollTo-的区别" class="headerlink" title="scrollBy() 和 scrollTo()的区别"></a>scrollBy() 和 scrollTo()的区别</h2><p>scrollBy()方法是让View相对于当前的位置滚动某段距离，而scrollTo()方法则是让View相对于初始的位置滚动某段距离。</p><h2 id="Scroller"><a href="#Scroller" class="headerlink" title="Scroller"></a>Scroller</h2><p>利用Scroller可以实现有过渡动画的平滑移动，而不是突兀的瞬移</p><h3 id="使用步骤"><a href="#使用步骤" class="headerlink" title="使用步骤"></a>使用步骤</h3><p>Scroller的基本用法其实还是比较简单的，主要可以分为以下几个步骤：</p><ol><li>创建Scroller的实例</li><li>调用startScroll()方法来初始化滚动数据并刷新界面</li><li>重写computeScroll()方法，并在其内部完成平滑滚动的逻辑</li></ol><h3 id="代码：实现自定义的简单ViewPager"><a href="#代码：实现自定义的简单ViewPager" class="headerlink" title="代码：实现自定义的简单ViewPager"></a>代码：实现自定义的简单ViewPager</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.work3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.support.v4.view.ViewConfigurationCompat;</span><br><span class="line"><span class="keyword">import</span> android.util.AttributeSet;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.MotionEvent;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewConfiguration;</span><br><span class="line"><span class="keyword">import</span> android.view.ViewGroup;</span><br><span class="line"><span class="keyword">import</span> android.widget.Scroller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ScrollLayout</span> <span class="keyword">extends</span> <span class="title">ViewGroup</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String TAG = <span class="string">"test_scroll"</span>;</span><br><span class="line">    <span class="keyword">private</span> Scroller mScroller;</span><br><span class="line">    <span class="comment">// 可以判定为拖动的最小滑动距离</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mTouchSlop;</span><br><span class="line">    <span class="comment">// 落下的屏幕坐标</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mXDown;</span><br><span class="line">    <span class="comment">// 当前的屏幕坐标</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mXMove;</span><br><span class="line">    <span class="comment">// 上一次Action_MMOVE的屏幕坐标</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> mLastMove;</span><br><span class="line">    <span class="comment">// 界面可滑动的左边界</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mLeftBorder;</span><br><span class="line">    <span class="comment">// 界面可滑动的右边界</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> mRightBorder;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ScrollLayout</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">        init(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ScrollLayout</span><span class="params">(Context context, AttributeSet attrs)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs);</span><br><span class="line">        init(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ScrollLayout</span><span class="params">(Context context, AttributeSet attrs, <span class="keyword">int</span> defStyleAttr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, attrs, defStyleAttr);</span><br><span class="line">        init(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        mScroller = <span class="keyword">new</span> Scroller(context);</span><br><span class="line">        <span class="comment">// 获取系统定义的mTouchSlop值</span></span><br><span class="line">        mTouchSlop = ViewConfigurationCompat.getScaledPagingTouchSlop(ViewConfiguration.get(context));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class="line">        <span class="keyword">int</span> childCount = getChildCount();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">            measureChild(getChildAt(i), widthMeasureSpec, heightMeasureSpec);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onLayout</span><span class="params">(<span class="keyword">boolean</span> changed, <span class="keyword">int</span> l, <span class="keyword">int</span> t, <span class="keyword">int</span> r, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!changed)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">int</span> childCount = getChildCount();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; childCount; i++) &#123;</span><br><span class="line">            View childView = getChildAt(i);</span><br><span class="line">            childView.layout(i * childView.getMeasuredWidth(), <span class="number">0</span>, (i + <span class="number">1</span>) * childView.getMeasuredWidth(), childView.getMeasuredHeight());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 初始化左右边界</span></span><br><span class="line">        mLeftBorder = getChildAt(<span class="number">0</span>).getLeft();</span><br><span class="line">        mRightBorder = getChildAt(childCount - <span class="number">1</span>).getRight();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onInterceptTouchEvent</span><span class="params">(MotionEvent ev)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (ev.getAction()) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                mXDown = ev.getRawX();</span><br><span class="line">                mLastMove = mXDown;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</span><br><span class="line">                mXMove = ev.getRawX();</span><br><span class="line">                <span class="keyword">float</span> diff = Math.abs(mXMove - mXDown);</span><br><span class="line">                mLastMove = mXMove;</span><br><span class="line">                <span class="comment">// 手指拖动值大于TouchSlop，认为应该进行滚动，拦截事件</span></span><br><span class="line">                <span class="keyword">if</span> (diff &gt; mTouchSlop) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onInterceptTouchEvent(ev);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onTouchEvent</span><span class="params">(MotionEvent event)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span> (event.getAction()) &#123;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE: &#123;</span><br><span class="line">                mXMove = event.getRawX();</span><br><span class="line">                <span class="keyword">int</span> scrolledX = (<span class="keyword">int</span>) (mLastMove - mXMove);</span><br><span class="line">                <span class="keyword">if</span> (getScrollX() + scrolledX &lt; mLeftBorder) &#123;</span><br><span class="line">                    scrollTo(mLeftBorder, <span class="number">0</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (getScrollX() + scrolledX + getWidth() &gt; mRightBorder) &#123;</span><br><span class="line">                    scrollTo(mRightBorder - getWidth(), <span class="number">0</span>);</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// view随着手指的拖动进行滚动</span></span><br><span class="line">                scrollBy(scrolledX, <span class="number">0</span>);</span><br><span class="line">                Log.i(TAG, <span class="string">"onTouchEvent: "</span> + getChildAt(<span class="number">1</span>).getLeft());</span><br><span class="line">                mLastMove = mXMove;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> MotionEvent.ACTION_UP: &#123;</span><br><span class="line">                <span class="comment">// 当手指抬起时，根据当前的滚动值来判定应该滚动到哪个子控件的界面</span></span><br><span class="line">                <span class="keyword">int</span> targetIndex = (getScrollX() + getWidth() / <span class="number">2</span>) / getWidth();</span><br><span class="line">                <span class="keyword">int</span> dx = targetIndex * getWidth() - getScrollX();</span><br><span class="line">                <span class="comment">// 第二步，调用startScroll()方法来初始化滚动数据并刷新界面</span></span><br><span class="line">                mScroller.startScroll(getScrollX(), <span class="number">0</span>, dx, <span class="number">0</span>);</span><br><span class="line">                <span class="comment">// 对view重绘</span></span><br><span class="line">                invalidate();</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.onTouchEvent(event);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">computeScroll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// computeScroll方法重写的模版代码， 如果是子View需要调用父布局的scrollTo方法</span></span><br><span class="line">        <span class="keyword">if</span> (mScroller.computeScrollOffset()) &#123;</span><br><span class="line">            scrollTo(mScroller.getCurrX(), mScroller.getCurrY());</span><br><span class="line">            <span class="comment">// 对view重绘</span></span><br><span class="line">            invalidate();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="getScrollX-方法"><a href="#getScrollX-方法" class="headerlink" title="getScrollX()方法"></a>getScrollX()方法</h2><p>返回当前滑动View左边界的位置，其实获取的值是画布在窗口左边界时的x坐标。<br>原点（0，0）是初始化时内容显示的位置。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://blog.csdn.net/znouy/article/details/51338256" target="_blank" rel="noopener">Android getScrollX()详解</a><br><a href="https://blog.csdn.net/guolin_blog/article/details/48719871" target="_blank" rel="noopener">Android Scroller完全解析，关于Scroller你所需知道的一切</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;scrollBy-scrollTo-和Scroller&quot;&gt;&lt;a href=&quot;#scrollBy-scrollTo-和Scroller&quot; class=&quot;headerlink&quot; title=&quot;scrollBy(),scrollTo()和Scroller&quot;&gt;&lt;/a&gt;sc
      
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="View" scheme="http://yoursite.com/tags/View/"/>
    
  </entry>
  
  <entry>
    <title>mysql配置相关</title>
    <link href="http://yoursite.com/2019/05/04/Linux/mysql%E9%85%8D%E7%BD%AE%E7%9B%B8%E5%85%B3/"/>
    <id>http://yoursite.com/2019/05/04/Linux/mysql配置相关/</id>
    <published>2019-05-04T03:04:44.000Z</published>
    <updated>2019-10-21T03:30:06.476Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-尽量使用MariaDB而不是mysql"><a href="#1-尽量使用MariaDB而不是mysql" class="headerlink" title="1. 尽量使用MariaDB而不是mysql"></a>1. 尽量使用MariaDB而不是mysql</h2><p>之前有配置过mycat，刚开始使用的mysql，使用yum安装的，默认版本为8.0<br>但是安装之后mycat始终无法登陆，输入密码后总是显示密码错误。后来google了一下，发现是因为<strong>mysql8.0的加密方式发生了编码，导致mycat无法正确识别密码</strong><br>于是尝试切换到5.7版本，但是使用yum安装无论如何都无法切换到我想要的版本。重装为MariaDB后没有这个问题了</p><p>而且，mysql的命令行终端很明显有bug，没有MariaDB好用</p><h2 id="2-MariaDB更新密码"><a href="#2-MariaDB更新密码" class="headerlink" title="2. MariaDB更新密码"></a>2. MariaDB更新密码</h2><p>mariadb的安装可以查看官网，上面有yum安装的教程。<br>安装之后默认是没有密码的。需要更新密码。<br>另外，<strong>发现mariadb在本机是可以不需要密码直接登陆的，不知道原因。但是远程登陆是一定要密码的</strong></p><p>中间出现过很奇怪的现象：一同不知道啥的操作之后，输入root密码总是显示密码错误。跳过密码直接回车可以登陆，但是use mysql;命令之后出现access deny ‘‘@’localhost’之类的报错。没有找到原因和解决办法，最后是直接重置了vps</p><h4 id="1-mysql-secure-installation-命令"><a href="#1-mysql-secure-installation-命令" class="headerlink" title="1. mysql_secure_installation 命令"></a>1. mysql_secure_installation 命令</h4><p>安装之后调用mysql_secure_installation 命令，进入到mariadb的初始化，可以设置密码</p><h4 id="2-登陆mysql更改密码"><a href="#2-登陆mysql更改密码" class="headerlink" title="2. 登陆mysql更改密码"></a>2. 登陆mysql更改密码</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 2.1 更新 mysql 库中 user 表的字段：</span></span><br><span class="line">use mysql;  </span><br><span class="line">UPDATE user SET password=password('newpassword') WHERE user='root';  </span><br><span class="line">flush privileges;  </span><br><span class="line">exit;</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 2.2 或者，使用 <span class="built_in">set</span> 指令设置root密码：在mariadb 10.4之后的版本只能使用该方法</span></span><br><span class="line">SET password for 'root'@'localhost'=password('newpassword');</span><br></pre></td></tr></table></figure><h2 id="3-mysql配置远程登录"><a href="#3-mysql配置远程登录" class="headerlink" title="3. mysql配置远程登录"></a>3. mysql配置远程登录</h2><h4 id="1-给用户远程登录权限："><a href="#1-给用户远程登录权限：" class="headerlink" title="1. 给用户远程登录权限："></a>1. 给用户远程登录权限：</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">use</span> mysql</span><br><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> host=<span class="string">'%'</span> <span class="keyword">where</span> <span class="keyword">user</span> =<span class="string">'root'</span>;</span><br><span class="line"><span class="keyword">FLUSH</span> <span class="keyword">PRIVILEGES</span>;</span><br><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">privileges</span>  <span class="keyword">on</span> *.* <span class="keyword">to</span> root@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">"password"</span>;</span><br><span class="line"><span class="keyword">FLUSH</span> <span class="keyword">PRIVILEGES</span>;</span><br></pre></td></tr></table></figure><p>root可以替换为其他用户名， %表示任意ip， 也可以换成指定的ip， password替换成密码</p><p>使用以下命令可以查看用户的登录权限</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select host,user,password,plugin from user;</span><br></pre></td></tr></table></figure><p><strong>注意</strong><br>root密码的加密方式最好为mysql_native_password，这样子使用中间件登陆才不会出问题。<br>可以使用如下命令更改加密方式：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> <span class="keyword">user</span> <span class="keyword">set</span> <span class="keyword">plugin</span>=<span class="string">'mysql_native_password'</span> <span class="keyword">where</span> <span class="keyword">user</span>=<span class="string">'root'</span>;</span><br></pre></td></tr></table></figure><h4 id="2-lnmp环境配置iptables"><a href="#2-lnmp环境配置iptables" class="headerlink" title="2. lnmp环境配置iptables"></a>2. lnmp环境配置iptables</h4><p>lnmp一键安装环境默认是禁用iptables远程登录的，</p><ul><li>查看iptables规则：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -L -n --line-numbers</span><br></pre></td></tr></table></figure></li></ul><p>输入样例如下：<br><img src="/images/mysql_iptables.png" alt="图片"><br>可以看到3306端口的target为drop</p><ul><li>删除对应的drop规则</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -D INPUT 5</span><br></pre></td></tr></table></figure><p>iptables的使用参考：<br><a href>https://www.vpser.net/security/linux-iptables.html</a></p><h4 id="3-非集成centos环境开放3306端口"><a href="#3-非集成centos环境开放3306端口" class="headerlink" title="3.非集成centos环境开放3306端口"></a>3.非集成centos环境开放3306端口</h4><h5 id="centos-7以上"><a href="#centos-7以上" class="headerlink" title="centos-7以上"></a>centos-7以上</h5><p>firewalld 防火墙（centos-7）运行命令,并重启：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=3306/tcp --permanent</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure><h5 id="centos-7以前"><a href="#centos-7以前" class="headerlink" title="centos-7以前"></a>centos-7以前</h5><p>iptables 防火墙（centos6.5及其以前）运行命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/iptables</span><br></pre></td></tr></table></figure><p>在文件内添加下面命令行，然后重启</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-A INPUT -p tcp -m state --state NEW -m tcp --dport 3306 -j ACCEPT</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service iptables restart</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-尽量使用MariaDB而不是mysql&quot;&gt;&lt;a href=&quot;#1-尽量使用MariaDB而不是mysql&quot; class=&quot;headerlink&quot; title=&quot;1. 尽量使用MariaDB而不是mysql&quot;&gt;&lt;/a&gt;1. 尽量使用MariaDB而不是mysql
      
    
    </summary>
    
      <category term="Linux" scheme="http://yoursite.com/categories/Linux/"/>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>apt常用命令</title>
    <link href="http://yoursite.com/2019/05/02/Linux/apt%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2019/05/02/Linux/apt常用命令/</id>
    <published>2019-05-02T11:49:35.000Z</published>
    <updated>2019-10-21T02:52:31.440Z</updated>
    
    <content type="html"><![CDATA[<h1 id="apt常用命令"><a href="#apt常用命令" class="headerlink" title="apt常用命令"></a>apt常用命令</h1><p>参考：<br><a href="https://www.centos.bz/2017/07/ubuntu-apt-cache-version-list-install-specify-version/" target="_blank" rel="noopener">apt命令安装指定版本</a></p><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><blockquote><p>sudo apt-get update     //更新源<br>sudo apt-get upgrade    //更新已安装的包<br>sudo apt-get dist-upgrade       //升级系统<br>sudo apt-get dselect-upgrade    //使用 dselect 升级</p></blockquote><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><blockquote><p>apt-cache search package<br>//搜索包　　<br>apt-cache show package<br>//获取包的相关信息，如说明、大小、版本等　<br>apt-cache depends package<br>//了解使用依赖<br>apt-cache rdepends package<br>//是查看该包被哪些包依赖</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apt-cache madison &lt;package name&gt;  //列出所有来源的版本...madison是一个apt-cache子命令，可以通过man apt-cache查询更多用法。</span><br><span class="line"></span><br><span class="line">apt-cache policy &lt;&lt;package name&gt;&gt;  /*将列出所有来源的版本。信息会比上面详细一点*/</span><br><span class="line"></span><br><span class="line">apt-show-versions -a &lt;&lt;package name&gt;&gt; //列举出所有版本，且能查看是否已经安装。还可以通过apt-show-versions -u &lt;&gt;来查询是否有升级版本。</span><br></pre></td></tr></table></figure><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><blockquote><p>sudo apt-get install package<br>//安装包　　<br>sudo apt-get install package - - reinstall<br>//重新安装包　　<br>sudo apt-get -f install<br>//修复安装   (“-f = ——fix-missing”)</p></blockquote><h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>sudo apt-get remove package<br>删除包　　<br>sudo apt-get remove package - - purge<br>删除包，包括删除配置文件等<br>sudo apt-get clean &amp;&amp; sudo apt-get autoclean<br>清理无用的包<br>sudo apt-get check<br>检查是否有损坏的依赖</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><blockquote><p>sudo apt-get build-dep package<br>安装相关的编译环境<br>apt-get source package<br>下载该包的源代码</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;apt常用命令&quot;&gt;&lt;a href=&quot;#apt常用命令&quot; class=&quot;headerlink&quot; title=&quot;apt常用命令&quot;&gt;&lt;/a&gt;apt常用命令&lt;/h1&gt;&lt;p&gt;参考：&lt;br&gt;&lt;a href=&quot;https://www.centos.bz/2017/07/ubun
      
    
    </summary>
    
    
      <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>华为手机的内存泄露</title>
    <link href="http://yoursite.com/2019/04/19/Android/%E5%8D%8E%E4%B8%BA%E6%89%8B%E6%9C%BA%E7%9A%84%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2/"/>
    <id>http://yoursite.com/2019/04/19/Android/华为手机的内存泄露/</id>
    <published>2019-04-19T03:41:06.000Z</published>
    <updated>2019-10-21T02:52:31.440Z</updated>
    
    <content type="html"><![CDATA[<h1 id="华为手机的内存泄露"><a href="#华为手机的内存泄露" class="headerlink" title="华为手机的内存泄露"></a>华为手机的内存泄露</h1><p>最近在开发的时候，使用我的华为手机做真机调试，发现LeakCanary一直有内存泄露报出。<br>一开始我以为是我使用MVP模式开发导致的，使用WeakReference和一些其他的处理之后，发现这个内存泄露还是存在。<br>然后我用模拟器调试，发现模拟器竟然没有内存泄漏报出。想到这可能是手机的问题。应该是国内手机厂商对系统的魔改造成的。</p><p>我的手机系统是华为EMUI9.0  &amp;&amp;  Android9.0</p><p>以下是我找到的网上的解决方案：</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.jianshu.com/p/95242060320f" target="_blank" rel="noopener">https://www.jianshu.com/p/95242060320f</a></p><h3 id="inputMethodManager-mLastSrvView泄露"><a href="#inputMethodManager-mLastSrvView泄露" class="headerlink" title="inputMethodManager.mLastSrvView泄露"></a>inputMethodManager.mLastSrvView泄露</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FixMemLeak</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Field field;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">boolean</span> hasField = <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">fixLeak</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!hasField) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        InputMethodManager imm = (InputMethodManager) context.getSystemService(Context.INPUT_METHOD_SERVICE);</span><br><span class="line">        <span class="keyword">if</span> (imm == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String[] arr = <span class="keyword">new</span> String[]&#123;<span class="string">"mLastSrvView"</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span> (String param : arr) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (field == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    field = imm.getClass().getDeclaredField(param);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (field == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    hasField = <span class="keyword">false</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (field != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                    field.set(imm, <span class="keyword">null</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">                t.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在BaseActivity的onDestroy()方法里执行这个fexLeak()方法，然后所有的Activity继承BaseActivity。然后就没有报错了</p><h3 id="Toast-TN-mWM-泄露"><a href="#Toast-TN-mWM-泄露" class="headerlink" title="Toast$TN.mWM 泄露"></a>Toast$TN.mWM 泄露</h3><p>泄露出现在显示一个Toast之后。这个就更迷了，网上我没有找到相关的解释。同样的在模拟器上没有出现这样的内存泄露。</p><p>最终的解决方法是：<br>在使用Toast时，传入的Context参数使用ApplicationContext而不是Activity。然后就没有内存泄露报出了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;华为手机的内存泄露&quot;&gt;&lt;a href=&quot;#华为手机的内存泄露&quot; class=&quot;headerlink&quot; title=&quot;华为手机的内存泄露&quot;&gt;&lt;/a&gt;华为手机的内存泄露&lt;/h1&gt;&lt;p&gt;最近在开发的时候，使用我的华为手机做真机调试，发现LeakCanary一直有内存泄露
      
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="内存泄露" scheme="http://yoursite.com/tags/%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2/"/>
    
  </entry>
  
  <entry>
    <title>Activity class {} does not exist</title>
    <link href="http://yoursite.com/2019/04/16/Android/Activity-class-does-not-exist/"/>
    <id>http://yoursite.com/2019/04/16/Android/Activity-class-does-not-exist/</id>
    <published>2019-04-16T11:23:35.000Z</published>
    <updated>2019-10-21T02:52:31.425Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Activity-class-does-not-exist"><a href="#Activity-class-does-not-exist" class="headerlink" title="Activity class {} does not exist"></a>Activity class {} does not exist</h1><p>有时候真机调试，在手机上卸载调试的APP就会出现上述的问题。</p><p><strong>解决办法：</strong><br>使用adb命令<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adb uninstall [包名]</span><br></pre></td></tr></table></figure></p><p>估计可能是调试的APP没有彻底卸载造成的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Activity-class-does-not-exist&quot;&gt;&lt;a href=&quot;#Activity-class-does-not-exist&quot; class=&quot;headerlink&quot; title=&quot;Activity class {} does not exist&quot;&gt;
      
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
      <category term="AndroidStudio" scheme="http://yoursite.com/categories/Android/AndroidStudio/"/>
    
    
      <category term="AndroidStudio" scheme="http://yoursite.com/tags/AndroidStudio/"/>
    
  </entry>
  
  <entry>
    <title>MVP模式防止内存泄露</title>
    <link href="http://yoursite.com/2019/04/15/Android/MVP%E6%A8%A1%E5%BC%8F%E9%98%B2%E6%AD%A2%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2/"/>
    <id>http://yoursite.com/2019/04/15/Android/MVP模式防止内存泄露/</id>
    <published>2019-04-15T00:54:27.000Z</published>
    <updated>2019-10-21T02:52:31.425Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MVP模式防止内存泄露"><a href="#MVP模式防止内存泄露" class="headerlink" title="MVP模式防止内存泄露"></a>MVP模式防止内存泄露</h1><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://jocherch.github.io/mvp/mvp-memory-leak/" target="_blank" rel="noopener">https://jocherch.github.io/mvp/mvp-memory-leak/</a><br><a href="https://blog.csdn.net/Xiong_IT/article/details/52610729" target="_blank" rel="noopener">https://blog.csdn.net/Xiong_IT/article/details/52610729</a></p><h3 id="发生内存泄露的原因"><a href="#发生内存泄露的原因" class="headerlink" title="发生内存泄露的原因"></a>发生内存泄露的原因</h3><p>由于Presenter经常性地需要执行一些耗时的操作，例如，我们经常使用的网络请求数据。当 Presenter 持有了 Activity 的强引用，如果在请求结束之前，Activity 被销毁了，那么由于网络请求还没有返回，导致 Presenter 一直持有 Activity 对象的引用，使得该对象无法被系统回收，此时就发生了内存泄露。</p><p><strong>解决方案：通过弱引用和 Activity / Fragment 的生命周期来解决这个问题。</strong></p><p><strong>Model</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">BaseMvpModel</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mvpCancleTasks</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="comment">// TODO 终止线程池ThreadPool.shutDown()，AsyncTask.cancle()，或者调用框架的取消任务api</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>View</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">BaseMvpView</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mvpDetachView</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        例如</span></span><br><span class="line"><span class="comment">        @Override</span></span><br><span class="line"><span class="comment">        public void onDestroy() &#123;</span></span><br><span class="line"><span class="comment">            super.onDestroy();</span></span><br><span class="line"><span class="comment">            mPresenter.mvpDestroy();</span></span><br><span class="line"><span class="comment">            mPresenter = null;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>Presenter</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">BaseMvpPresenter</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mvpDestory</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">/*例如:</span></span><br><span class="line"><span class="comment">        public void mvpDestory() &#123;</span></span><br><span class="line"><span class="comment">            view = null;</span></span><br><span class="line"><span class="comment">            if(modle != null) &#123;</span></span><br><span class="line"><span class="comment">                modle.mvpaCncleTasks();</span></span><br><span class="line"><span class="comment">                modle = null;</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里只是创建了一个BaseInterface用于让mvp的接口去继承，没有做更加详细的封装，仅仅由于提示。主要是不同的模块处理可能会有不同的操作</p><p><strong>注意要使用WeakReference</strong><br>并不是在任何情况下Activity的onDestroy都会被调用（其它原因导致Activity对象还在被引用，就不会回调onDestroy方法），一旦这种情况发生，弱引用也能够保证不会造成内存泄露。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MVP模式防止内存泄露&quot;&gt;&lt;a href=&quot;#MVP模式防止内存泄露&quot; class=&quot;headerlink&quot; title=&quot;MVP模式防止内存泄露&quot;&gt;&lt;/a&gt;MVP模式防止内存泄露&lt;/h1&gt;&lt;h3 id=&quot;参考链接&quot;&gt;&lt;a href=&quot;#参考链接&quot; class=&quot;
      
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="内存泄露" scheme="http://yoursite.com/tags/%E5%86%85%E5%AD%98%E6%B3%84%E9%9C%B2/"/>
    
      <category term="MVP" scheme="http://yoursite.com/tags/MVP/"/>
    
  </entry>
  
  <entry>
    <title>Activity管理类的封装</title>
    <link href="http://yoursite.com/2019/04/14/Android/Activity%E7%AE%A1%E7%90%86%E7%B1%BB%E7%9A%84%E5%B0%81%E8%A3%85/"/>
    <id>http://yoursite.com/2019/04/14/Android/Activity管理类的封装/</id>
    <published>2019-04-14T11:41:50.000Z</published>
    <updated>2019-10-21T02:52:31.425Z</updated>
    
    <content type="html"><![CDATA[<h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>有的时候我们需要在一个activity1中销毁另一个制定的activity2。或者是在程序的某个位置销毁所有的activity，达到退出整个app的目的</p><p>我在网上找到一个做法，考虑的很严谨，在stack里存的不是activity，而是WeakReference。作者的愿意是担心出现有activity被finish之后ActivityMannager却忘了通知的情况，然后就是内存泄露 。。<br><strong>这里主要是说在系统内存不足杀死Activity时onDestory方法不会被调用</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FinishActivityManager</span> <span class="keyword">extends</span> <span class="title">BaseActivity</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">FinishActivityManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> FinishActivityManager sManager;</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;WeakReference&lt;Activity&gt;&gt; mActivityStack;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> FinishActivityManager <span class="title">getManager</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sManager == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (FinishActivityManager.class) &#123;</span><br><span class="line">                <span class="keyword">if</span> (sManager == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    sManager = <span class="keyword">new</span> FinishActivityManager();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sManager;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加Activity到栈</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> activity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addActivity</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mActivityStack == <span class="keyword">null</span>) &#123;</span><br><span class="line">            mActivityStack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        mActivityStack.add(<span class="keyword">new</span> WeakReference&lt;&gt;(activity));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 检查弱引用是否释放，若释放，则从栈中清理掉该元素</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">checkWeakReference</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mActivityStack != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 使用迭代器进行安全删除</span></span><br><span class="line">            <span class="keyword">for</span> (Iterator&lt;WeakReference&lt;Activity&gt;&gt; it = mActivityStack.iterator(); it.hasNext(); ) &#123;</span><br><span class="line">                WeakReference&lt;Activity&gt; activityReference = it.next();</span><br><span class="line">                Activity temp = activityReference.get();</span><br><span class="line">                <span class="keyword">if</span> (temp == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    it.remove();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取当前Activity（栈中最后一个压入的）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Activity <span class="title">currentActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        checkWeakReference();</span><br><span class="line">        <span class="keyword">if</span> (mActivityStack != <span class="keyword">null</span> &amp;&amp; !mActivityStack.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> mActivityStack.lastElement().get();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭当前Activity（栈中最后一个压入的）</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finishActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Activity activity = currentActivity();</span><br><span class="line">        <span class="keyword">if</span> (activity != <span class="keyword">null</span>) &#123;</span><br><span class="line">            finishActivity(activity);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭指定的Activity</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> activity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finishActivity</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (activity != <span class="keyword">null</span> &amp;&amp; mActivityStack != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 使用迭代器进行安全删除</span></span><br><span class="line">            <span class="keyword">for</span> (Iterator&lt;WeakReference&lt;Activity&gt;&gt; it = mActivityStack.iterator(); it.hasNext(); ) &#123;</span><br><span class="line">                WeakReference&lt;Activity&gt; activityReference = it.next();</span><br><span class="line">                Activity temp = activityReference.get();</span><br><span class="line">                <span class="comment">// 清理掉已经释放的activity</span></span><br><span class="line">                <span class="keyword">if</span> (temp == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    it.remove();</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (temp == activity) &#123;</span><br><span class="line">                    it.remove();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            activity.finish();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 关闭指定类名的所有Activity</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cls</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finishActivity</span><span class="params">(Class&lt;?&gt; cls)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mActivityStack != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 使用迭代器进行安全删除</span></span><br><span class="line">            <span class="keyword">for</span> (Iterator&lt;WeakReference&lt;Activity&gt;&gt; it = mActivityStack.iterator(); it.hasNext(); ) &#123;</span><br><span class="line">                WeakReference&lt;Activity&gt; activityReference = it.next();</span><br><span class="line">                Activity activity = activityReference.get();</span><br><span class="line">                <span class="comment">// 清理掉已经释放的activity</span></span><br><span class="line">                <span class="keyword">if</span> (activity == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    it.remove();</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (activity.getClass().equals(cls)) &#123;</span><br><span class="line">                    it.remove();</span><br><span class="line">                    activity.finish();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 结束所有Activity</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">finishAllActivity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mActivityStack != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (WeakReference&lt;Activity&gt; activityReference : mActivityStack) &#123;</span><br><span class="line">                Activity activity = activityReference.get();</span><br><span class="line">                <span class="keyword">if</span> (activity != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    activity.finish();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            mActivityStack.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 退出应用程序</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exitApp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            finishAllActivity();</span><br><span class="line">            <span class="comment">// 退出JVM,释放所占内存资源,0表示正常退出</span></span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">            <span class="comment">// 从系统中kill掉应用程序</span></span><br><span class="line">            android.os.Process.killProcess(android.os.Process.myPid());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是一个BaseActivity类， 重写onCreate和onDestory方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.chenlei.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.support.annotation.Nullable;</span><br><span class="line"><span class="keyword">import</span> android.support.v7.app.AppCompatActivity;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        MyActivityManager.addActivity(<span class="keyword">this</span>);</span><br><span class="line">        Log.i(<span class="string">"有activity新添加"</span>, <span class="string">"onCreate: "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Log.i(<span class="string">"有activity被销毁"</span>, <span class="string">"onDestroy: "</span>+ MyActivityManager.getSize());</span><br><span class="line">        MyActivityManager.finishActivity(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来所有的activity类都继承自BaseActivity， 然后就可以在制定的activity类中对ActivityManager类进行操作</p><p>网上原文：<br><a href="http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2017/0629/8124.html" target="_blank" rel="noopener">http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2017/0629/8124.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;使用场景&quot;&gt;&lt;a href=&quot;#使用场景&quot; class=&quot;headerlink&quot; title=&quot;使用场景&quot;&gt;&lt;/a&gt;使用场景&lt;/h3&gt;&lt;p&gt;有的时候我们需要在一个activity1中销毁另一个制定的activity2。或者是在程序的某个位置销毁所有的activit
      
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
    
      <category term="Activity" scheme="http://yoursite.com/tags/Activity/"/>
    
  </entry>
  
  <entry>
    <title>Android-Studio解决依赖冲突</title>
    <link href="http://yoursite.com/2019/04/14/Android/Android-Studio%E8%A7%A3%E5%86%B3%E4%BE%9D%E8%B5%96%E5%86%B2%E7%AA%81/"/>
    <id>http://yoursite.com/2019/04/14/Android/Android-Studio解决依赖冲突/</id>
    <published>2019-04-14T11:40:23.000Z</published>
    <updated>2019-10-21T02:52:31.425Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-Studio解决依赖冲突"><a href="#Android-Studio解决依赖冲突" class="headerlink" title="Android-Studio解决依赖冲突"></a>Android-Studio解决依赖冲突</h1><p>我们做android项目通常会引入很多第三方库， 有时候不同的第三方库会出现依赖冲突，导致添加依赖后就android-studio就报错。<br>做项目是要添加glide库，直接添加最新版本 4.8，《第一行代码》中介绍使用的版本是3.7。 结果就是4.8的版本一添加依赖就报错，在build.gradle文件中报错buildtool版本冲突。我在网上找到了如下的文章，解决方法是一样的，做一个笔记。<strong>需要说明的 glide4.+ 的版本和 3.+ 的版本，提供的api接口的操作形式发生了变化，而且google上搜到说版本升级之后其实性能没有多大提升</strong></p><p>原文：<br><a href="https://blog.csdn.net/victor888886/article/details/73714141" target="_blank" rel="noopener">https://blog.csdn.net/victor888886/article/details/73714141</a></p><p><strong>以下是网上的文章内容：</strong><br>最近刚接手一个项目，里面模块有三四个，引入的第三方包更多了。但是问题来了，新配置的studio一运行就报了错。</p><pre><code>Error:Execution failed for task &apos;:app:processDebugManifest&apos;.</code></pre><blockquote><p>Manifest merger failed : Attribute meta-data#android.support.VERSION@value value=(25.3.1) from [com.android.support:design:25.3.1] AndroidManifest.xml:27:9-31<br>is also present at [com.android.support:support-v4:26.0.0-alpha1] AndroidManifest.xml:27:9-38 value=(26.0.0-alpha1).<br>Suggestion: add ‘tools:replace=”android:value”’ to element at AndroidManifest.xml:25:5-27:34 to override.  </p></blockquote><p>可以看到，studio已经明确的指出了错误，在清单文件中Android support 库版本冲突了，而且，studio还很“人性”地给出了suggestion：清单文件25行——27行添加：</p><pre><code>tools:replace=&quot;android:value&quot;</code></pre><p>坑就坑在这里，给出的建议完全误导人了。咳咳，下面看我详（如）细（何）解（装）释（逼）：</p><h4 id="问题分析："><a href="#问题分析：" class="headerlink" title="问题分析："></a>问题分析：</h4><pre><code>看到com.android.support:design:25.3.1 和com.android.support:support-v4:26.0.0-alpha1，说明这个Android support库版本冲突了，解决的思想很简单，就是统一使用同一个版本的support库，比如修改掉26.0.0-alpha1的依赖，统一换成25.3.1的版本。</code></pre><h3 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h3><pre><code>既然有了思路，那就动手试一试，全局搜索26.0.0-alpha1，统一替换为 25.3.1正常情况下，这个是能解决问题的，但只能解决gradle里面自己引入的依赖版本问题。然而，今天碰到的坑还没完呢，同步代码以后，还是原来的错误信息！</code></pre><h3 id="再次分析："><a href="#再次分析：" class="headerlink" title="再次分析："></a>再次分析：</h3><pre><code>问题就出在第三方库的依赖了，好多第三方库默认引用当前最新的support库，现在最新的就是26.0.0-alpha1这个版本。所以，要解决问题，就要从引入的三方库里面入手了！那么问题来了，挖掘机哪家......哦不，怎么知道哪个依赖包有冲突？下面出杀手锏了：打开Android studio下面的terminal，输入命令：`gradle -q app:dependencies`,惊喜出现了：没有配置gradle环境变量的同学赶快去配一个吧！..**（这里不需要配置gradle环境变量也可以，在terminal中输入命令：./gradlew -q app:dependencies效果是一样的）**配过之后可以看到类似一下的输出：</code></pre><p>+— project :base-util<br>| +— com.android.support:recyclerview-v7:25.3.1 (<em>)<br>| +— cn.qqtheme.framework:WheelPicker:1.5.1<br>| | +— cn.qqtheme.framework:Common:1.5.1<br>| | | +— com.android.support:support-v4:latest.release -&gt; 26.0.0-alpha1 (</em>)<br>| | | — com.android.support:support-annotations:latest.release -&gt; 26.0.0-alpha1<br>| | +— com.android.support:support-v4:latest.release -&gt; 26.0.0-alpha1 (<em>)<br>| | — com.android.support:support-annotations:latest.release -&gt; 26.0.0-alpha1<br>| +— com.github.CymChad:BaseRecyclerViewAdapterHelper:v1.9.8<br>| +— io.reactivex:rxjava:1.1.8<br>| +— io.reactivex:rxandroid:1.1.0<br>| | — io.reactivex:rxjava:1.1.0 -&gt; 1.1.8<br>| +— com.squareup.okhttp3:okhttp:3.2.0 -&gt; 3.4.1<br>| | — com.squareup.okio:okio:1.9.0<br>| +— com.squareup.retrofit2:retrofit:2.0.2<br>| | — com.squareup.okhttp3:okhttp:3.2.0 -&gt; 3.4.1 (</em>)<br>| +— com.squareup.retrofit2:adapter-rxjava:2.0.2<br>| | +— com.squareup.retrofit2:retrofit:2.0.2 (<em>)<br>| | — io.reactivex:rxjava:1.1.1 -&gt; 1.1.8<br>| +— com.squareup.retrofit2:converter-gson:2.0.2<br>| | +— com.squareup.retrofit2:retrofit:2.0.2 (</em>)<br>| | — com.google.code.gson:gson:2.6.1<br>| +— com.squareup.okhttp3:logging-interceptor:3.4.1<br>| | — com.squareup.okhttp3:okhttp:3.4.1 (<em>)<br>| +— com.github.zhaokaiqiang.klog:library:1.5.0<br>| | — com.android.support:support-annotations:23.4.0 -&gt; 26.0.0-alpha1<br>| +— com.squareup.retrofit2:converter-simplexml:2.0.2<br>| | +— com.squareup.retrofit2:retrofit:2.0.2 (</em>)<br>| | — org.simpleframework:simple-xml:2.7.1<br>| +— com.github.bumptech.glide:glide:3.7.0<br>| +— project :base-res (*)<br>| — com.jakewharton:butterknife:7.0.1</p><p>很明显cn.qqtheme.framework:WheelPicker这个包默认引用了最新的support库！</p><h3 id="最终解决："><a href="#最终解决：" class="headerlink" title="最终解决："></a>最终解决：</h3><p>找到依赖的库，修改为下面的方式引入：</p><pre><code>compile (&apos;cn.qqtheme.framework:WheelPicker:1.5.1&apos;){        exclude group:&apos;com.android.support&apos;    }</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Android-Studio解决依赖冲突&quot;&gt;&lt;a href=&quot;#Android-Studio解决依赖冲突&quot; class=&quot;headerlink&quot; title=&quot;Android-Studio解决依赖冲突&quot;&gt;&lt;/a&gt;Android-Studio解决依赖冲突&lt;/h1&gt;&lt;
      
    
    </summary>
    
      <category term="Android" scheme="http://yoursite.com/categories/Android/"/>
    
      <category term="AndroidStudio" scheme="http://yoursite.com/categories/Android/AndroidStudio/"/>
    
    
      <category term="AndroidStudio" scheme="http://yoursite.com/tags/AndroidStudio/"/>
    
  </entry>
  
</feed>
